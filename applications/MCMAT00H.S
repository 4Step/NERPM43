; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\KumarA\NERPM\CUBE\MCMAT00G.PRN" MSG='Create Zonal A1DECK'
FILEO RECO[5] = "C:\KumarA\NERPM\CUBE\ZACCESMD1.DBF",
 FIELDS= TAZ, PSHORTMD, ASHORTMD, PLONGMD, ALONGMD,CODWLKMD, PRDSHTMD, ATTSHTMD, PRDLNGMD, ATTLNGMD 
FILEO RECO[4] = "C:\KumarA\NERPM\CUBE\ZACCESAM1.DBF",
 FIELDS= TAZ, PSHORT, ASHORT, PLONG, ALONG,CODWLK, PRDSHT, ATTSHT, PRDLNG, ATTLNG
FILEO RECO[3] = "C:\KumarA\NERPM\CUBE\ZINCOMMD1.DBF",
 FIELDS= TAZ, AUTO0MD, AUTO1MD, AUTO2MD
FILEO RECO[2] = "C:\KumarA\NERPM\CUBE\ZINCOMAM1.DBF",
 FIELDS= TAZ, AUTO0, AUTO1, AUTO2
FILEO RECO[1] = "C:\KumarA\NERPM\CUBE\ZONAL1.DBF",
 FIELDS= TAZ, TERMTIME, PKCOSTPK, PKCOST24, CBD, EXURB
FILEI LOOKUPI[10] = "C:\KumarA\NERPM\CUBE\DUWEIGHT.CSV"
FILEI LOOKUPI[9] = "C:\KumarA\NERPM\CUBE\GRATES32.CSV"
FILEI LOOKUPI[8] = "C:\KumarA\NERPM\CUBE\GRATES24.CSV"
FILEI LOOKUPI[7] = "C:\KumarA\NERPM\CUBE\GRATES23.CSV"
FILEI LOOKUPI[6] = "C:\KumarA\NERPM\CUBE\GRATES22.CSV"
FILEI LOOKUPI[5] = "C:\KumarA\NERPM\CUBE\GRATES21.CSV"
FILEI LOOKUPI[4] = "C:\KumarA\NERPM\CUBE\GRATES14.CSV"
FILEI LOOKUPI[3] = "C:\KumarA\NERPM\CUBE\GRATES13.CSV"
FILEI LOOKUPI[2] = "C:\KumarA\NERPM\CUBE\GRATES12.CSV"
FILEI LOOKUPI[1] = "C:\KumarA\NERPM\CUBE\GRATES11.CSV"
FILEI ZDATI[5] = "C:\KumarA\NERPM\CUBE\EXURBS.DBF"
FILEI ZDATI[4] = "C:\KumarA\NERPM\CUBE\CBDZONES.DBF"
FILEI ZDATI[3] = "C:\KumarA\NERPM\CUBE\LINKS_AT.DBF"


ZONES= 1642

ARRAY DRANGE=16, SFTOT=4, MFTOT=4, HMDUM=5, SFAUTO=4, MFAUTO=4, TERM=5
ARRAY SFDUM1=5, SFDUM2=5, SFDUM3=5, SFDUM4=5, MFDUM1=5, MFDUM2=5, MFDUM3=5, MFDUM4=5
ARRAY SFTRIP1=4, SFTRIP2=4, SFTRIP3=4, SFTRIP4=4, MFTRIP1=4, MFTRIP2=4, MFTRIP3=4, MFTRIP4=4

DRANGE[1]=1.125
DRANGE[2]=1.375
DRANGE[3]=1.625
DRANGE[4]=1.875
DRANGE[5]=2.125
DRANGE[6]=2.375
DRANGE[7]=2.625
DRANGE[8]=2.875
DRANGE[9]=3.125
DRANGE[10]=3.375
DRANGE[11]=3.625
DRANGE[12]=3.875
DRANGE[13]=4.125
DRANGE[14]=4.375
DRANGE[15]=4.625
DRANGE[16]=5.995


; READ TRIP RATES
LOOKUP, NAME=RATES11,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
INTERPOLATE=N, LIST=Y, LOOKUPI=1
LOOKUP, NAME=RATES12,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
INTERPOLATE=N, LIST=Y, LOOKUPI=2
LOOKUP, NAME=RATES13,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
INTERPOLATE=N, LIST=Y, LOOKUPI=3
LOOKUP, NAME=RATES14,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
INTERPOLATE=N, LIST=Y, LOOKUPI=4
LOOKUP, NAME=RATES21,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
INTERPOLATE=N, LIST=Y, LOOKUPI=5
LOOKUP, NAME=RATES22,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
INTERPOLATE=N, LIST=Y, LOOKUPI=6
LOOKUP, NAME=RATES23,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
INTERPOLATE=N, LIST=Y, LOOKUPI=7
LOOKUP, NAME=RATES24,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
INTERPOLATE=N, LIST=Y, LOOKUPI=8
LOOKUP, NAME=RATES32,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
INTERPOLATE=N, LIST=Y, LOOKUPI=9


; READ DU WEIGHTS
LOOKUP, NAME=DSHARE,
LOOKUP[1]=1, RESULT=2,
LOOKUP[2]=1, RESULT=3,
LOOKUP[3]=1, RESULT=4,
LOOKUP[4]=1, RESULT=5,
LOOKUP[5]=1, RESULT=6,
LOOKUP[6]=1, RESULT=7,
LOOKUP[7]=1, RESULT=8,
LOOKUP[8]=1, RESULT=9,
LOOKUP[9]=1, RESULT=10,
LOOKUP[10]=1, RESULT=11,
LOOKUP[11]=1, RESULT=12,
LOOKUP[12]=1, RESULT=13,
LOOKUP[13]=1, RESULT=14,
LOOKUP[14]=1, RESULT=15,
LOOKUP[15]=1, RESULT=16,
LOOKUP[16]=1, RESULT=17,
LOOKUP[17]=1, RESULT=18,
INTERPOLATE=N, LIST=Y, LOOKUPI=10


; *** READ ZDATA1 RECORD

      WKSHA0=0
      WKSHA1=0
      WKSHA2=0
      NWSHA0=0
      NWSHA1=0

      NWSHA2=0
      SFPPDU=0.0
      MFPPDU=0.0
      HMPPDU=0.0


      WKA0=0.0
      WKA1=0.0
      WKA2=0.0
      WKTOT=0.0
      NWA0=0.0
      NWA1=0.0
      NWA2=0.0
      NWTOT=0.0

    TAZ      =ZI.1.TAZ
    SFAUTO[1]=ZI.1.SFAUTO1
    SFAUTO[2]=ZI.1.SFAUTO2
    SFAUTO[3]=ZI.1.SFAUTO3
    SFAUTO[4]=ZI.1.SFAUTO4
    MFAUTO[1]=ZI.1.MFAUTO1
    MFAUTO[2]=ZI.1.MFAUTO2
    MFAUTO[3]=ZI.1.MFAUTO3
    MFAUTO[4]=ZI.1.MFAUTO4
 

      XDUM=ZI.1.SFDU *(1.0- 0.01 * ZI.1.SFVAC1)

      IF(XDUM>0.0)
      SFPPDU= 1.0 * ZI.1.SFPOP / XDUM
      ELSE
      SFPPDU=0.0
      ENDIF

      XDUM=ZI.1.MFDU * (1.0- 0.01 * ZI.1.MFVAC1)
      IF(XDUM>0.0)
      MFPPDU=1.0 * ZI.1.MFPOP / XDUM
      ELSE
      MFPPDU=0.0
      ENDIF

      XDUM=ZI.1.HMDU * 0.01 * HMOCC
      IF(XDUM>0.0)
      HMPPDU=1.0 * ZI.1.HMPOP / XDUM
      ELSE
      HMPPDU=0.0
      ENDIF

      SFIDX=1
      MFIDX=1
      HMIDX=1

      LOOP XX=1,16
        IF(SFPPDU>DRANGE[XX]) SFIDX=XX+1
        IF(MFPPDU>DRANGE[XX]) MFIDX=XX+1
        IF(HMPPDU>DRANGE[XX]) HMIDX=XX+1
      ENDLOOP
 

      LOOP XX=1,5
            HMDUM[XX]= 1.0 * ZI.1.HMDU * 0.01 * HMOCC * DSHARE(HMIDX,XX)

            SFDUM1[XX]=0.01 * ZI.1.SFDU * (1.0-0.01*ZI.1.SFVAC2) * SFAUTO[1] * DSHARE(SFIDX,XX)
            SFDUM2[XX]=0.01 * ZI.1.SFDU * (1.0-0.01*ZI.1.SFVAC2) * SFAUTO[2] * DSHARE(SFIDX,XX)
            SFDUM3[XX]=0.01 * ZI.1.SFDU * (1.0-0.01*ZI.1.SFVAC2) * SFAUTO[3] * DSHARE(SFIDX,XX)
            SFDUM4[XX]=0.01 * ZI.1.SFDU * (1.0-0.01*ZI.1.SFVAC2) * SFAUTO[4] * DSHARE(SFIDX,XX)

            MFDUM1[XX]=0.01 * ZI.1.MFDU * (1.0-0.01*ZI.1.MFVAC2) * MFAUTO[1] * DSHARE(MFIDX,XX)
            MFDUM2[XX]=0.01 * ZI.1.MFDU * (1.0-0.01*ZI.1.MFVAC2) * MFAUTO[2] * DSHARE(MFIDX,XX)
            MFDUM3[XX]=0.01 * ZI.1.MFDU * (1.0-0.01*ZI.1.MFVAC2) * MFAUTO[3] * DSHARE(MFIDX,XX)
            MFDUM4[XX]=0.01 * ZI.1.MFDU * (1.0-0.01*ZI.1.MFVAC2) * MFAUTO[4] * DSHARE(MFIDX,XX)
      ENDLOOP

      LOOP ZZ=1,4
          HMTOT=0.0

          SFTOT[1]=0.0
          SFTOT[2]=0.0
          SFTOT[3]=0.0
          SFTOT[4]=0.0

          MFTOT[1]=0.0
          MFTOT[2]=0.0
          MFTOT[3]=0.0
          MFTOT[4]=0.0

        LOOP XX=1,5
            HMTRIP=RATES32(XX,ZZ) * HMDUM[XX]         ; HMTRIP=RATES(I,2,3,L) * HMDUM[I]
            HMTOT=HMTOT+HMTRIP
;            LOOP YY=1,4
            SFTRIP1=RATES11(XX,ZZ) * SFDUM1[XX]      ; SFTRIP=RATES[I,J,1,L] * SFDUM
            SFTRIP2=RATES12(XX,ZZ) * SFDUM2[XX]
            SFTRIP3=RATES13(XX,ZZ) * SFDUM3[XX]
            SFTRIP4=RATES14(XX,ZZ) * SFDUM4[XX]

            MFTRIP1=RATES21(XX,ZZ) * MFDUM1[XX]      ; MFTRIP=RATES[I,J,2,L] * MFDUM
            MFTRIP2=RATES22(XX,ZZ) * MFDUM2[XX]
            MFTRIP3=RATES23(XX,ZZ) * MFDUM3[XX]
            MFTRIP4=RATES24(XX,ZZ) * MFDUM4[XX]

            SFTOT[1]=SFTOT[1]+SFTRIP1
            SFTOT[2]=SFTOT[2]+SFTRIP2
            SFTOT[3]=SFTOT[3]+SFTRIP3
            SFTOT[4]=SFTOT[4]+SFTRIP4

            MFTOT[1]=MFTOT[1]+MFTRIP1
            MFTOT[2]=MFTOT[2]+MFTRIP2
            MFTOT[3]=MFTOT[3]+MFTRIP3
            MFTOT[4]=MFTOT[4]+MFTRIP4
;            ENDLOOP
        ENDLOOP

        IF(ZZ=1) 
          WKA0=SFTOT[1]+MFTOT[1]
          WKA1=SFTOT[2]+MFTOT[2]+HMTOT
          WKA2=SFTOT[3]+MFTOT[3]+SFTOT[4]+MFTOT[4]
          WKTOT=WKA0 + WKA1 + WKA2
        ELSE
          NWA0=NWA0+SFTOT[1]+MFTOT[1]
          NWA1=NWA1+SFTOT[2]+MFTOT[2]+HMTOT
          NWA2=NWA2+SFTOT[3]+MFTOT[3]+SFTOT[4]+MFTOT[4]
          NWTOT=NWA0 + NWA1 + NWA2
        ENDIF
      ENDLOOP


      IF(WKTOT<>0)
        WKSHA0=100.0 * WKA0 / WKTOT ;+ 0.5
        WKSHA1= 100.0 * WKA1 / WKTOT ;+ 0.5
        WKSHA2= 100.0 * WKA2 / WKTOT ;+ 0.5
        WKSHT=WKSHA0 + WKSHA1 + WKSHA2
        IF(WKSHT<>100)
          IF(WKSHA0>WKSHA1)
            IF(WKSHA0>WKSHA2)
              WKSHA0=WKSHA0+100-WKSHT
            ELSE
              WKSHA2=WKSHA2+100-WKSHT
            ENDIF
          ELSE
            IF(WKSHA1>WKSHA2)
              WKSHA1=WKSHA1+100-WKSHT
            ELSE
              WKSHA2=WKSHA2+100-WKSHT
            ENDIF
          ENDIF
        ENDIF
      ENDIF
      IF(NWTOT<>0)
        NWSHA0=100.0 * NWA0 / NWTOT ;+ 0.5
        NWSHA1=100.0 * NWA1 / NWTOT ;+ 0.5
        NWSHA2=100.0 * NWA2 / NWTOT ;+ 0.5
        NWSHT=NWSHA0+NWSHA1+NWSHA2
        IF(NWSHT<>100)
          IF(NWSHA0>NWSHA1)
            IF(NWSHA0>NWSHA2)
              NWSHA0=NWSHA0+100-NWSHT
            ELSE
              NWSHA2=NWSHA2+100-NWSHT
            ENDIF
          ELSE
            IF(NWSHA1>NWSHA2)
              NWSHA1=NWSHA1+100-NWSHT
            ELSE
              NWSHA2=NWSHA2+100-NWSHT
            ENDIF
          ENDIF
        ENDIF
      ENDIF

;
; *** READ ZDATA2 RECORD
;
     PKCOSTPK = ZI.2.PRK9HR
     PRCOST24 = ZI.2.PRK3HR

     TERMTIME = TERM[ZI.3.AT]
     CBD      = ZI.4.CBDZONES
     EXURB    = ZI.5.EXURBS

; Terminal Time
      TERM[1]=5
      TERM[2]=3
      TERM[3]=1
      TERM[4]=2
      TERM[5]=1


      WRITE RECO=1

; *** Determine percents by car ownership category
;
; ====================================================================
; NOTE: if categories of one car and two-plus car are zero,
;       the default is to set the percentage of zero car equal to 100%
; ====================================================================
;
      if (wksha0=0 && wksha1=0 && wksha2=0) WKSHA0=100
;
      if (nwsha0=0 && nwsha1=0 && nwsha2=0) NWSHA0=100

     AUTO0=ROUND(WKSHA0)/100
     AUTO1=ROUND(WKSHA1)/100
     AUTO2=ROUND(WKSHA2)/100
     IF ((AUTO0+AUTO1+AUTO2)<>1) AUTO2=(1-AUTO0-AUTO1)

     AUTO0MD=ROUND(NWSHA0)/100
     AUTO1MD=ROUND(NWSHA1)/100
     AUTO2MD=ROUND(NWSHA2)/100
     IF ((AUTO0MD+AUTO1MD+AUTO2MD)<>1) AUTO2MD=1-AUTO0MD-AUTO1MD

;
;
; WRITE OUT THE ZINCOMAM & ZINCOMMD FILES
;
;
      WRITE RECO=2
      WRITE RECO=3



DEFSHT=4.0   ; Default short walk is 4.0 minutes
DEFLNG=999.9 ; Default long walk is 999.9 minutes

JLOOP
;
; CALCULATE THE ACTUAL PERCENTS FOR LONG WALKS
;

      TAZ      = ZI.6.TAZ
      CODWLK = ZI.6.CODWLKAM/10
      CODWLKMD = ZI.6.CODWLKMD/10
      PSHORT = ZI.7.PCTWLK1/100
      ASHORT = ZI.7.PCTWLK2/100
      PLONG = (ZI.7.PCTWLK3 - ZI.7.PCTWLK1)/100
      ALONG = (ZI.7.PCTWLK4 - ZI.7.PCTWLK2)/100

      PSHORTMD = ZI.7.PCTWLK5/100
      ASHORTMD = ZI.7.PCTWLK6/100
      PLONGMD = (ZI.7.PCTWLK7 - ZI.7.PCTWLK5)/100
      ALONGMD = (ZI.7.PCTWLK8 - ZI.7.PCTWLK6)/100
;
      IF (PSHORT<1)
        PRDSHT = DEFSHT
        PRDLNG = ZI.6.CODWLKAM/10
      ELSE
        PRDSHT = ZI.6.CODWLKAM/10
        PRDLNG = DEFLNG
      ENDIF
; 
      IF (PSHORTMD<1)
        PRDSHTMD = DEFSHT
        PRDLNGMD = ZI.6.CODWLKMD/10
      ELSE
        PRDSHTMD = ZI.6.CODWLKMD/10
        PRDLNGMD = DEFLNG
      ENDIF
;
      IF (ASHORT<1)
        ATTSHT = DEFSHT
        ATTLNG = ZI.6.CODWLKAM/10
      ELSE
        ATTSHT = ZI.6.CODWLKAM/10
        ATTLNG = DEFLNG
      ENDIF
;
      IF (ASHORTMD<1)
        ATTSHTMD = DEFSHT
        ATTLNGMD = ZI.6.CODWLKMD/10
      ELSE
        ATTSHTMD = ZI.6.CODWLKMD/10
        ATTLNGMD = DEFLNG
      ENDIF

ENDJLOOP

WRITE RECO=4
WRITE RECO=5

ENDRUN
