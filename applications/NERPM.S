; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
; modified by DDM 9/2012
IF (SOFTWAREVERSION<60001)
  CLEARERROR CODE=0 RESUME=T
  PROMPT QUESTION='THIS MODEL REQUIRES CUBE VERSION 6.0.1 OR HIGHER',
  ANSWER='Please call the FDOT District One Model Coordinator'
  IF (RETURNCODE==2) EXIT
ENDIF

*del "{SCENARIO_DIR}\output\*.* "
*del "{CATALOG_DIR}\applications\*.prn "
*del "{CATALOG_DIR}\applications\*.bak "
*del "{CATALOG_DIR}\applications\*.txt "
*del "{CATALOG_DIR}\applications\*.log "
*del "{CATALOG_DIR}\applications\*.cmdstart "

*echo FSUMTS Model Run - {SCENARIO_FULLNAME}>"{SCENARIO_DIR}\output\runtime.prn"
*echo Input Directory {SCENARIO_DIR}\input >>"{SCENARIO_DIR}\output\runtime.prn"
*echo ================================================================>>"{SCENARIO_DIR}\output\runtime.prn"
*echo Begin Run >>"{SCENARIO_DIR}\output\runtime.prn"
*echo Date: %date% >>"{SCENARIO_DIR}\output\runtime.prn"
*echo Time: %time% >>"{SCENARIO_DIR}\output\runtime.prn"
*echo ================================================================>>"{SCENARIO_DIR}\output\runtime.prn"

; Open cluster nodes
IF ({USECLUSTER}=1)
*CLUSTER NERPM 1-2 START EXIT
ENDIF
; End of PILOT Script

DistributeMultiStep ProcessId='NERPM4Dist', ProcessNum=2
EndDistributeMultiStep
DistributeMultiStep ProcessId='NERPM4Dist', ProcessNum=3
EndDistributeMultiStep
; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
Wait4Files Files=NERPM4Dist2.script.end,NERPM4Dist3.script.end, CheckReturnCode=T,
  PrintFiles=MERGE, DelDistribFiles=T

; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\FTMAT00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\FTMAT00A.PRN" MSG='Interpolate Port Truck TTs derived from Statewide Model'
FILEI MATI[1] = "{CATALOG_DIR}\output_SWM\base_SWM\2005_Port_trk_od_N4.mat"
FILEI MATI[2] = "{CATALOG_DIR}\output_SWM\EC2030_SWM\2030_Port_trk_od_N4.mat"
FILEO MATO[1] = "{SCENARIO_DIR}\output\PORT_TRK_24H_{Year}.MAT",
 MO=11,1,2 NAME=PortTrk_N42_{year},PortTrk_SWM_base,PortTrk_SWM_Future

last_year=2030                  ;Statewide model's Future E+C scenario year
base_year=2005                  ;Statewide model's Base year
forc_year=2000+{Year}           ;NERPN42's Scenario year

YRDIFF=last_year-base_year      ;Diference of STW model's Base (2005) and Future (EC2030) years
@YRDIFF_F@=forc_year-base_year  ;Difference of NERPM50's Scenario and Statewide model's base year 


MW[1]=mi.1.1 ; base year matrix
MW[2]=mi.2.1 ; future year matrix

IF (YRDIFF<>0)
  MW[11]=(MW[2]-MW[1])/YRDIFF
ENDIF

MW[11]=MW[1]+@YRDIFF_F@*MW[11]

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\NTMAT00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\NTMAT00A.PRN" MSG='Prepares MVFACTORS.{YEAR}{ALT} for Lookup Function'
FILEO PRINTO[1] = "{Scenario_Dir}\output\MVFACTORS.CSV"
FILEI RECI = "{Scenario_Dir}\input\MVFACTORS.{YEAR}{ALT}"
;var=n,6-7,UF,18-24,CF,35-41,BPRLOS,53-59,BPREXP,71-77

FT=SUBSTR(RECI,6,2)
UF=SUBSTR(RECI,18,7)
CF=SUBSTR(RECI,35,7)               ;24_Hour Confac
BPRLOS=SUBSTR(RECI,53,7)
BPREXP=SUBSTR(RECI,71,7)

CF_AM=SUBSTR(RECI,92,7)            ;AM Peak (07:30-09:30) Period Confac
CF_MD=SUBSTR(RECI,112,7)           ;Mid-day (09:30-15:30) Period Confac
CF_PM=SUBSTR(RECI,132,7)           ;PM Peak (15:30-18:30) Period Confac
CF_NT=SUBSTR(RECI,152,7)           ;Overnight (18:30-07:00) Period Confac



PRINT CSV=T, LIST=FT,UF,CF,BPRLOS,BPREXP,CF_AM,CF_MD,CF_PM,CF_NT, PRINTO=1


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\NTMAT00H.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX MSG='Create SPDCAP Lookup'
FILEO PRINTO[2] = "{Scenario_Dir}\output\SPDCAP.ERR"
FILEO PRINTO[1] = "{Scenario_Dir}\output\SPDCAP.CSV"
FILEI RECI = "{Scenario_Dir}\input\SPDCAP.{YEAR}{ALT}"
ARRAY SPDLOOKUP=999999 CAPLOOKUP=999999
LAT=SUBSTR(RECI,1,2)
HAT=SUBSTR(RECI,3,2)
LFT=SUBSTR(RECI,5,2)
HFT=SUBSTR(RECI,7,2)
LLN=SUBSTR(RECI,9,2)
HLN=SUBSTR(RECI,11,2)
CAPFUNC=SUBSTR(RECI,13,1)
CAP=SUBSTR(RECI,14,5)
SPDFUNC=SUBSTR(RECI,19,1)
SPD=SUBSTR(RECI,20,4)
    LATVAL=VAL(LAT)
    HATVAL=VAL(HAT)
    LFTVAL=VAL(LFT)
    HFTVAL=VAL(HFT)
    LLNVAL=VAL(LLN)
    HLNVAL=VAL(HLN)
    CAPVAL=VAL(CAP)
    SPDVAL=VAL(SPD)
; PLACE INITIAL CAPACITIES & SPEEDS INTO AN ARRAY
IF (CAPFUNC=' ') 
    LOOP ATYPE=LATVAL,HATVAL
      LOOP FTYPE=LFTVAL,HFTVAL
        LOOP LANES=LLNVAL,HLNVAL
        INDEXVAL=ATYPE*10000+FTYPE*100+LANES
        CAPLOOKUP[INDEXVAL]=CAPVAL  
        ENDLOOP
      ENDLOOP
    ENDLOOP
ENDIF
IF (SPDFUNC=' ') 
    LOOP ATYPE=LATVAL,HATVAL
      LOOP FTYPE=LFTVAL,HFTVAL
        LOOP LANES=LLNVAL,HLNVAL
        INDEXVAL=ATYPE*10000+FTYPE*100+LANES
        SPDLOOKUP[INDEXVAL]=SPDVAL  
        ENDLOOP
      ENDLOOP
    ENDLOOP
ENDIF
;IF (CAPFUNC='*')
IF (CAPFUNC='*'|CAPFUNC='+'|CAPFUNC='-')
    LOOP ATYPE=LATVAL,HATVAL
      LOOP FTYPE=LFTVAL,HFTVAL
        LOOP LANES=LLNVAL,HLNVAL
        INDEXVAL=ATYPE*10000+FTYPE*100+LANES
;        CAPLOOKUP[INDEXVAL]=CAPLOOKUP[INDEXVAL]*CAPVAL
        IF (CAPFUNC='*') CAPLOOKUP[INDEXVAL]=CAPLOOKUP[INDEXVAL]*CAPVAL
        IF (CAPFUNC='+') CAPLOOKUP[INDEXVAL]=CAPLOOKUP[INDEXVAL]+CAPVAL
        IF (CAPFUNC='-') CAPLOOKUP[INDEXVAL]=CAPLOOKUP[INDEXVAL]-CAPVAL
        ENDLOOP
      ENDLOOP
    ENDLOOP
ENDIF
IF (SPDFUNC='*'|SPDFUNC='+'|SPDFUNC='-')
    LOOP ATYPE=LATVAL,HATVAL
      LOOP FTYPE=LFTVAL,HFTVAL
        LOOP LANES=LLNVAL,HLNVAL
        INDEXVAL=ATYPE*10000+FTYPE*100+LANES
        IF (SPDFUNC='*') SPDLOOKUP[INDEXVAL]=SPDLOOKUP[INDEXVAL]*SPDVAL
        IF (SPDFUNC='+') SPDLOOKUP[INDEXVAL]=SPDLOOKUP[INDEXVAL]+SPDVAL
        IF (SPDFUNC='-') SPDLOOKUP[INDEXVAL]=SPDLOOKUP[INDEXVAL]-SPDVAL
        ENDLOOP
      ENDLOOP
    ENDLOOP
ENDIF


IF (I=0)
  PRINT LIST='SPEED OR CAPACITY ERRORS WHERE THE SPDCAP RESULT IS LESS THAN ZERO', PRINTO=2
  LOOP IVAL=1,999999
     IF (CAPLOOKUP[IVAL]>0|SPDLOOKUP[IVAL]>0)   PRINT CSV=T, LIST=IVAL(6.0),CAPLOOKUP[IVAL],SPDLOOKUP[IVAL],PRINTO=1
     IF (CAPLOOKUP[IVAL]<0)   
        CAPERRCNT=CAPERRCNT+1
        PRINT CSV=T, LIST='SPDCAP ERROR FOR ATFTLN=',IVAL(6.0),'  CAPACITY=',CAPLOOKUP[IVAL](9.2),PRINTO=2
     ENDIF
     IF (SPDLOOKUP[IVAL]<0)
        SPDERRCNT=SPDERRCNT+1
        PRINT CSV=T, LIST='SPDCAP ERROR FOR ATFTLN=',IVAL(6.0),'     SPEED=',SPDLOOKUP[IVAL](9.2),PRINTO=2
     ENDIF
  ENDLOOP
  PRINT LIST='\n************Error Report Summary*************',
             '\nTOTAL LESS THAN ZERO CAPACITY ERRORS=',CAPERRCNT(8.0C),
             '\nTOTAL LESS THAN ZERO SPEED ERRORS   =',SPDERRCNT(8.0C), printo=2
ENDIF

ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\NTNET00L.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\NTNET00L.PRN" MSG='Process Highway Network'
FILEO LINKO = "{Scenario_Dir}\output\LINK4CNT.DBF",
 FORMAT=DBF, INCLUDE=A,B,NAME
FILEI LOOKUPI[2] = "{Scenario_Dir}\output\SPDCAP.CSV"
FILEI LOOKUPI[1] = "{Scenario_Dir}\output\MVFACTORS.CSV"
FILEI LINKI[3] = "{Scenario_Dir}\input\TOLLLINK.{YEAR}{ALT}",
 var=TOLL,beg=1,len=2,  
 var=TOLLTYPE,beg=3,len=2,
 var=A,beg=5,len=5, 
 var=B,beg=11,len=5, 
 var=PLAZADESC,beg=18,len=25,typ=a,
 var=PLZALNSMIN,beg=44,len=2,
 var=PLZALNSMAX,beg=47,len=2,
 var=CARTOLL,beg=50,len=5,
 var=SVCMINUTES,beg=56,len=1,
 var=SVCSECONDS,beg=58,len=2,
 var=DECELCODE,beg=61,len=1,
 var=ACCELCODE,beg=63,len=1,
 var=EXACTCHGLNS,beg=65,len=2,
 var=AVILANES,beg=68,len=2,
 var=PCTTRUCKS,beg=71,len=4,
START=(substr(record,4,1)=='1'),
STOP=(SUBSTR(RECORD,1,1)=='C')
FILEI LINKI[1] = "{CATALOG_DIR}\Parameters\MicroCodedHnet42.net"
FILEO NETO = "{Scenario_Dir}\output\TEMP.NET",
    INCLUDE=A,B,TOLL,TOLLTYPE,PLAZADESC,PLZALNSMIN,PLZALNSMAX,CARTOLL,SVCMINUTES,SVCSECONDS,DECELCODE,
           ACCELCODE,EXACTCHGLNS,AVILANES,PCTTRUCKS,DISTANCE,NAME,ALT_NAME,COFIPS,COUNTY,DISTRICT,
           SCREENLINE,PSCF_YR00,CNT_SRC_YR00,STN_ID_YR00,CONSTR_00A,ROADDIR,LEVEL,TMODE,TTIME,EECODE,TOLLID,
           IDLINK,COUNT_YR00,TCARD,TC,TV,VC,TWOWAY_{Year}{alt},DISTANCEFT,FACILITY_TYPE,AREA_TYPE,
           NUM_LANES,UROADFACTOR,CONFAC,BPRCOEFFICIENT,BPREXPONENT,CAPACITY,SPEED,TIME,TIME2,HOT,
           WALKTIME,TBSDIST,TBSTIME,TFGDIST,TFGTIME,TFGMODE,PNRTERMTIME,KNRTERMTIME,
           STN_ID,AADT_YR05,CNTYR,YRADJUST,COUNTDESC,CNTSRC_YR05,MOCF_YR05,PSCF_YR05,COUNT_YR05,COUNT,SELSPDADJ,AADT10

PAR  LIST_ERRS=0 MAX_IP_ERRS=10000
ARRAY _ATCNT=99,_FTCNT=99
LOOKUP, NAME=MVFACTORS, 
    LOOKUP[1]=1, RESULT=2,
    LOOKUP[2]=1, RESULT=3,
    LOOKUP[3]=1, RESULT=4,
    LOOKUP[4]=1, RESULT=5,
    LOOKUP[5]=1, RESULT=6,
    LOOKUP[6]=1, RESULT=7,
    LOOKUP[7]=1, RESULT=8,
    LOOKUP[8]=1, RESULT=9,
    INTERPOLATE=N, LOOKUPI=1
LOOKUP, NAME=SPDCAP, 
    LOOKUP[1]=1, RESULT=2,
    LOOKUP[2]=1, RESULT=3,
    INTERPOLATE=N, LOOKUPI=2

PROCESS PHASE=LINKMERGE
; if no distance in network, calculate one (in feet)
if (distance=0)  distance=sqrt((a.x-b.x)^2+(a.y-b.y)^2)
distanceft=distance
distance=distance/5280
DISTANCEFT=ROUND(DISTANCEFT) ; DISTANCE TO ONE FOOT IS SUFFICIENT 
FACILITY_TYPE=FTYPE_{YEAR}{ALT}
AREA_TYPE=ATYPE_{YEAR}{ALT}
NUM_LANES=LANES_{YEAR}{ALT}
IF (FACILITY_TYPE=0) DELETE
; PUT MVFACTORS ON NETWORK
  linkcnt=1
  UROADFACTOR=MVFACTORS(1,FACILITY_TYPE)
  CONFAC=MVFACTORS(2,FACILITY_TYPE)              ;24-Hour Confac
  BPRCOEFFICIENT=MVFACTORS(3,FACILITY_TYPE)
  BPREXPONENT=MVFACTORS(4,FACILITY_TYPE)
  CONFACAMP=MVFACTORS(5,FACILITY_TYPE)           ;AM Peak (07:30-09:30) Period Confac
  CONFACMDP=MVFACTORS(6,FACILITY_TYPE)           ;Mid-Day (09:30-15:30) Period Confac
  CONFACPMP=MVFACTORS(7,FACILITY_TYPE)           ;PM Peak (15:30-18:30) Period Confac
  CONFACNTP=MVFACTORS(8,FACILITY_TYPE)           ;Overnight (18:30-07:00) Period Confac

; PUT SPEEDS AND CAPACITIES ON NETWORK
  _INDEXVAL=10000*AREA_TYPE+100*FACILITY_TYPE+NUM_LANES
  CAPACITY=SPDCAP(1,_INDEXVAL)
;following code modified to make the model work with the new highway network
;COUNT=ROUND(COUNT_{VALYEAR}*PSCF_{VALYEAR})
;PSCF=PSCF_{VALYEAR}

;sks-IMP-Fix later on next two records
;PSCF1=val(PSCF)
;COUNT=ROUND(COUNT_{VALYEAR}*PSCF1)

;==================================================================================
;Save Year 2000 count as Count_YR00
Count_YR00=COUNT2000

;sks-count based on 2005 AADT
if (MOCF_YR05<>0)
   PSCF_YR05=(1.0/MOCF_YR05)
 else
  PSCF_YR05=1.0
endif
;Note on AADT_YR05: AADT_05 is directional 2005 AADT (ref. FDOT Traffic CDROM) for freeways and other directionally coded facilities.
;                 For nondirectional facilities, AADT_YR05 are total of two directions.
;YRADJUST attribute represents for few external station counts that are not for year 2005. For count year of 2005 YRADJUST is 1.0.
;COUNT_YR05 is directional 2005 counts

if (TWOWAY_05A=1)
  COUNT_YR05=AADT_YR05*YRADJUST*PSCF_YR05*0.5
 else
  COUNT_YR05=AADT_YR05*YRADJUST*PSCF_YR05
endif

;Pass Year 2005 count to "count" field
Count=COUNT_YR05


;================================================================================

 
  SPEED=SPDCAP(2,_INDEXVAL)

  IF (SPEED!=0)
    TIME=60*(DISTANCEFT/5280)/SPEED
    TIME2=60*(DISTANCEFT/5280)/SPEED
  ENDIF
 
;sks-11/3/08 (comment out round off action on TIME and TIME2)
;  TIME=ROUND(TIME*100)/100
;  TIME2=ROUND(TIME2*100)/100

  if (time<0.01) time=0.01
  if (time2<0.01) time2=0.01
; PUT WALKTIME ON NETWORK
  WALKTIME=ROUND(100*(DISTANCEFT/5280)/2.5*60)/100
  _ATCNT[AREA_TYPE]=_ATCNT[AREA_TYPE]+1
  _FTCNT[FACILITY_TYPE]=_FTCNT[FACILITY_TYPE]+1
ENDPROCESS

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\NTMAT00I.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX MSG='Counts Times Nodes Used by Links'
FILEO RECO[1] = "{Scenario_Dir}\output\NODECNT.DBF",
 FIELDS=N,TIMESUSED
FILEI RECI = "{Scenario_Dir}\output\LINK4CNT.DBF"

ARRAY NODECNT=999999

NODECNT[RI.A]=NODECNT[RI.A]+1
NODECNT[RI.B]=NODECNT[RI.B]+1
IF (RI.A>HINODE) HINODE=RI.A
IF (RI.B>HINODE) HINODE=RI.B

IF (I=0)

  LOOP RO.N=1,HINODE
    IF (NODECNT[RO.N]>0)
     RO.TIMESUSED=NODECNT[RO.N] 
     WRITE RECO=1
    ENDIF
  ENDLOOP

ENDIF

ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\NTNET00M.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\NTNET00M.PRN" MSG='Flags Toll Accel/Decel Nodes'
FILEI LINKI[1] = "{Scenario_Dir}\output\TEMP.NET"
FILEO PRINTO[1] = "{Scenario_Dir}\output\TEMPNODE.DAT"

;if (li.1.toll>0)  
if ((li.1.toll>0)&(li.1.tolltype=1))  ; Note: Tolltype 2 may not get any acceleration/decelration codes
  a_accel=0
;  a_decel=1 ; commented out for ORT
;  a_decel=0 ; added for ORT
  a_decel=1 

;  b_accel=1 ; commented out for ORT
;  b_accel=0 ; added for ORT
  b_accel=1 
  b_decel=0
  PRINT form=0, LIST=A,' ',a_accel,' ',a_decel,printo=1
  PRINT form=0, LIST='NODE= ',A,' ACCEL_NODE= ',a_accel,' DECEL_NODE= ',a_decel
  PRINT form=0, LIST=B,' ',b_accel,' ',b_decel,printo=1
  PRINT form=0, LIST='NODE= ',B,' ACCEL_NODE= ',b_accel,' DECEL_NODE= ',b_decel
endif



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\NTNET00N.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{Scenario_Dir}\output\HNET.PRN" MSG='Assigns Accel/Decel Attributes to Links'
FILEO PRINTO[3] = "{Scenario_Dir}\output\XY_{alt}{year}.DAT"
FILEI NODEI[3] = "{Scenario_Dir}\output\NODECNT.DBF"
FILEO PRINTO[2] = "{Scenario_Dir}\output\LINKS.{YEAR}{ALT}"
FILEO PRINTO[1] = "{Scenario_Dir}\output\NODES.CSV"
FILEI LOOKUPI[1] = "{Scenario_Dir}\input\TSPDS.CSV"
FILEO NETO = "{Scenario_Dir}\output\UNLOADEDpre.NET"
FILEI LINKI[1] = "{Scenario_Dir}\output\TEMP.NET"
FILEI NODEI[2] = "{Scenario_Dir}\output\TEMPNODE.DAT",
 VAR=N,_TOLL_ACC,_TOLL_DEC

PAR ZONES={ZONESA}


PROCESS  PHASE=INPUT, FILEI=LI.1
  TOLL_ACC=0
  TOLL_DEC=0
ENDPROCESS

PROCESS PHASE=NODEMERGE
   PRINT CSV=T, LIST=N(8.0),X,Y printo=1
   PRINT LIST=N(6.0),X(20.2),Y(20.2) printo=3
   IF (TIMESUSED=0) DELETE
ENDPROCESS

PROCESS PHASE=LINKMERGE   
  IF(B._TOLL_DEC=1) TOLL_DEC=1
  IF(A._TOLL_ACC=1) TOLL_ACC=1

_focus=1
_ft=int(facility_type/10)
_at=int(area_type/10)
print list=_focus(2.0),a(5.0),b(5.0),distance*100/5280(4.0),toll(2.0),_ft(1.0),_at(1.0), printo=2



;sks (5-11-2011) (Check CARTOLL NON-Zero but SVCSEC IS ZERO, then add a small/tiny SVCSEC)...

IF (CARTOLL>0 & SVCSECONDS=0) SVCSECONDS=0.00001
IF (CARTOLL>0 & PLZALNSMAX=0) PLZALNSMAX=NUM_LANES

ENDPROCESS



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\NTNET00T.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\NTNET00I.PRN" MSG='Incorporate few minor changes that was in RTS 2-hour peak period assignment'
FILEI LINKI[1] = "{Scenario_Dir}\output\UNLOADEDpre.NET"
FILEO NETO = "{Scenario_Dir}\output\UNLOADED.NET"

PROCESS PHASE=LINKMERGE

;sks-12/18/2008 - Incorporate few corridor level speed adjustment usin field (SELSPDADJ)
;                 This was done by comparing model initial speed with posted speed limit of FHD

 if (SELSPDADJ<>0)
  SPEED=SPEED+(SELSPDADJ)  ;Selected corridor level speed adjustment
 endif

;; adjust number of lanes on I-95 (based on Google Earth - AECOM / 09/07/2007)

;Corradino(8/21/08): Comment out the SB & NB I-95 lane modification after confirming that with the original input/master network.
;                    Note this script specific modification may not hold for future alternative scenarios.

;Start comment on I-95 lane modification:
/* 
; SB on I-95
if (A=34374 & B=74008) NUM_LANES=4
if (A=74008 & B=34569) NUM_LANES=4
if (A=34569 & B=34601) NUM_LANES=4
if (A=34601 & B=34658) NUM_LANES=4
if (A=34658 & B=74014) NUM_LANES=4
if (A=74014 & B=34767) NUM_LANES=4
if (A=34767 & B=35094) NUM_LANES=4
if (A=35094 & B=74034) NUM_LANES=5
if (A=74034 & B=35233) NUM_LANES=5
if (A=37006 & B=74146) NUM_LANES=3
if (A=74146 & B=74164) NUM_LANES=3
if (A=74164 & B=74174) NUM_LANES=3
if (A=74174 & B=37766) NUM_LANES=3
if (A=37766 & B=37880) NUM_LANES=3
if (A=37880 & B=74187) NUM_LANES=3
if (A=74187 & B=74197) NUM_LANES=3
if (A=74197 & B=38649) NUM_LANES=3
if (A=38649 & B=74238) NUM_LANES=3
if (A=74238 & B=74242) NUM_LANES=3
if (A=74242 & B=39041) NUM_LANES=3
if (A=39041 & B=39276) NUM_LANES=3
if (A=39276 & B=74256) NUM_LANES=3
if (A=74256 & B=39392) NUM_LANES=3
if (A=39392 & B=39406) NUM_LANES=3
if (A=39547 & B=39633) NUM_LANES=2    ;ramp at I-95/US1/US90
if (A=39633 & B=74303) NUM_LANES=2    ;ramp at I-95/US1/US90
if (A=74303 & B=74305) NUM_LANES=2    ;ramp at I-95/US1/US90
if (A=74305 & B=74841) NUM_LANES=2    ;ramp at I-95/US1/US90
if (A=74841 & B=40752) NUM_LANES=2    ;ramp at I-95/US1/US90
if (A=40752 & B=40781) NUM_LANES=4
if (A=40555 & B=40568) NUM_LANES=4
;NB on I-95
if (A=40777 & B=40627) NUM_LANES=2
if (A=40627 & B=74840) NUM_LANES=2
if (A=74840 & B=39513) NUM_LANES=2
if (A=39172 & B=74244) NUM_LANES=3
if (A=74244 & B=74234) NUM_LANES=3
if (A=74234 & B=38650) NUM_LANES=3
if (A=38650 & B=74189) NUM_LANES=3
if (A=74189 & B=74179) NUM_LANES=3
if (A=74179 & B=37866) NUM_LANES=3
if (A=37866 & B=37765) NUM_LANES=3
if (A=37765 & B=74172) NUM_LANES=3
if (A=74172 & B=74166) NUM_LANES=3
if (A=74166 & B=74148) NUM_LANES=3
if (A=74148 & B=37039) NUM_LANES=3
if (A=37039 & B=36950) NUM_LANES=3
if (A=35102 & B=34775) NUM_LANES=3   ;reduced from 4 lanes to 3
if (A=34775 & B=74016) NUM_LANES=3
if (A=74016 & B=34664) NUM_LANES=3
if (A=34664 & B=34607) NUM_LANES=3
if (A=34607 & B=34576) NUM_LANES=3
if (A=34576 & B=34420) NUM_LANES=4
if (A=34420 & B=34398) NUM_LANES=4
if (A=34398 & B=34370) NUM_LANES=4

*/ 
;End comment on I-95 lane modification:

; adjust speeds
 if (SPEED!=0)
  SPEED=(SPEED + 0.00001)  ; AECOMS global addition was 5 MPH
 else
  SPEED=0
 endif

;Start comment on AECOM's changes (since they were brought in SPDCAP and VFACTORS:
/* 

 if (FACILITY_TYPE=11-12 & AREA_TYPE=22-60 & AREA_TYPE<>35) SPEED=70 ;interstate outside the CBD, <>35 takes care of I-95 bridge
 if (FACILITY_TYPE=12 & AREA_TYPE=35) SPEED=65 ;takes care of I-295 bridges on StJohns
 if (FACILITY_TYPE=16 & AREA_TYPE=35 & NUM_LANES=3) SPEED=30 ;takes care of Acosta Bridge
 if (FACILITY_TYPE=16 & AREA_TYPE=35 & NUM_LANES<3) SPEED=45 ;takes care of Hart and Mathews Bridge
 if (FACILITY_TYPE=35 & AREA_TYPE=35) SPEED=55 ;takes care of Shands Bridge
; if (FACILITY_TYPE=21-24) SPEED=SPEED+10 ;divided arterials - this increases the speed by 15 overall
 if (FACILITY_TYPE=21) SPEED=60 ;divided arterials unsignalized
 if (FACILITY_TYPE=22) SPEED=45 ;divided arterials unsignalized
 if (FACILITY_TYPE=23 & AREA_TYPE=21-30) SPEED=45 ;divided arterials class 1a
 if (FACILITY_TYPE=23 & AREA_TYPE=31-40) SPEED=50 ;divided arterials class 1a
 if (FACILITY_TYPE=23 & AREA_TYPE=41-50) SPEED=40 ;divided arterials class 1a
 if (FACILITY_TYPE=24 & AREA_TYPE=21-30) SPEED=40 ;divided arterials class 1b
 if (FACILITY_TYPE=24 & AREA_TYPE=31-40) SPEED=45 ;divided arterials class 1b
 if (FACILITY_TYPE=24 & AREA_TYPE=41-50) SPEED=40 ;divided arterials class 1b
 if (FACILITY_TYPE=71-79) SPEED=SPEED+10 ;ramps - this increases the speed by 15 overall
 if (FACILITY_TYPE=29) SPEED=1 ;Mayport ferry

; adjust capacity
 if (FACILITY_TYPE=11-19) UROADFACTOR=0.95 ; freeways (changed from 0.9 to 0.95)
 if (FACILITY_TYPE=71-79) UROADFACTOR=1.00 ; ramps (changed from 0.9 to 1.00)
 if (FACILITY_TYPE=24 & AREA_TYPE=41-49) UROADFACTOR=1.00 ; Class 1b in OBD (take care of Orange Mall area)
 if (FACILITY_TYPE>=21 & FACILITY_TYPE<=29 & NUM_LANES>=3) CAPACITY=CAPACITY+200 
 if (FACILITY_TYPE>=11 & FACILITY_TYPE<=19 & NUM_LANES>=3) CAPACITY=CAPACITY+200 


*/ 
;End comment on AECOM's changes (since they were brought in SPDCAP and VFACTORS:

  IF (SPEED!=0)
    TIME=60*(DISTANCEFT/5280)/SPEED
    TIME2=60*(DISTANCEFT/5280)/SPEED
  ENDIF

; SECTION ADDED BY SKS following I-95 (SERPM65) Corridor Study Logic
; HOT= (any negative value) means that the link, for whatever reason, should not be in the network
; Thus it is deleted here.
; Possible reasons are that it has not yet been buit, or it is a ramp left over from HOV analysis, etc.
If(HOT <0) FACILITY_TYPE=69 ; in-active HOT links:MAKE TRANSIT ONLY - not available for highway, but buses are allowed.

;sks-11/3/08 (comment out round off action on TIME and TIME2)
;  TIME=ROUND(TIME*100)/100
;  TIME2=ROUND(TIME2*100)/100

  if (time<0.01) time=0.01
  if (time2<0.01) time2=0.01

ENDPROCESS

ENDRUN


; Script for program HIGHWAY in file "C:\NERPM43\APPLICATIONS\NTHWY00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=HIGHWAY PRNFILE="C:\NERPM43\APPLICATIONS\NTHWY00A.PRN" MSG='Build Skims and Terminal Time Matrix'
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI LOOKUPI[1] = "{Scenario_Dir}\input\TERMTIME.CSV"
FILEI TURNPENI = "{Scenario_Dir}\input\tcards_{Year}{alt}.pen"
FILEO MATO[1] = "{Scenario_Dir}\output\FHSKIMS.MAT",
 MO=1-9 NAME=Toll,Distance,Time,WtdTime,HOVToll,HOVDistance,HOVTime,HOVWtdTime,TerminalTime
FILEI NETI = "{Scenario_Dir}\output\UNLOADED.NET"

PAR ZONEMSG=100

; ARRAY TERMINAL TIMES INTO MEMORY
ARRAY ATYPE={ZONESA}
LOOKUP, NAME=TERMTIME, LOOKUP[1]=1, RESULT=2, INTERPOLATE=N, LOOKUPI=1
PROCESS PHASE=LINKREAD
   lw.distance=li.distanceft/5280; CONVERTS DISTANCES FROM NETWORK (FEET) TO MILES FOR SKIMS
   IF (LI.FACILITY_TYPE=80-89) ADDTOGROUP=1
   IF (LI.FACILITY_TYPE=49 | LI.FACILITY_TYPE=59 | LI.FACILITY_TYPE=69) ADDTOGROUP=9   ; AK-these are transit only links/fixed guideways
   IF (A<={ZONESA})  ; FLAGS LAST ENCOUNTERED LINK FOR TERMINAL TIME CALCULATION LATER
        ATYPE[A]=LI.AREA_TYPE
        PRINT LIST=A,LI.AREA_TYPE
   ENDIF
   LW.TIME=li.time+li.svcminutes+li.svcseconds/60+li.cartoll*{ctoll}*60
ENDPROCESS

PROCESS PHASE=ILOOP
   PATHLOAD PATH=LW.TIME, PENI=1,                                 ;LOV Skims - Sks (use Path LW.TIME) - earlier was on LI.TIME
      MW[1]=PATHTRACE(LI.CARTOLL), NOACCESS=999.99,dec=2,
      MW[2]=PATHTRACE(LW.DISTANCE), NOACCESS=999.99,dec=2,
      MW[3]=PATHTRACE(LI.TIME), NOACCESS=999.99,dec=3,
      MW[4]=PATHTRACE(LW.TIME), NOACCESS=999.99,dec=3,
      EXCLUDEGROUP=1,9

   PATHLOAD PATH=LW.TIME, PENI=1,                                ;HOV Skims - Sks (use Path LW.TIME) - earlier was on LI.TIME
      MW[5]=PATHTRACE(LI.CARTOLL), NOACCESS=999.99,dec=2,
      MW[6]=PATHTRACE(LW.DISTANCE), NOACCESS=999.99,dec=2,
      MW[7]=PATHTRACE(LI.TIME), NOACCESS=999.99,dec=3,
      MW[8]=PATHTRACE(LW.TIME), NOACCESS=999.99,dec=3,
      EXCLUDEGROUP=9
; intrazonal array
;(precede this comment with block comment to disable) DISABLE THE INTRAZONAL TO MIMIC TRANPLAN VALIDATION RESULTS
deno={AVEZONE}*2.0
loop _ww=1,8
  mw[_ww][i]=lowest(_ww,{AVEZONE})/deno
endloop
; set intrazonal array to zero for cost
mw[1][i]=0
mw[5][i]=0

;set intrazonal travel times at externals to very high numbers
jloop
  if (j>={ExtZnStrt} & i=j)
    mw[3][i]=999999
    mw[4][i]=999999
    mw[7][i]=999999
    mw[8][i]=999999
 ; else
  endif
endjloop
;finish set intrazonal travel times at externals to very high numbers

;(precede this comment with block comment to close disable) END DISABLE INTRAZONAL CALCULATIONS
; BUILD TERMINAL TIME MATRIX
JLOOP
    ATYPEI=ATYPE[I]
    ATYPEJ=ATYPE[J]
    TERMTI=TERMTIME(1,ATYPEI)
    TERMTJ=TERMTIME(1,ATYPEJ)
    MW[9]=TERMTI+TERMTJ
ENDJLOOP

ENDPROCESS

ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*echo Date: %date% >"{SCENARIO_DIR}\output\ModelRun_{alt}{year}.prn"
*echo Time: %time% >>"{SCENARIO_DIR}\output\ModelRun_{alt}{year}.prn"
*echo NERPM Model Run - {DESCR}>>"{SCENARIO_DIR}\output\ModelRun_{alt}{year}.prn"
*echo Input Directory {SCENARIO_DIR}\input\ >>"{SCENARIO_DIR}\output\ModelRun_{alt}{year}.prn"
*echo ======================================================================================>>"{SCENARIO_DIR}\output\ModelRun_{alt}{year}.prn"



; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\WARMSTART\GNMAT00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX MSG='store time and date'
FILEI RECI = "{SCENARIO_DIR}\output\ModelRun_{alt}{year}.prn"

zones={ZONESA}

s1=strpos('Date:',reci)
s2=strpos('Time:',reci)

; get the date and time
if (s1 > 0)
 rundate=substr(reci,s1,80)
 log prefix=date var=rundate
endif
if (s2 > 0) 
 runtime=substr(reci,s2,80)
 log prefix=time var=runtime
endif

ENDRUN


; Script for program GENERATION in file "C:\NERPM43\APPLICATIONS\WARMSTART\GNGEN00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=GENERATION PRNFILE="{SCENARIO_DIR}\output\GNGEN00A.PRN" MSG='Trip Generation'
FILEO PRINTO[3] = "{SCENARIO_DIR}\output\AO_ERRORS.PRN"
FILEI LOOKUPI[1] = "{CATALOG_DIR}\parameters\grates_cube.dbf"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\LUERRORS.PRN"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\GEN_SUM.PRN"
FILEO PAO[1] = "{SCENARIO_DIR}\output\PANDA_TEM.DBF",
 LIST=Z,P[1],P[2],P[3],P[4],P[5],P[6],P[7],P[8],P[9],P[10],P[11],P[12],
        A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],DBF=T
FILEI ZDATI[3] = "{SCENARIO_DIR}\input\EITRIPS_{Year}{alt}.DBF"
FILEI ZDATI[2] = "{SCENARIO_DIR}\input\SPGEN_{Year}{alt}.DBF"
FILEI ZDATI[1] = "{SCENARIO_DIR}\input\ZDATA_{Year}{alt}.DBF"

; ================================================================
; OVERALL PROGRAM CONTROLS
PARAMETERS ZONES={ZONESA}, ZONEMSG=100
ARRAY CAR=4 CELL=999 CELLT=999 SPFRAC=12
LOOKUP LOOKUPI=1,
       NAME=PRATE, ;TRIP PRODUCTION RATES
         LOOKUP[1]=PAD, RESULT=RATEHBW,
         LOOKUP[2]=PAD, RESULT=RATEHBSH,
         LOOKUP[3]=PAD, RESULT=RATEHBSR,
         LOOKUP[4]=PAD, RESULT=RATEHBO,
       FAIL[1]=0,FAIL[2]=0,FAIL[3]=0, INTERPOLATE=N

LOOKUP NAME=DUWEIGHT, 
       LOOKUP[1]=1, RESULT=2, ; %1 PERSON
       LOOKUP[2]=1, RESULT=3, ; %2 PERSON
       LOOKUP[3]=1, RESULT=4, ; %3 PERSON
       LOOKUP[4]=1, RESULT=5, ; %4 PERSON
       LOOKUP[5]=1, RESULT=6, ; %5+PERSON
       INTERPOLATE=N,
       R=
       '01 0.89 0.11 0.00 0.00 0.00',         
       '02 0.76 0.22 0.02 0.00 0.00',
       '03 0.59 0.34 0.05 0.01 0.01',
       '04 0.46 0.34 0.11 0.06 0.03',
       '05 0.33 0.38 0.17 0.09 0.03',
       '06 0.25 0.35 0.19 0.13 0.08',
       '07 0.22 0.33 0.19 0.16 0.10',
       '08 0.15 0.32 0.21 0.21 0.11',
       '09 0.13 0.34 0.18 0.16 0.19',
       '10 0.12 0.29 0.18 0.17 0.24',
       '11 0.08 0.24 0.20 0.20 0.28',
       '12 0.05 0.20 0.19 0.23 0.33',
       '13 0.04 0.16 0.17 0.24 0.39',
       '14 0.02 0.15 0.14 0.21 0.48',
       '15 0.01 0.15 0.13 0.17 0.54',
       '16 0.00 0.05 0.07 0.14 0.74',
       '17 0.00 0.00 0.02 0.05 0.93'



PROCESS PHASE=ILOOP 
; ================================================================
; This is the main program loop to calculate initial production
; and attraction values for each zone for each trip purpose
; ================================================================
LOOP HHTYPE=1,3 ; ESTABLISH VARIABLES FOR EACH HOUSEHOLD CLASS
   PRNTAZ=ZI.1.TAZ   ;add by SKS
   COUNTY=ZI.1.COUNTY ;add by sks
IF (HHTYPE=1) ; SINGLE-FAMILY
   UNITS=   ZI.1.SFDU
   VACRATE= ZI.1.SFSEAS;+ZI.1.SFVAC
   PERMVACRATE= ZI.1.SFVAC
   POP=     ZI.1.SFPOP
   CAR[1]=ZI.1.SF0CAR/100, CAR[2]=ZI.1.SF1CAR/100, CAR[3]=ZI.1.SF2CAR/100, CAR[4]=ZI.1.SF3CAR/100
ELSEIF (HHTYPE=2); MULTI-FAMILY
   UNITS=   ZI.1.MFDU
   VACRATE= ZI.1.MFSEAS;+ZI.1.MFVAC
   PERMVACRATE= ZI.1.MFVAC
   POP=     ZI.1.MFPOP
   CAR[1]=ZI.1.MF0CAR/100, CAR[2]=ZI.1.MF1CAR/100, CAR[3]=ZI.1.MF2CAR/100, CAR[4]=ZI.1.MF3CAR/100
ELSEIF (HHTYPE=3) ; HOTEL/MOTEL
   UNITS=   ZI.1.HMUNITS
   VACRATE= 100-ZI.1.HMPCTOCC
   PERMVACRATE= 100-ZI.1.HMPCTOCC
   POP=     ZI.1.HMPOP
   CAR[1]=0, CAR[2]=1.0, CAR[3]=0, CAR[4]=0
ENDIF

; ================================================================
; From here down, the same equations get applied to each
; household size, auto ownership and dwelling unit type.
; Since it is being run in the HHTYPE loop, the same equations
; will be applied and running totals by zone will be accumulated.
; ================================================================
VAC=UNITS*(VACRATE/100), OCC=UNITS-VAC, GENVAC=UNITS*(PERMVACRATE/100), GENOCC=UNITS-GENVAC

IF (HHTYPE<>3) TOCC=TOCC+OCC ;Keep track of total permenantly occupied DUs
TGOCC=TGOCC+GENOCC ;Keep track of total occupied DUs

IF (OCC>0) 
   POPDU=POP/OCC
ELSE
   POPDU=0
ENDIF

IF (POPDU<>0) PDUCNT=PDUCNT+1      ;Keep track of total zones with pop/du ratios
IF (POPDU<>0) PDUTOT=PDUTOT+POPDU  ;total pop/du ratios

IF (POPDU<=1.12) RANGE=1
IF (POPDU>1.12)  RANGE=2
IF (POPDU>1.37)  RANGE=3
IF (POPDU>1.62)  RANGE=4
IF (POPDU>1.87)  RANGE=5
IF (POPDU>2.12)  RANGE=6
IF (POPDU>2.37)  RANGE=7
IF (POPDU>2.62)  RANGE=8
IF (POPDU>2.87)  RANGE=9
IF (POPDU>3.12)  RANGE=10
IF (POPDU>3.37)  RANGE=11
IF (POPDU>3.62)  RANGE=12
IF (POPDU>3.87)  RANGE=13
IF (POPDU>4.12)  RANGE=14
IF (POPDU>4.37)  RANGE=15
IF (POPDU>4.62)  RANGE=16
IF (POPDU>5.99)  RANGE=17
;if (POPDU<1&OCC>0) PRINT LIST="POP/DU ERROR, HHTYPE=",HHTYPE(1.0)," Population=",POP(4.0C)," Occupied Units=",occ(4.0c), printo=2
if (POPDU<1&OCC>0) PRINT LIST="POP/DU ERROR: ", "TAZ=",PRNTAZ(4.0C)," HHTYPE=",HHTYPE(1.0)," Population=",POP(4.0C)," Occupied Units=",occ(4.0c), printo=2

  LOOP PR=1,5
   LOOP AU=1,4
         CL=100*PR+10*(AU-1)+HHTYPE
         CELL[CL]=GENOCC*DUWEIGHT(PR,RANGE)*CAR[AU]
         CELLT[CL]=CELLT[CL]+CELL[CL]
         LOOP PURP=1,4
            PRODRATE=PRATE(PURP,CL)
            
;            P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]
; add by sks

FacPCnty1=(1/(0.7604*1.186))
FacPCnty2=(1/(1.0097*1.186))
FacPCnty3=(1/(0.9251*1.186))
FacPCnty4=(1/(1.2500*1.186))
FacPCnty5=(1/(1.0198*1.186))
FacPCnty6=(1/(1.2500*1.186))

            IF (COUNTY=1)
                 if (PURP=1)
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty1*(1.277/1.5268)*(1/1.08)
                 else
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty1*(1/1.08)
                 endif 
             elseif (COUNTY=2)
                 if (PURP=1)
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty2*(1.277/0.8858)*(1/1.08)
                 else
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty2*(1/1.08)
                 endif
             elseif (COUNTY=3)
                 if (PURP=1)
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty3*(1.277/1.1482)*(1/1.08)
                 else
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty3*(1/1.08)
                 endif
             elseif (COUNTY=4)
                 if (PURP=1)
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty4*(1.277/0.8360)*(1/1.08)
                 else
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty4*(1/1.08)
                 endif
             elseif (COUNTY=5)
                 if (PURP=1)
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty5*(1.277/1.0600)*(1/1.08)
                 else
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty5*(1/1.08)
                 endif
             elseif (COUNTY=6)
                 if (PURP=1)
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty6*(1.277/1.1111)*(1/1.08)
                 else
                    P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*FacPcnty6*(1/1.08)
                 endif
             else
               P[PURP]=P[PURP]+PRATE(PURP,CL)*CELL[CL]*1.000*(1/1.08)
            endif

         ENDLOOP
   ENDLOOP
  ENDLOOP
ENDLOOP ; ON HHTYPE
; ================================================================

; Now process the trip purposes that are attraction-based
; ================================================================
TOTALDUS=ZI.1.SFDU+ZI.1.MFDU

DISTRICT=ZI.1.DISTRICT


; HBW
;A[1]=1.80*ZI.1.EMPTOT+0.50*TOTALDUS
;A[1]=1.80*ZI.1.EMPTOT    ; AECOM - modified 08/27/2007
;Regional Attraction Balance factor keys for four HB purposes were added by SKS(corradino) -10/2/08

;Adjust HBW attraction based on ratios of estimated HBW and CTPP estimates then adjust the other purposes
;   as dictated rural/urban nature (Note second factor of 1.111 is a CAP od 2 trips/emp)

 if (COUNTY=1)
   A[1]={AttrBalFac_HBW}*(1.80*(ZI.1.EMPMFG+ZI.1.EMPIND+ZI.1.EMPCOM+ZI.1.EMPSVC))*0.9524*(1/1.08)  ;Total adj factor 0.7367 & attr rate per emp=1.33
  elseif (COUNTY=2)
   A[1]={AttrBalFac_HBW}*(1.80*(ZI.1.EMPMFG+ZI.1.EMPIND+ZI.1.EMPCOM+ZI.1.EMPSVC))*1.0204*(1/1.08)  ;Total adj factor 0.7893 & attr rate per emp=1.42
  elseif (COUNTY=3)
   A[1]={AttrBalFac_HBW}*(1.80*(ZI.1.EMPMFG+ZI.1.EMPIND+ZI.1.EMPCOM+ZI.1.EMPSVC))*0.9346*(1/1.08)  ;Total adj factor 0.7229 & attr rate per emp=1.30
  elseif (COUNTY=4)
   A[1]={AttrBalFac_HBW}*(1.80*(ZI.1.EMPMFG+ZI.1.EMPIND+ZI.1.EMPCOM+ZI.1.EMPSVC))*0.9615*(1/1.08)  ;Total adj factor 0.7437 & attr rate per emp=1.34
  elseif (COUNTY=5)
   A[1]={AttrBalFac_HBW}*(1.80*(ZI.1.EMPMFG+ZI.1.EMPIND+ZI.1.EMPCOM+ZI.1.EMPSVC))*1.0000*(1/1.08)  ;Total adj factor 0.7735 & attr rate per emp=1.39
  elseif (COUNTY=6)
   A[1]={AttrBalFac_HBW}*(1.80*(ZI.1.EMPMFG+ZI.1.EMPIND+ZI.1.EMPCOM+ZI.1.EMPSVC))*1.0000*(1/1.08)  ;Total adj factor 0.7735 & attr rate per emp=1.39

  else
   A[1]={AttrBalFac_HBW}*(1.80*(ZI.1.EMPMFG+ZI.1.EMPIND+ZI.1.EMPCOM+ZI.1.EMPSVC))*1.0000*(1/1.08)   ;Total adj factor=unbalanced fac({AttrBalFac_HBW})
 endif

if (DISTRICT=11)  ;CBD Type Areas (65% of regular attraction rates for Purposes 3&5 and 50% for Purposes 2&4)
   ; HBSH
   A[2]={AttrBalFac_HBSH}*(6.10*ZI.1.EMPCOM)*0.50*(1/1.08)
   ; HBSR
   A[3]={AttrBalFac_HBSR}*(0.50*ZI.1.EMPCOM+0.50*ZI.1.EMPSVC+1.61*TOTALDUS)*0.65*(1/1.08)
   ; HBO
   A[4]={AttrBalFac_HBO}*(1.50*ZI.1.EMPCOM+1.50*ZI.1.EMPSVC+0.30*TOTALDUS+1.50*ZI.1.SCHENR)*0.50*(1/1.08)
   ; NHB
   A[5]=(3.54*ZI.1.EMPCOM+1.71*ZI.1.EMPSVC+0.30*TOTALDUS)*(1/1.186)*0.65*(1/1.08)
   P[5]=A[5]

elseif (DISTRICT=2-4,21,22,27,28,30-35)   ; Rural Type Areas (95% attraction of regular attraction rates for Purposes 2-5) 
   ; HBSH
   A[2]={AttrBalFac_HBSH}*(6.10*ZI.1.EMPCOM)*0.95*(1/1.08)
   ; HBSR
   A[3]={AttrBalFac_HBSR}*(0.50*ZI.1.EMPCOM+0.50*ZI.1.EMPSVC+1.61*TOTALDUS)*0.95*(1/1.08)
   ; HBO
   A[4]={AttrBalFac_HBO}*(1.50*ZI.1.EMPCOM+1.50*ZI.1.EMPSVC+0.30*TOTALDUS+1.50*ZI.1.SCHENR)*0.95*(1/1.08)
   ; NHB
   A[5]=(3.54*ZI.1.EMPCOM+1.71*ZI.1.EMPSVC+0.30*TOTALDUS)*(1/1.186)*0.95*(1/1.08)
   P[5]=A[5]
else                                     ; regular attraction rates for other districts
   ; HBSH
   A[2]={AttrBalFac_HBSH}*(6.10*ZI.1.EMPCOM)*1.00*(1/1.08)
   ; HBSR
   A[3]={AttrBalFac_HBSR}*(0.50*ZI.1.EMPCOM+0.50*ZI.1.EMPSVC+1.61*TOTALDUS)*1.00*(1/1.08)
   ; HBO
   A[4]={AttrBalFac_HBO}*(1.50*ZI.1.EMPCOM+1.50*ZI.1.EMPSVC+0.30*TOTALDUS+1.50*ZI.1.SCHENR)*1.00*(1/1.08)
   ; NHB
   A[5]=(3.54*ZI.1.EMPCOM+1.71*ZI.1.EMPSVC+0.30*TOTALDUS)*(1/1.186)*1.00*(1/1.08)
   P[5]=A[5]
endif

; 4 Tire truck
A[6]=0.47*ZI.1.EMPMFG+0.55*ZI.1.EMPIND+0.45*ZI.1.EMPCOM+0.22*ZI.1.EMPSVC+0.13*TOTALDUS
P[6]=A[6]
; Single-Unit truck
A[7]=0.12*ZI.1.EMPMFG+0.15*ZI.1.EMPIND+0.13*ZI.1.EMPCOM+0.04*ZI.1.EMPSVC+0.05*TOTALDUS
P[7]=A[7]
; Tractor-trailer
A[8]=0.05*ZI.1.EMPMFG+0.09*ZI.1.EMPIND+0.04*ZI.1.EMPCOM+0.01*ZI.1.EMPSVC+0.02*TOTALDUS
P[8]=A[8]
; .........................................................................
; For the next four purposes, 
; Attractions are a function of the total attractions to a zone.  
; Since totals aren't known until we finish the initial calculations,
; attractions for these purposes will be initially calculated in the
; ADJUST PHASE.
; .........................................................................
; SOV EI
P[9]=ZI.3.TRIPS*(ZI.3.LOVPCT/100)
; HOV EI
P[10]=ZI.3.TRIPS*(ZI.3.HOVPCT/100)
; LDTK EI
P[11]=ZI.3.TRIPS*(ZI.3.LDTPCT/100)
; HDTK EI
P[12]=ZI.3.TRIPS*(ZI.3.HDTPCT/100)

; ================================================================
; NOW PROCESS SPECIAL GENERATORS
; 
SPFRAC[1]=ZI.2.HBWP/100
SPFRAC[2]=ZI.2.HBSHP/100
SPFRAC[3]=ZI.2.HBSRP/100
SPFRAC[4]=ZI.2.HBOP/100
SPFRAC[5]=ZI.2.NHBP/100
SPFRAC[6]=ZI.2.TRK4P/100
SPFRAC[7]=ZI.2.TRKSUNITP/100
SPFRAC[8]=ZI.2.TRKCOMBOP/100
SPFRAC[9]=ZI.2.EILOVP/100
SPFRAC[10]=ZI.2.EIHOVP/100
SPFRAC[11]=ZI.2.EILDTP/100
SPFRAC[12]=ZI.2.EIHDTP/100

LOOP PRP=1,12
    IF (ZI.2.PROD='Y','y') 
       IF (ZI.2.FUNCTIONP='+') P[PRP]=P[PRP]+VALUEP*SPFRAC[PRP]
       IF (ZI.2.FUNCTIONP='-') P[PRP]=P[PRP]-VALUEP*SPFRAC[PRP]
    ENDIF
ENDLOOP

SPFRAC[1]=ZI.2.HBWA/100
SPFRAC[2]=ZI.2.HBSHA/100
SPFRAC[3]=ZI.2.HBSRA/100
SPFRAC[4]=ZI.2.HBOA/100
SPFRAC[5]=ZI.2.NHBA/100
SPFRAC[6]=ZI.2.TRK4A/100
SPFRAC[7]=ZI.2.TRKSUNITA/100
SPFRAC[8]=ZI.2.TRKCOMBOA/100
SPFRAC[9]=ZI.2.EILOVA/100
SPFRAC[10]=ZI.2.EIHOVA/100
SPFRAC[11]=ZI.2.EILDTA/100
SPFRAC[12]=ZI.2.EIHDTA/100

LOOP PRP=1,12
    IF (ZI.2.ATTR='Y','y') 
       IF (ZI.2.FUNCTIONA='+') A[PRP]=A[PRP]+VALUEA*SPFRAC[PRP]
       IF (ZI.2.FUNCTIONA='-') A[PRP]=A[PRP]-VALUEA*SPFRAC[PRP]
    ENDIF
ENDLOOP

;********************************************************************************************************
;This portion of the script checks to see if any zones with populations are lacking values for percent
;automobile ownership.  If so, the model crashes and reports the problem zones so that the user can correct
;the problem.  All zones with populations should have values for percent automobile ownership or the model
;will not generate Home-Based trips for those zones.

IF (I=1)  
  PRINT LIST='\nAUTO OWNERSHIP ERRORS WHERE POPULATION EXISTS BUT AUTO OWNERSHIP DOES NOT', PRINTO=3
  PRINT LIST='\nCHECK LISTED ZONES IN ZDATA_{Year}{alt} FILES FOR AUTO OWNERSHIP PERCENTAGES!!!', PRINTO=3
  PRINT LIST='\n', PRINTO=3
  SFAOERROR=0
  MFAOERROR=0
ENDIF
     SFAO=zi.1.SF0CAR+zi.1.SF1CAR+zi.1.SF2CAR+zi.1.SF3CAR
     MFAO=zi.1.MF0CAR+zi.1.MF1CAR+zi.1.MF2CAR+zi.1.MF3CAR

     IF ((zi.1.SFPOP<>0 & SFAO=0)|(zi.1.MFPOP<>0 & MFAO=0))
        PRINT LIST='\n', PRINTO=3 
     ENDIF   

     IF (zi.1.SFPOP<>0 & SFAO=0) 
        SFAOERROR=SFAOERROR+1
        PRINT LIST='\nAUTO OWNERSHIP = 0 BUT SF POPULATION > 0 ERROR FOR ZONE=',I(5.0),PRINTO=3
     ELSE
     ENDIF
     IF (zi.1.MFPOP<>0 & MFAO=0)
        MFAOERROR=MFAOERROR+1
        PRINT LIST='\nAUTO OWNERSHIP = 0 BUT MF POPULATION > 0 ERROR FOR ZONE=',I(5.0),PRINTO=3
     ELSE
     ENDIF

IF (I={ZONESA})
  PRINT LIST='\n************Error Report Summary*************',
             '\nTOTAL AUTO OWNERSHIP ERRORS FOR SINGLE FAMILY=',SFAOERROR(8.0C),
             '\nTOTAL AUTO OWNERSHIP ERRORS FOR MULTI FAMILY= ',MFAOERROR(8.0C), printo=3

IF (SFAOERROR=0 & MFAOERROR=0)  PRINT LIST='\n',
                                '\nTHERE ARE NO AUTO OWNERSHIP = 0 BUT POPULATION > 0 ERRORS', PRINTO=3

  if (SFAOERROR>1) abort
  if (MFAOERROR>1) abort
ENDIF
 
;********************************************************************************************************

; ================================================================

ENDPROCESS

PROCESS PHASE=ADJUST

LOOP PURP=1,12
 IF (PURP=1) PRINT LIST="TRIP PRODUCTION AND ATTRACTION REPORT BY PURPOSE for All Counties:", PRINTO=1
 IF (PURP=1) PRINT LIST="================================================================= ", PRINTO=1

 PRINT LIST="  Purpose=",PURP(2.0),"  Productions=",P[PURP][0](12.0C)," Unbalanced Attractions=",A[PURP][0](12.0C), PRINTO=1
ENDLOOP

 PRINT LIST=" ", PRINTO=1
 
TOTSTDATTR=A[1][0]+A[2][0]+A[3][0]+A[4][0]+A[5][0]
A[9]=P[9][0]*(A[1]+A[2]+A[3]+A[4]+A[5])/TOTSTDATTR
A[10]=P[10][0]*(A[1]+A[2]+A[3]+A[4]+A[5])/TOTSTDATTR
A[11]=P[11][0]*(A[7]/A[7][0])
A[12]=P[12][0]*(A[8]/A[8][0])
BALANCE A2P=9-12
LOOP PURP=1,12
 PRINT LIST="  Purpose=",PURP(2.0),"  Productions=",P[PURP][0](12.0C),"   Balanced Attractions=",A[PURP][0](12.0C), PRINTO=1
ENDLOOP


  PTOTAL=P[1][0]+P[2][0]+P[3][0]+P[4][0]+P[5][0]+P[6][0]+P[7][0]+P[8][0]+P[9][0]+P[10][0]+P[11][0]+P[12][0]
  ATOTAL=A[1][0]+A[2][0]+A[3][0]+A[4][0]+A[5][0]+A[6][0]+A[7][0]+A[8][0]+A[9][0]+A[10][0]+A[11][0]+A[12][0]


PRINT LIST="  Total","       Productions=",PTOTAL(12.0C),"            Attractions=",ATOTAL(12.0C), PRINTO=1
PRINT LIST=" ", PRINTO=1

  POPTOT=ZI.1.SFPOP[0]+ZI.1.MFPOP[0]
  ALLPOP=POPTOT+ZI.1.HMPOP[0]
  PDUAVG=(POPTOT/TOCC) 
  ALPDAG=(ALLPOP/TGOCC)
  TOTSRV=ZI.1.EMPSVC[0]
  TOTCOM=ZI.1.EMPCOM[0]
  TOTMFG=ZI.1.EMPMFG[0]
  TOTIND=ZI.1.EMPIND[0]
;  TOTEMP=ZI.1.EMPTOT[0]   ; - modified AECOM 8/27/2007
  TOTEMP=(ZI.1.EMPMFG[0]+ZI.1.EMPIND[0]+ZI.1.EMPCOM[0]+ZI.1.EMPSVC[0])
  EMPPOP=TOTEMP/POPTOT
  SRVRTE=TOTSRV/TOTEMP
  COMRTE=TOTCOM/TOTEMP
  MFGRTE=TOTMFG/TOTEMP
  INDRTE=TOTIND/TOTEMP
  IITRIP=P[1][0]+P[2][0]+P[3][0]+P[4][0]+P[5][0]+P[6][0]+P[7][0]+P[8][0]
  ITPPRM=IITRIP/TOCC
  ITPTOC=IITRIP/TGOCC
  ITPEMP=IITRIP/TOTEMP
  HBWPEREMP=P[1][0]/TOTEMP

PRINT LIST="  Trip Generation Summary for All Counties:       ", PRINTO=1
PRINT LIST="  ========================================        ", PRINTO=1

PRINT LIST="  Permanent Population =                                  ",POPTOT(12.0C), PRINTO=1
PRINT LIST="  Total Population =                                      ",ALLPOP(12.0C), PRINTO=1
PRINT LIST="  Permanently Occupied Dwelling Units =                   ",TOCC(12.0C), PRINTO=1
PRINT LIST="  Transient and Permently Occupied Dwelling Units =       ",TGOCC(12.0C), PRINTO=1
PRINT LIST="  Total Service Employment =                              ",TOTSRV(12.0C), PRINTO=1
PRINT LIST="  Total Commercial Employment =                           ",TOTCOM(12.0C), PRINTO=1
PRINT LIST="  Total Manufacturing Employment =                        ",TOTMFG(12.0C), PRINTO=1
PRINT LIST="  Total Other Industrial Employment =                     ",TOTIND(12.0C), PRINTO=1
PRINT LIST="  Total Employment =                                      ",TOTEMP(12.0C), PRINTO=1
PRINT LIST="  HBW Trips per Employment =                                     ",HBWPEREMP(5.3C), PRINTO=1
PRINT LIST="  Permanent Population per Permenantly Occupied Dwelling Unit =  ",PDUAVG(5.2C), PRINTO=1
PRINT LIST="  Total Population per Total Occupied Dwelling Unit =            ",ALPDAG(5.3C), PRINTO=1
PRINT LIST="  Total Employment per Permanent Population =                    ",EMPPOP(5.3C), PRINTO=1
PRINT LIST="  Service to Total Employment =                                  ",SRVRTE(5.3C), PRINTO=1
PRINT LIST="  Commercial to Total Employment =                               ",COMRTE(5.3C), PRINTO=1
PRINT LIST="  Manufacturing to Total Employment =                            ",MFGRTE(5.3C), PRINTO=1
PRINT LIST="  Other Industrial to Total Employment =                         ",INDRTE(5.3C), PRINTO=1
PRINT LIST="  Internal Person Trips per Permanently Occupied Dwelling Unit = ",ITPPRM(5.3C), PRINTO=1
PRINT LIST="  Internal Person Trips per Total Occupied Dwelling Units =      ",ITPTOC(5.3C), PRINTO=1
PRINT LIST="  Internal Person Trips per Employee =                           ",ITPEMP(5.3C), PRINTO=1


ENDPROCESS


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\WARMSTART\GNMAT00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\GNMAT00A.PRN" MSG='Subarea Balancing of Attractions Rates'
FILEI RECI = "{SCENARIO_DIR}\output\PANDA_TEM.DBF"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\SUBAREABAL.CSV"
FILEO RECO[1] = "{SCENARIO_DIR}\output\PANDA.DBF",
FIELDS=Z,DISTRICT,HBWKP,HBWKA,HBSHP,HBSHA,HBSRP,HBSRA,HBOTP,HBOTA,NHBSP,NHBSA,
LTRKP,LTRKA,MTRKP,MTRKA,HTRKP,HTRKA,SOIEP,SOIEA,HOIEP,HOIEA,LDIEP,LDIEA,HDIEP,HDIEA

PAR ZONES={ZONESA}, ZONEMSG=100
;ARRAY P1=5,P2=5,P3=5,P4=5,P5=5,P6=5,P7=5,P8=5,P9=5,P10=5,P11=5,P12=5,
; A1=5,A2=5,A3=5,A4=5,A5=5,A6=5,A7=5,A8=5,A9=5,A10=5,A11=5,A12=5, DSTS={ZONESA}
ARRAY P1=8,P2=8,P3=8,P4=8,P5=8,P6=8,P7=8,P8=8,P9=8,P10=8,P11=8,P12=8,
 A1=8,A2=8,A3=8,A4=8,A5=8,A6=8,A7=8,A8=8,A9=8,A10=8,A11=8,A12=8, DSTS={ZONESA}


READ,
 FILE = "{CATALOG_DIR}\PARAMETERS\ATTRDIST.SYN"
RO.DISTRICT=DST
DSTS[RI.Z]=RO.DISTRICT
RO.HBWKP=RI.P1
RO.HBWKA=RI.A1
RO.HBSHP=RI.P2
RO.HBSHA=RI.A2
RO.HBSRP=RI.P3
RO.HBSRA=RI.A3
RO.HBOTP=RI.P4
RO.HBOTA=RI.A4
RO.NHBSP=RI.P5
RO.NHBSA=RI.A5
RO.LTRKP=RI.P6
RO.LTRKA=RI.A6
RO.MTRKP=RI.P7
RO.MTRKA=RI.A7
RO.HTRKP=RI.P8
RO.HTRKA=RI.A8
RO.SOIEP=RI.P9
RO.SOIEA=RI.A9
RO.HOIEP=RI.P10
RO.HOIEA=RI.A10
RO.LDIEP=RI.P11
RO.LDIEA=RI.A11
RO.HDIEP=RI.P12
RO.HDIEA=RI.A12
  WRITE RECO=1


; CREATE DISTRICT TOTALS OF PRODUCTIONS AND ATTRACTIONS TO APPLY AS FACTORS LATER
; (creates sub-area balancing of attractions
P1[RO.DISTRICT]=P1[RO.DISTRICT]+RO.HBWKP, A1[RO.DISTRICT]=A1[RO.DISTRICT]+RO.HBWKA
P2[RO.DISTRICT]=P2[RO.DISTRICT]+RO.HBSHP, A2[RO.DISTRICT]=A2[RO.DISTRICT]+RO.HBSHA
P3[RO.DISTRICT]=P3[RO.DISTRICT]+RO.HBSRP, A3[RO.DISTRICT]=A3[RO.DISTRICT]+RO.HBSRA
P4[RO.DISTRICT]=P4[RO.DISTRICT]+RO.HBOTP, A4[RO.DISTRICT]=A4[RO.DISTRICT]+RO.HBOTA
P5[RO.DISTRICT]=P5[RO.DISTRICT]+RO.NHBSP, A5[RO.DISTRICT]=A5[RO.DISTRICT]+RO.NHBSA
P6[RO.DISTRICT]=P6[RO.DISTRICT]+RO.LTRKP, A6[RO.DISTRICT]=A6[RO.DISTRICT]+RO.LTRKA
P7[RO.DISTRICT]=P7[RO.DISTRICT]+RO.MTRKP, A7[RO.DISTRICT]=A7[RO.DISTRICT]+RO.MTRKA
P8[RO.DISTRICT]=P8[RO.DISTRICT]+RO.HTRKP, A8[RO.DISTRICT]=A8[RO.DISTRICT]+RO.HTRKA
P9[RO.DISTRICT]=P9[RO.DISTRICT]+RO.SOIEP, A9[RO.DISTRICT]=A9[RO.DISTRICT]+RO.SOIEA
P10[RO.DISTRICT]=P10[RO.DISTRICT]+RO.HOIEP, A10[RO.DISTRICT]=A10[RO.DISTRICT]+RO.HOIEA
P11[RO.DISTRICT]=P11[RO.DISTRICT]+RO.LDIEP, A11[RO.DISTRICT]=A11[RO.DISTRICT]+RO.LDIEA
P12[RO.DISTRICT]=P12[RO.DISTRICT]+RO.HDIEP, A12[RO.DISTRICT]=A12[RO.DISTRICT]+RO.HDIEA
DST=RO.DISTRICT

;SKS-Override P's and A's total for Dummy districts for subarea balancing factors t=8, see ATTRDIST.SYN file in parameters folder)
if (DST=8)
   P1[8]=1.0
   A1[8]=1.0
   P2[8]=1.0
   A2[8]=1.0
   P3[8]=1.0
   A3[8]=1.0
   P4[8]=1.0
   A4[8]=1.0
   P5[8]=1.0
   A5[8]=1.0
   P6[8]=1.0
   A6[8]=1.0
   P7[8]=1.0
   A7[8]=1.0
   P8[8]=1.0
   A8[8]=1.0
   P9[8]=1.0
   A9[8]=1.0
   P10[8]=1.0
   A10[8]=1.0
   P11[8]=1.0
   A11[8]=1.0
   P12[8]=1.0
   A12[8]=1.0
endif  

; PUT IN TO MORE OR LESS REPRODUCE Sub-area Balancing
IF (RI.Z={ZONESA})
   LOOP WW=1,{ZONESA}
   RO.DISTRICT=DSTS[WW]
   if(RO.DISTRICT<>1)
      PRINT CSV=T, LIST=WW(6.0),RO.DISTRICT(3.0),
                P1[RO.DISTRICT]/A1[RO.DISTRICT](12.8),
                P2[RO.DISTRICT]/A2[RO.DISTRICT](12.8),
                P3[RO.DISTRICT]/A3[RO.DISTRICT](12.8),
                P4[RO.DISTRICT]/A4[RO.DISTRICT](12.8),
                P5[RO.DISTRICT]/A5[RO.DISTRICT](12.8),
                P6[RO.DISTRICT]/A6[RO.DISTRICT](12.8),
                P7[RO.DISTRICT]/A7[RO.DISTRICT](12.8),
                P8[RO.DISTRICT]/A8[RO.DISTRICT](12.8),
                P9[RO.DISTRICT]/A9[RO.DISTRICT](12.8),
                P10[RO.DISTRICT]/A10[RO.DISTRICT](12.8),
                P11[RO.DISTRICT]/A11[RO.DISTRICT](12.8),
                P12[RO.DISTRICT]/A12[RO.DISTRICT](12.8), PRINTO=1
    else
       PRINT CSV=T, LIST=WW(6.0),RO.DISTRICT(3.0),
                P1[RO.DISTRICT]/A1[RO.DISTRICT](12.8),
                P2[RO.DISTRICT]/A2[RO.DISTRICT](12.8),
                P3[RO.DISTRICT]/A3[RO.DISTRICT](12.8),
                P4[RO.DISTRICT]/A4[RO.DISTRICT](12.8),
                P5[RO.DISTRICT]/A5[RO.DISTRICT](12.8),
                P6[RO.DISTRICT]/A6[RO.DISTRICT](12.8),
                P7[RO.DISTRICT]/A7[RO.DISTRICT](12.8),
                P8[RO.DISTRICT]/A8[RO.DISTRICT](12.8),
      (P9[1]+P9[2]+P9[3]+P9[4]+P9[5]+P9[6]+P9[7])/(A9[1]+A9[2]+A9[3]+A9[4]+A9[5]+A9[6]+A9[7])(12.8),
      (P10[1]+P10[2]+P10[3]+P10[4]+P10[5]+P10[6]+P10[7])/(A10[1]+A10[2]+A10[3]+A10[4]+A10[5]+A10[6]+A10[7])(12.8),
      (P11[1]+P11[2]+P11[3]+P11[4]+P11[5]+P11[6]+P11[7])/(A11[1]+A11[2]+A11[3]+A11[4]+A11[5]+A11[6]+A11[7])(12.8),
      (P12[1]+P12[2]+P12[3]+P12[4]+P12[5]+P12[6]+P12[7])/(A12[1]+A12[2]+A12[3]+A12[4]+A12[5]+A12[6]+A12[7])(12.8), PRINTO=1
    endif
    ENDLOOP

ENDIF
ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\WARMSTART\GNMAT00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\EXT.PRN" MSG='Create FSUTMS.CTL and EE Matrix'
FILEI MATI[5] = "{SCENARIO_DIR}\input\EXTAOFAC.DBF",
 PATTERN=IJ:V, FIELDS=ORZ,DSZ,FACTORHTK
FILEI MATI[4] = "{SCENARIO_DIR}\input\EXTAOFAC.DBF",
 PATTERN=IJ:V, FIELDS=ORZ,DSZ,FACTORLTK
FILEI MATI[3] = "{SCENARIO_DIR}\input\EXTAOFAC.DBF",
 PATTERN=IJ:V, FIELDS=ORZ,DSZ,FACTORHOV
FILEI MATI[2] = "{SCENARIO_DIR}\input\EXTAOFAC.DBF",
 PATTERN=IJ:V, FIELDS=ORZ,DSZ,FACTORSOV
FILEI MATI[1] = "{SCENARIO_DIR}\input\EETRIPS.DBF",
 PATTERN=IJ:V, FIELDS=ORZ,DSZ,TRIPS
FILEO MATO[1] = "{SCENARIO_DIR}\output\EETRIPS.MAT",
 MO=1-5, NAME=EESOV,EEHOV,EELIGHTTRUCK,EEHEAVYTRUCK,TOTAL DEC=5*S
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\FSUTMS.CTL"

PAR ZONES={ZONESA} ZONEMSG=100

IF (I>={ExtZnStrt})
   MW[1]=MI.1.1*MI.2.1
   MW[2]=MI.1.1*MI.3.1
   MW[3]=MI.1.1*MI.4.1
   MW[4]=MI.1.1*MI.5.1
   MW[5]=MI.1.1
ENDIF

IF (I=1)
PRINT LIST="~SELECT","\n3","\n~FILEIN","\n{YEAR}{Alt}","\n~FILEOUT","\n{Alt}{YEAR}","\n~{descr}",
      "\ntest","\n~MODE","\nHIGHWAY","\n~MODULE","\nEXT       1 RANGE","\nHEVAL     8 RANGE",
      PRINTO=1
ENDIF



ENDRUN


; Script for program DISTRIBUTION in file "C:\NERPM43\APPLICATIONS\WARMSTART\PADST00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=DISTRIBUTION PRNFILE="{SCENARIO_DIR}\output\PREDISTRIB.PRN" MSG='pre-distribution'

FILEO MATO[5] = "{SCENARIO_DIR}\output\TripsRuralCounties.MAT",
MO=71-82,NAME=HBW_Rural,HBSH_Rural,HBSR_Rural,HBO_Rural,NHB_Rural,
               LTRK_Rural,MTRK_Rural,HTRK_Rural,SOIE_Rural,HOIE_Rural,LDIE_Rural,HDIE_Rural dec=12*s

FILEO MATO[4] = "{SCENARIO_DIR}\output\VehHoursRuralCounties.MAT",
 MO=51-62,NAME=HBW_Rural,HBSH_Rural,HBSR_Rural,HBO_Rural,NHB_Rural,
               LTRK_Rural,MTRK_Rural,HTRK_Rural,SOIE_Rural,HOIE_Rural,LDIE_Rural,HDIE_Rural dec=12*s

FILEO MATO[3] = "{SCENARIO_DIR}\output\VehHoursAllCounties.MAT",
 MO=31-42,NAME=HBW_All,HBSH_All,HBSR_All,HBO_All,NHB_All,
          LTRK_All,MTRK_All,HTRK_All,SOIE_All,HOIE_All,LDIE_All,HDIE_All dec=12*s

FILEI LOOKUPI[3] = "{CATALOG_DIR}\parameters\\FF_Rural.CSV"
FILEI MATI[1] = "{SCENARIO_DIR}\output\FHSKIMS.MAT"
FILEI LOOKUPI[2] = "{CATALOG_DIR}\parameters\SUBAREABAL.CSV"
FILEI ZDATI[1] = "{SCENARIO_DIR}\output\PANDA.DBF"

FILEO MATO[2] = "{SCENARIO_DIR}\output\VTRIP1.MAT",
 mo=6-12, name=LTRK,MTRK,HTRK,SOIE,HOIE,LDIE,HDIE, dec=7*s
FILEI LOOKUPI[1] = "{CATALOG_DIR}\parameters\FF.CSV"

FILEO MATO[1] = "{SCENARIO_DIR}\output\PTRIP1.MAT",
 MO=1-5,20,NAME=HBW,HBSH,HBSR,HBO,NHB,GMTIME dec=5*s

PAR MAXITERS={ATITER},MAXRMSE=2, ZONEMSG=100

    LOOKUP, LOOKUPI=1,
        INTERPOLATE=Y, NAME=FF,
        LOOKUP[1]=1,RESULT=2,
        LOOKUP[2]=1,RESULT=3,
        LOOKUP[3]=1,RESULT=4,
        LOOKUP[4]=1,RESULT=5,
        LOOKUP[5]=1,RESULT=6,
        LOOKUP[6]=1,RESULT=7,
        LOOKUP[7]=1,RESULT=8,
        LOOKUP[8]=1,RESULT=9,
        LOOKUP[9]=1,RESULT=10,
        LOOKUP[10]=1,RESULT=11,
        LOOKUP[11]=1,RESULT=12,
        LOOKUP[12]=1,RESULT=13

    LOOKUP, LOOKUPI=2,
        INTERPOLATE=N, NAME=ATRFAC,
        LOOKUP[1]=1,RESULT=3,
        LOOKUP[2]=1,RESULT=4,
        LOOKUP[3]=1,RESULT=5,
        LOOKUP[4]=1,RESULT=6,
        LOOKUP[5]=1,RESULT=7,
        LOOKUP[6]=1,RESULT=8,
        LOOKUP[7]=1,RESULT=9,
        LOOKUP[8]=1,RESULT=10,
        LOOKUP[9]=1,RESULT=11,
        LOOKUP[10]=1,RESULT=12,
        LOOKUP[11]=1,RESULT=13,
        LOOKUP[12]=1,RESULT=14

    LOOKUP, LOOKUPI=3,
        INTERPOLATE=Y, NAME=FFRural,
        LOOKUP[1]=1,RESULT=2,
        LOOKUP[2]=1,RESULT=3,
        LOOKUP[3]=1,RESULT=4,
        LOOKUP[4]=1,RESULT=5,
        LOOKUP[5]=1,RESULT=6,
        LOOKUP[6]=1,RESULT=7,
        LOOKUP[7]=1,RESULT=8,
        LOOKUP[8]=1,RESULT=9,
        LOOKUP[9]=1,RESULT=10,
        LOOKUP[10]=1,RESULT=11,
        LOOKUP[11]=1,RESULT=12,
        LOOKUP[12]=1,RESULT=13

;   ----- SETUP THE WORKING P'S AND A'S
;HBWKP,HBWKA,HBSHP,HBSHA,HBSRP,HBSRA,HBOTP,HBOTA,NHBSP,NHBSA,LTRKP,LTRKA,
;MTRKP,MTRKA,HTRKP,HTRKA,SOIEP,SOIEA,HOIEP,HOIEA,LDIEP,LDIEA,HDIEP,HDIEA

    SETPA P[1]=HBWKP  A[1]=HBWKA  *ATRFAC(1,I)  ;These factors are used for subarea balancing
    SETPA P[2]=HBSHP  A[2]=HBSHA  *ATRFAC(2,I)  ;and have been temporarily removed for
    SETPA P[3]=HBSRP  A[3]=HBSRA  *ATRFAC(3,I)  ;testing purposes.  Reintroduce these factors
    SETPA P[4]=HBOTP  A[4]=HBOTA  *ATRFAC(4,I)  ;if subarea balancing is still needed after
    SETPA P[5]=NHBSP  A[5]=NHBSA  *ATRFAC(5,I)  ;testing.
    SETPA P[6]=LTRKP  A[6]=LTRKA  *ATRFAC(6,I)
    SETPA P[7]=MTRKP  A[7]=MTRKA  *ATRFAC(7,I)
    SETPA P[8]=HTRKP  A[8]=HTRKA  *ATRFAC(8,I)
    SETPA P[9]=SOIEP  A[9]=SOIEA  *ATRFAC(9,I)
    SETPA P[10]=HOIEP A[10]=HOIEA *ATRFAC(10,I)
    SETPA P[11]=LDIEP A[11]=LDIEA *ATRFAC(11,I)
    SETPA P[12]=HDIEP A[12]=HDIEA *ATRFAC(12,I)

;   ----- DO 12 GRAVITY MODELS
;sks:    MW[20]=MI.1.TIME+MI.1.TERMINALTIME  
    MW[20]=MI.1.WtdTime+MI.1.TERMINALTIME      ; Include WtdTime in distribution, WtdTime includes toll time and cost


   MW[90]=MI.1.Distance ; Include also intrazonal distance to report trip length in miles


if (i=2401-2450 | i=2451-2549 | i=2554-2563 | i=2569-2575)             ;Baker & Putnam (Rural Co) Zones

    GRAVITY PURPOSE=1, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=2, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=3, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=4, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=5, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=6, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=7, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=8, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=9, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=10, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=11, LOS=MW[20], FFACTORS=FFRural
    GRAVITY PURPOSE=12, LOS=MW[20], FFACTORS=FFRural
else
    GRAVITY PURPOSE=1, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=2, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=3, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=4, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=5, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=6, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=7, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=8, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=9, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=10, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=11, LOS=MW[20], FFACTORS=FF
    GRAVITY PURPOSE=12, LOS=MW[20], FFACTORS=FF
endif

;All Counties (including Rural -Baker+Putnam- Counties) ...
;   ----- GENERATE FREQUENCY DISTRIBUTION REPORTS (Time in minutes)
FREQUENCY VALUEMW=1  BASEMW=20,  RANGE=1-100, TITLE='All Counties-HBW TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=2  BASEMW=20,  RANGE=1-100, TITLE='All Counties-HBSH TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=3  BASEMW=20,  RANGE=1-100, TITLE='All Counties-HBSR TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=4  BASEMW=20,  RANGE=1-100, TITLE='All Counties-HBO TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=5  BASEMW=20,  RANGE=1-100, TITLE='All Counties-NHB TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=6  BASEMW=20,  RANGE=1-100, TITLE='All Counties-LTRK TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=7  BASEMW=20,  RANGE=1-100, TITLE='All Counties-MTRK TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=8  BASEMW=20,  RANGE=1-100, TITLE='All Counties-HTRK TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=9  BASEMW=20,  RANGE=1-100, TITLE='All Counties-SOV IE TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=10  BASEMW=20,  RANGE=1-100, TITLE='All Counties-HOV IE TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=11  BASEMW=20,  RANGE=1-100, TITLE='All Counties-LD IE TRIP LENGTH FREQUENCY {descr}'
FREQUENCY VALUEMW=12  BASEMW=20,  RANGE=1-100, TITLE='All Counties-HD IE TRIP LENGTH FREQUENCY {descr}'
;added by SKS (10-30-2008)
;TLFD wrt DISTANCE (DOES NOT include Terminal and toll equivalency DISTANCE, BUT INCLUDES intrazonal distance)
FREQUENCY VALUEMW=1  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-HBW TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=2  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-HBSH TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=3  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-HBSR TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=4  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-HBO TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=5  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-NHB TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=6  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-LTRK TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=7  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-MTRK TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=8  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-HTRK TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=9  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-SOV IE TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=10  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-HOV IE TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=11  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-LD IE TRAVEL DISTANCE FREQUENCY {descr}'
FREQUENCY VALUEMW=12  BASEMW=90,  RANGE=0-100-2, TITLE='All Counties-HD IE TRAVEL DISTANCE FREQUENCY {descr}'


if (i=2401-2450 | i=2451-2549 | i=2554-2563 | i=2569-2575)             ;Baker & Putnam (Rural Co) Zones

   ;Rural (Baker & Putnam) Counties) ...
   ;   ----- GENERATE FREQUENCY DISTRIBUTION REPORTS (Time in minutes)
   FREQUENCY VALUEMW=1  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-HBW TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=2  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-HBSH TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=3  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-HBSR TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=4  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-HBO TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=5  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-NHB TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=6  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-LTRK TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=7  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-MTRK TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=8  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-HTRK TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=9  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-SOV IE TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=10  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-HOV IE TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=11  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-LD IE TRIP LENGTH FREQUENCY {descr}'
   FREQUENCY VALUEMW=12  BASEMW=20,  RANGE=1-100, TITLE='Rural Counties-HD IE TRIP LENGTH FREQUENCY {descr}'
   ;TLFD wrt DISTANCE (DOES NOT include Terminal and toll equivalency DISTANCE, BUT INCLUDES intrazonal distance)
   FREQUENCY VALUEMW=1  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-HBW TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=2  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-HBSH TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=3  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-HBSR TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=4  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-HBO TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=5  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-NHB TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=6  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-LTRK TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=7  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-MTRK TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=8  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-HTRK TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=9  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-SOV IE TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=10  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-HOV IE TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=11  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-LD IE TRAVEL DISTANCE FREQUENCY {descr}'
   FREQUENCY VALUEMW=12  BASEMW=90,  RANGE=0-100-2, TITLE='Rural Counties-HD IE TRAVEL DISTANCE FREQUENCY {descr}'

endif



;IF (ITERATION=1)
;  PRINT FORM=9.0, LIST=I,ZI.1.HBWKP[I],
;        FILE = "C:\FSUTMS\DISTRICT2\NERPM\CUBE\IPFME.ROW"
;  PRINT FORM=9.0, LIST=I,ZI.1.HBWKA[I],
;        FILE = "C:\FSUTMS\DISTRICT2\NERPM\CUBE\IPFME.COL"
;  JLOOP
;      PRINT FORM=9.0, LIST=I,J,MW[2],
;        FILE = "C:\FSUTMS\DISTRICT2\NERPM\CUBE\IPFME.SED"
;  ENDJLOOP
;ENDIF

;Person/Vehicle Hours - All Counties
mw[31]=mw[1]*mw[20]/60
mw[32]=mw[2]*mw[20]/60
mw[33]=mw[3]*mw[20]/60
mw[34]=mw[4]*mw[20]/60
mw[35]=mw[5]*mw[20]/60
mw[36]=mw[6]*mw[20]/60
mw[37]=mw[7]*mw[20]/60
mw[38]=mw[8]*mw[20]/60
mw[39]=mw[9]*mw[20]/60
mw[40]=mw[10]*mw[20]/60
mw[41]=mw[11]*mw[20]/60
mw[42]=mw[12]*mw[20]/60

;Person/Vehicle Hours & Trips - Rural Counties
if (i=2401-2450 | i=2451-2549 | i=2554-2563 | i=2569-2575)             ;Baker & Putnam (Rural Co) Zones
   mw[51]=mw[1]*mw[20]/60
   mw[52]=mw[2]*mw[20]/60
   mw[53]=mw[3]*mw[20]/60
   mw[54]=mw[4]*mw[20]/60
   mw[55]=mw[5]*mw[20]/60
   mw[56]=mw[6]*mw[20]/60
   mw[57]=mw[7]*mw[20]/60
   mw[58]=mw[8]*mw[20]/60
   mw[59]=mw[9]*mw[20]/60
   mw[60]=mw[10]*mw[20]/60
   mw[61]=mw[11]*mw[20]/60
   mw[62]=mw[12]*mw[20]/60

  MW[71]=MW[1]
  MW[72]=MW[2]
  MW[73]=MW[3]
  MW[74]=MW[4]
  MW[75]=MW[5]
  MW[76]=MW[6]
  MW[77]=MW[7]
  MW[78]=MW[8]
  MW[79]=MW[9]
  MW[80]=MW[10]
  MW[81]=MW[11]
  MW[82]=MW[12]

endif

;   ----- GET A COMPARISON REPORT ON LAST ITERATION
;REPORT ACOMP=1-12 ITERATIONS=99
ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\WARMSTART\PAMAT00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\WARMSTART\PAMAT00A.PRN" MSG='Separate trips by purpose and auto ownership'
FILEI MATI[3] = "{SCENARIO_DIR}\output\EETRIPS.MAT"
FILEI MATI[2] = "{SCENARIO_DIR}\output\VTRIP1.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\input\warmstart\PTRIPS_MC2.MAT"
FILEO MATO[1] = "{Scenario_Dir}\Output\PKPRELOAD1.MAT",
MO=1-15, NAME=AUTO1HBW,AUTO1HBNW,AUTO1NHB,AUTO1SOVIE,AUTO2HBW,AUTO2HBNW,AUTO2NHB,AUTO3HBW,AUTO3HBO,AUTO3NHB,EESO,IEHO,EEHO,IIIETK,EETK, DEC=15*S

zonemsg=100

MW[1]=MI.1.1
MW[2]=MI.1.5
MW[3]=MI.1.9
MW[4]=MI.2.4
MW[5]=MI.1.2
MW[6]=MI.1.6
MW[7]=MI.1.10
MW[8]=MI.1.3
MW[9]=MI.1.7
MW[10]=MI.1.11
MW[11]=MI.3.1
MW[12]=MI.2.5
MW[13]=MI.3.2
MW[14]=MI.2.1+MI.2.2+MI.2.3+MI.2.6+MI.2.7
MW[15]=MI.3.3+MI.3.4

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\WARMSTART\PAMAT00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{Scenario_Dir}\output\PAMAT00B.PRN" MSG='Use pk-hour factors to get the peak hour trip table'
FILEI MATI[2] = "{Scenario_Dir}\output\PORT_TRK_24H_{Year}.MAT"
FILEI MATI[1] = "{Scenario_Dir}\Output\PKPRELOAD1.MAT"
FILEO MATO[1] = "{SCENARIO_DIR}\output\PKPRELOAD.MAT",
 MO=1-8,NAME=SOV,CARPOOL,IEEITRK,EETRUCKS,EESOV,EEHOV,PRTTRK,TotAM2HR, DEC=8*S

PAR ZONEMSG=100

pahbwpkfac = 0.45299   ; 2000 HH survey
pahbnwpkfac= 0.25757   ; 2000 HH survey
panhbpkfac = 0.036640  ; 2000 HH survey
aphbwpkfac = 0.02367   ; 2000 HH survey
aphbnwpkfac= 0.03536   ; 2000 HH survey
apnhbpkfac = 0.036640  ; 2000 HH survey
iepkfac    = 0.1537    ; from FDOT_BC353_08rpt.pdf - Time of day modeling procedure in FSUTMS
eepkfac    = 0.136     ; from FDOT_BC353_08rpt.pdf - Time of day modeling procedure in FSUTMS
trkpkfac   = 0.20      ; from FDOT_BC353_08rpt.pdf - Time of day modeling procedure in FSUTMS
prttrkfac  = 0.05431*2


;SOV & SOVIE
MW[01]=(pahbwpkfac * MI.1.1 + aphbwpkfac * MI.1.1.T) * 0.5 +
       (pahbnwpkfac * MI.1.2 + aphbnwpkfac * MI.1.2.T) * 0.5 +
       (panhbpkfac * MI.1.3 + apnhbpkfac * MI.1.3.T) * 0.5 +
       (iepkfac * MI.1.4 + iepkfac * MI.1.4.T) * 0.5
;CARPOOL
MW[02]=(pahbwpkfac * MI.1.5 + aphbwpkfac * MI.1.5.T) * 0.5 /2 +
       (pahbnwpkfac * MI.1.6 + aphbnwpkfac * MI.1.6.T) * 0.5 /2 +
       (panhbpkfac * MI.1.7 + apnhbpkfac * MI.1.7.T) * 0.5 /2 +
       (pahbwpkfac * MI.1.8 + aphbwpkfac * MI.1.8.T) * 0.5 /{OC3VHBW} +
       (pahbnwpkfac * MI.1.9 + aphbnwpkfac * MI.1.9.T) * 0.5 /{OC3VHBNW} +
       (panhbpkfac * MI.1.10 + apnhbpkfac * MI.1.10.T) * 0.5 /{OC3VNHB} +
       (iepkfac * MI.1.12 + iepkfac * MI.1.12.T) * 0.5

;IE/EE TRUCK
MW[03]=(trkpkfac * MI.1.14 + trkpkfac * MI.1.14.T) * 0.5

;EETRUCKS
MW[04]=(trkpkfac * MI.1.15 + trkpkfac * MI.1.15.T) * 0.5
;EESOV
MW[05]=(eepkfac * MI.1.11 + eepkfac * MI.1.11.T) * 0.5
;EEHOV
MW[06]=(eepkfac * MI.1.13 + eepkfac * MI.1.13.T) * 0.5

;Jax Port Trucks
MW[07]=MI.2.1*prttrkfac

;Total Trips
MW[8]=MW[1]+MW[2]+MW[3]+MW[4]+MW[5]+MW[6]+MW[7]


ENDRUN


; Script for program HIGHWAY in file "C:\NERPM43\APPLICATIONS\WARMSTART\PAHWY00D.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=HIGHWAY PRNFILE="{SCENARIO_DIR}\output\PAHWY00F.PRN" MSG='Time of day - peak hour assignment'
FILEI NETI = "{SCENARIO_DIR}\output\UNLOADED.NET"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEO TURNVOLO[1] = "{SCENARIO_DIR}\output\turnvols.bin",
format=BIN
FILEI MATI[1] = "{SCENARIO_DIR}\output\PKPRELOAD.MAT"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\PAHWY00B.PRN"
FILEI TURNPENI = "{Scenario_Dir}\input\tcards_{Year}{alt}.pen"
FILEO NETO = "{SCENARIO_DIR}\output\PKPreLoad_tem.NET"


PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} RAAD=0.00000 AAD=0.000000 RMSE=0.000000 GAP=0.00025; RELATIVEGAP=0.001
;PAR ZONEMSG=100 COMBINE=EQUI MAXITERS={ITER} GAP=0.0005 RAAD=0.0000 AAD=0.00000 RMSE=0.000000
;PAR ZONEMSG=100 MAXITERS=7

TURNS N=40555,40265,40258,40241,40568

; look up deceleration rate based on approach speed
LOOKUP,
 INTERPOLATE=Y, LIST=Y, NAME=DECEL,
        LOOKUP[1]=1,RESULT=2,
R = '30 4',
    '70 6.2'

PROCESS PHASE=LINKREAD
  T0=li.TIME
;sks-Revised to 0.50 assuming more congestion in future years:  confacpk=0.582    ; using peak hour factor from HH survey - jeff
  confacpk=0.50
  LW.DISTANCE=LI.DISTANCEFT/5280
  LW.FFTIME=LI.TIME ; USE FOR PRELOAD PURPOSES (FFTIME)
  C=LI.CAPACITY*LI.NUM_LANES*LI.UROADFACTOR/confacpk

;Save 2-hour AM peak capacity
  CAPACITY_AMPK2H=C

 IF (li.FACILITY_TYPE=80-89) ADDTOGROUP=1 ; HOV FACILITIES
  IF (li.EECODE>0) ADDTOGROUP=2 ; EE PROHIBITED LINKS
;  IF (LI.{PATHGROUP}) ADDTOGROUP=7 ; DEFINE A SUBSET FOR PATHFILE
  IF (li.FACILITY_TYPE=49,59,69) ADDTOGROUP=9 ; TRANSIT ONLY FACILITIES
; classify links based on presence/absence of tolls
      LINKCLASS=1 ; no toll
      if (li.cartoll>0)
       LINKCLASS=2 ; with toll
       T0=({CTOLL}*LI.CARTOLL)*60 ; + LI.SVCMINUTES + LI.SVCSECONDS/60
/*
       if (iteration=0)
        LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFAC/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
        LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)             ; Plaza lane service time in minutes per vehicle
        LW.SERVR=(1/LW.SERVT)*60                              ; Plaza lane service rate in vehicle per hour
        PRINT LIST='ARRIVR= ',LW.ARRIVR
        PRINT LIST='SERVT= ',LW.SERVT
        PRINT LIST='SERVR= ',LW.SERVR
        if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR      ; prevent infinite or negative queue
       endif
*/
      endif
;sks- /*
      if (li.TOLL_ACC>0)
       LINKCLASS=3 ; Toll Plaza Acceleration link
       T0= T0 + (LI.SPEED/2.5)/60
      endif

      if (li.TOLL_DEC>0)
       LINKCLASS=4 ; Toll Plaza Deceleration link
       T0 = T0 + (LI.SPEED/DECEL(1,LI.SPEED))/60
      endif
;sks- */
ENDPROCESS

PROCESS PHASE=ILOOP

;Trip Tables=>>  T1=DA_IEII, T2:SR_IEII, T3: TRK_IEII, T4: TRK_EE, T5:DA_EE, T6:SR_EE, T7:PortTrk

if ({SELLINK}=1)  ;Select Zone/Link Analysis

    PATHLOAD PATH=TIME, PENI=1, VOL[1]=MI.1.1, VOL[3]=MI.1.3,  EXCLUDEGROUP=1,9,                       ;IE&II- SOV(1) & TRK(3) 
       MW[8]=MI.1.1, SELECTLINK=({SEL_LINK}), MW[10]=MI.1.3, SELECTLINK=({SEL_LINK}),
       VOL[8]=MW[8], VOL[10]=MW[10]                                                                    ;SEl_IE&II- SOV(8) & TRK(10)

    PATHLOAD PATH=TIME, PENI=1, VOL[2]=MI.1.2, EXCLUDEGROUP=9,                                         ;IE&II - HOV(2)
       MW[9]=MI.1.2, SELECTLINK=({SEL_LINK}),
       VOL[9]=MW[9]                                                                                    ;SEL_IE&II - HOV(9)

    PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[4]=MI.1.4, VOL[5]=MI.1.5, VOL[7]=MI.1.7, EXCLUDEGROUP=1-2,9,  ;EE -TRK(4) & SOV(5); JaxPrtTrk(7)
       MW[11]=MI.1.4, SELECTLINK=({SEL_LINK}), MW[12]=MI.1.5, SELECTLINK=({SEL_LINK}),
       MW[14]=MI.1.7, SELECTLINK=({SEL_LINK}),
       VOL[11]=MW[11], VOL[12]=MW[12], VOL[14]=MW[14]                                                  ;SEL_EE -TRK(11) & SOV(12); JaxPrtTrk(14)

   PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[6]=MI.1.6, EXCLUDEGROUP=2,9,                                   ;EE - HOV(6) 
       MW[13]=MI.1.6, SELECTLINK=({SEL_LINK}),
       VOL[13]=MW[13]                                                                                  ;SEL_EE - HOV(13)
else

  PATHLOAD PATH=TIME, PENI=1, VOL[1]=MI.1.1, VOL[3]=MI.1.3, EXCLUDEGROUP=1,9                       ;IE&II- SOV(1) & TRK(3)      
  PATHLOAD PATH=TIME, PENI=1, VOL[2]=MI.1.2, EXCLUDEGROUP=9                                        ;IE&II - HOV(2)
  PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[4]=MI.1.4, VOL[5]=MI.1.5, VOL[7]=MI.1.7, EXCLUDEGROUP=1-2,9 ;EE -TRK(4) & SOV (5); JaxportTrk(7)
  PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[6]=MI.1.6, EXCLUDEGROUP=2,9                                 ;EE - HOV(6)
 
endif

ENDPROCESS


PROCESS PHASE=ADJUST

if (time>0) LW.CGSTSPEED=(LW.DISTANCE/TIME)*60
/*
if (li.cartoll>0)
 LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFAC/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
 LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)             ; Plaza lane service time in minutes per vehicle
 LW.SERVR=(1/LW.SERVT)*60                              ; Plaza lane service rate in vehicle per hour
 if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR      ; prevent infinite or negative queue
PRINT LIST='ARRIVR= ',LW.ARRIVR
PRINT LIST='SERVT= ',LW.SERVT
PRINT LIST='SERVR= ',LW.SERVR
PRINT LIST='TOLLTIME= ',TIME
endif
*/
 FUNCTION   TC[1]=LI.TIME*(1+LI.BPRCOEFFICIENT*MIN((V/C),{VCMAX})^LI.BPREXPONENT) ; congested time for non-toll links
; FUNCTION   TC[2]=(1/(LW.SERVR-LW.ARRIVR))*60 + {CTOLL}*LI.CARTOLL*60 ; congested time for toll links
 FUNCTION   TC[2]={CTOLL}*LI.CARTOLL*60 ; congested time for toll links
 FUNCTION   TC[3]=LI.TIME*(1+LI.BPRCOEFFICIENT*MIN((V/C),{VCMAX})^LI.BPREXPONENT) + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links
 FUNCTION   TC[4]=LI.TIME*(1+LI.BPRCOEFFICIENT*MIN((V/C),{VCMAX})^LI.BPREXPONENT) + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 FUNCTION   V=VOL[1]+VOL[2]+VOL[3]+VOL[4]+VOL[5]+VOL[6]+VOL[7]
if (li.cartoll>0) print list="Iter:",iteration(2.0)," TOLLFM Summary, A=",A(6.0)," B=",B(6.0)," PLAZAID=",li.TOLL(3.0)," NAME=",li.PLAZADESC(24)," MAX LNS=",li.PLZALNSMAX," GCOST=",TIME(6.2),
        printo=1


ENDPROCESS

; Converge phase is new for Cube 4.0.
PHASE=CONVERGE
  IF (ITERATION < 6) BREAK; Do not even test for Iterations 2-5
  IF (GAP[ITERATION]<GAPCUTOFF & GAP[ITERATION-1]<GAPCUTOFF & GAP[ITERATION-2]<GAPCUTOFF)
;  IF (RGAP[ITERATION]<RGAPCUTOFF & RGAP[ITERATION-1]<RGAPCUTOFF & RGAP[ITERATION-2]<RGAPCUTOFF)
     BALANCE = 1
  ENDIF

ENDPROCESS


ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\WARMSTART\PANET00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\PANET00A.PRN" MSG='Adjust Extreme Congested Speed and Time of Peak Hour loaded network'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\PKPreLoad_tem.NET"
FILEO NETO = "{SCENARIO_DIR}\output\PKPreLoad.NET"

PROCESS PHASE=LINKMERGE

;===========================================================
;SKS-CAP Congested Speed to 2.5-75 mph and recalculate time_1 (congested time)
;Also if congested speed greater than initial speed (SPEED), then cap that to initial speed
;This changes will be required for unreasonable congested speeds for congested skims used in HBW final distribution;
;as well as to have proper transit connector speed. 

If (CSPD_1<2.5) CSPD_1=2.5
IF (CSPD_1>75.0) CSPD_1=75.0
if (!(facility_type=49,59,69))             ; exclude transit-only links
    IF (CSPD_1>SPEED) CSPD_1=SPEED
endif

time_1 = 60.0*DISTANCE/CSPD_1

;=======================================


ENDPROCESS

ENDRUN


; Script for program HIGHWAY in file "C:\NERPM43\APPLICATIONS\WARMSTART\PAHWY00F.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=HIGHWAY PRNFILE="C:\NERPM43\APPLICATIONS\WARMSTART\PAHWY00A3.PRN" MSG='Develops Preload Skims'
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI NETI = "{SCENARIO_DIR}\output\PKPreLoad.NET"
FILEI TURNPENI = "{SCENARIO_DIR}\input\tcards_{Year}{alt}.pen"
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\input\TERMTIME.CSV"
FILEO MATO[1] = "{SCENARIO_DIR}\output\PRELSKIMS.MAT",
 MO=1-9,DEC=9*2,NAME=Toll,Distance,Time,WtdTime,HOVToll,HOVDistance,HOVTime,HOVWtdTime,TerminalTime

PAR ZONEMSG=100

; ARRAY TERMINAL TIMES INTO MEMORY
ARRAY ATYPE={ZONESA}
LOOKUP NAME=TERMTIME, LOOKUP[1]=1, RESULT=2, INTERPOLATE=N, LOOKUPI=1
PROCESS PHASE=LINKREAD
  LW.TIME_1=ROUND(100*LI.TIME_1)/100
;sks - added toll time and cost to GM time
  LW.TIME=lw.time_1+li.svcminutes+li.svcseconds/60+li.cartoll*{ctoll}*60

   LW.DISTANCE=LI.DISTANCEFT/5280 ; CONVERTS NETWORK DISTANCES (FEET) TO MILES FOR SKIM TABLES
   IF (LI.FACILITY_TYPE=80-89) ADDTOGROUP=1
   IF (LI.FACILITY_TYPE=49 | LI.FACILITY_TYPE=59 | LI.FACILITY_TYPE=69) ADDTOGROUP=9
   IF (A<={ZONESA})  ; FLAGS LAST ENCOUNTERED LINK FOR TERMINAL TIME CALCULATION LATER
        ATYPE[A]=LI.AREA_TYPE
        PRINT LIST=A,LI.AREA_TYPE
   ENDIF
ENDPROCESS

PROCESS PHASE=ILOOP
   PATHLOAD PATH=LW.TIME, PENI=1,                                ;LOV Skims 
      MW[1]=PATHTRACE(LI.CARTOLL), NOACCESS=999.99,dec=2,
      MW[2]=PATHTRACE(LW.DISTANCE), NOACCESS=999.99,dec=2,
      MW[3]=PATHTRACE(LW.TIME_1), NOACCESS=999.99,dec=3,         ;sks: use congested time (LW.TIME_1), it was Li.TIME
      MW[4]=PATHTRACE(LW.TIME), NOACCESS=999.99,dec=3,
      EXCLUDEGROUP=1,9
   PATHLOAD PATH=LW.TIME, PENI=1,                                ;HOV Skims
      MW[5]=PATHTRACE(LI.CARTOLL), NOACCESS=999.99,dec=2,
      MW[6]=PATHTRACE(LW.DISTANCE), NOACCESS=999.99,dec=2,
      MW[7]=PATHTRACE(LW.TIME_1), NOACCESS=999.99,dec=3,         ;sks: use congested time (LW.TIME_1), it was Li.TIME
      MW[8]=PATHTRACE(LW.TIME), NOACCESS=999.99,dec=3,
      EXCLUDEGROUP=9
;(precede this comment with block comment to disable) intrazonal array
deno={AVEZONE}*2.0
loop _ww=1,8
  mw[_ww][i]=lowest(_ww,{AVEZONE})/deno
endloop
; set intrazonal array to zero for cost
mw[1][i]=0
mw[5][i]=0
;(precede this comment with block comment to close disable) END DISABLE INTRAZONAL CALCULATIONS

;sks: following set of high numbers were missed in earlier skims
;set intrazonal travel times at externals to very high numbers
jloop
  if (j>={ExtZnStrt} & i=j)
    mw[3][i]=999999
    mw[4][i]=999999
    mw[7][i]=999999
    mw[8][i]=999999
 ; else
  endif
endjloop
;finish set intrazonal travel times at externals to very high numbers

; BUILD TERMINAL TIME MATRIX
JLOOP
    ATYPEI=ATYPE[I]
    ATYPEJ=ATYPE[J]
    TERMTI=TERMTIME(1,ATYPEI)
    TERMTJ=TERMTIME(1,ATYPEJ)
    MW[9]=TERMTI+TERMTJ
ENDJLOOP

ENDPROCESS



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\WARMSTART\PNNET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\WARMSTART\PNNET00A.PRN" MSG='Remove Transit -Only links from loaded network hor Highway Evaluation'
FILEI LINKI[1] = "{Scenario_Dir}\output\PKPreLoad.NET"
FILEO NETO = "{SCENARIO_DIR}\output\PreAssignLOADED_HEVAL.NET"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

 
;Delete transit-Only non-highway links from loaded network
  IF(LI.1.Facility_Type=49,59,69) DELETE 

    

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY


ENDPHASE



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\WARMSTART\PNNET00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\WARMSTART\PreAssignXtabsmry.PRN" MSG='Prepare for HEVAL for All Area'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\PreAssignLOADED_HEVAL.NET"
FILEO PRINTO[2] = "{Scenario_Dir}\output\PreAssignPROFILE_NERPM4.TXT"
FILEO LINKO = "{Scenario_Dir}\output\PreAssignLinksCnt0.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,PK2HRCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

;if(LI.1.COUNTY<>6) delete       ;comment out for county specific evaluation & set county no (1=Nassau, 2=Duval,3=St Johns,
                                 ;                                                            4=Clay, 5=Baker, 6=Putnam)
;if(LI.1.FACILITY_TYPE=70-79,97-98) delete       ;comment out for RMSE without ramps                                                            4=Clay, 5=Baker, 6=Putnam)

;Delete dummy zone facility types (#29) since it will distort heval and/or crosstab stat with a speed of 1 MPH;
;Note: only valid 29 is (mayport bridge link (64273-64589 of DISTANCEFT=2010)
  IF(LI.1.Facility_Type=29) DELETE 



; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.TIME_1
   TOTAL_VOL=LI.1.V_1
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL

;sks-Revised to 0.50 assuming more congestion in future years:  confacpk=0.582    ; using peak hour factor from HH survey - jeff
  confacpk=0.50

   TWOWAY=li.1.TWOWAY_{Year}{alt}
  

   PK2HRCAP=li.1.CAPACITY*LNS/CONFACPK    ; Pre-assignment  2-hour AMpeak capacity
                                          
   SCRN=sl
   cnty=LI.1.COUNTY

;void count for this 2-hour evaluation
  count=0

;
; *****************************
;
; initialize arrays and variables
;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    


ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY
; a little loop to write out the Percent Root Mean Square Error

;----SKS (9/7/2008)---Write Profile for HEVAL-NERPM4-All Counties data 
; Preassignment Always run in Analysis mode.
;GTITLE=' - ALL SIX COUNTIES'

if ('{VALIDATE}' = 'NO')      ;Preassign HEVAL always in Analysis mode since no peak count
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nYES",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',"- PreAssignment HEVAL in Analysis Mode",                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif

if ('{VALIDATE}' = 'YES')     ;Preassign HEVAL always in Analysis mode since no peak count
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nYES",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',"- PreAssignment HEVAL in Alalysis Mode",                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\PreAssignPROFILE_NERPM4.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE_PK2HR.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\PreAssignLinksCnt0.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\PreAssignheval-NERPM4.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\PreAssignSCRNLINE-NERPM4.out
*if exist HRLDXY.ASC copy /a HRLDXY.ASC {SCENARIO_DIR}\output\PreAssignHRLDXY-NERPM4.ASC
*if exist HRLDXY2.ASC copy /a HRLDXY2.ASC {SCENARIO_DIR}\output\PreAssignHRLDXY2-NERPM4.ASC

*REM -- Delete HEVAL outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL routine Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"C:\NERPM43\APPLICATIONS\WARMSTART\PreAssignheval-NERPM4.out" "{Scenario_Dir}\output\PreAssignHEVAL.PRN" '
ENDRUN

; PILOT Script
FILEO PRINTO[1] = "TRANSIT.MAS"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

; Create TRANSIT.MAS file
copy,
 FILE = "C:\NERPM43\APPLICATIONS\TRANSIT.MAS"

DESCRIPTION                  {DESCR}
ZONESA                       {ZONESA}

; AutoCon-Related Files
; Input
StatDataFile                 {SCENARIO_DIR}\output\STATDATA_{ALT}{YEAR}.DAT
XtraAutoFileAM               {SCENARIO_DIR}\input\XTRAAUTO_{YEAR}{ALT}.DAT
XtraAutoFileMD               {SCENARIO_DIR}\input\XTRAAUTO_{YEAR}{ALT}.DAT
AutoDelFileAM                {SCENARIO_DIR}\input\AUTDELPK_{YEAR}{ALT}.DAT
AUTODELFILEMD                {SCENARIO_DIR}\input\AUTDELOP_{YEAR}{ALT}.DAT
NodesFile                    {SCENARIO_DIR}\output\XY_{ALT}{YEAR}.DAT
TransitLineFile              {SCENARIO_DIR}\output\troute_modified.lin
RHSKIMS                      {SCENARIO_DIR}\output\RHSKIMS1.{ALT}{YEAR}
FHSKIMS                      {SCENARIO_DIR}\output\FHSKIMS1.{ALT}{YEAR}
; Output
AUTOCONRPT                   {SCENARIO_DIR}\output\AUTOCON.OUT
PNRAUTOAM                    {SCENARIO_DIR}\output\NTLEG2PK_{ALT}{YEAR}.NTL
PNRAUTOMD                    {SCENARIO_DIR}\output\NTLEG2OP_{ALT}{YEAR}.NTL
KNRAUTOAM                    {SCENARIO_DIR}\output\NTLEG2PK_KNR{ALT}{YEAR}.NTL
KNRAUTOMD                    {SCENARIO_DIR}\output\NTLEG2OP_KNR{ALT}{YEAR}.NTL
; AutoCon Parameters
AUTOCONVERSION               2
ZONESI                       {ZONESI}
CBDZONE                      {CBDZONE}
TERM                         2.00
DEF                          2.00
NOPT                         1
BACK                         1
BACKD                        4.0
BACKPC                       0.30
UNITS                        5280
MAXMODE                      27
MODENUM (not used)            21 22 23 24 25 26 27
PREMIUMFLAG                    0  1  0  1  1  1  1
MODEPRIORITY                   7  5  7  2  1  4  3
VOTAM                         6.00
VOTMD                         3.00
OVTRATIOAM                    2.00
OVTRATIOMD                    2.00
AATRATIOAM                    1.50
AATRATIOMD                    1.50
AUTOCCPNR                    {OCCPNRAccess}
AUTOCCKNR                    {OCCPNRAccess}
AOC                          {hwyopcost}
InflTransitFare              {InflationFare}
InflAOC                      {InflationAOC}
InflParkingCost              {InflationParkCost}
AUTODATAM                    {SCENARIO_DIR}\output\NTLDA2PK_{ALT}{YEAR}.TIM
AUTODATMD                    {SCENARIO_DIR}\output\NTLDA2OP_{ALT}{YEAR}.TIM
ACONLISTAM                   {SCENARIO_DIR}\output\NTLEG2PK_{ALT}{YEAR}.PRN
ACONLISTMD                   {SCENARIO_DIR}\output\NTLEG2OP_{ALT}{YEAR}.PRN


endcopy

; End of PILOT Script

LOOP ACCESS = 1, 3, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

IF (ACCESS == 1)
    ACCESS_NAME='Walk'
    DELACCMODE='2,3,4,5,6'
    DELEGRMODE='2,3,4,5,6'
    MAXIMUMXFER=2
    RECOSTMAX2=250.0
ELSEIF (ACCESS == 2)
    ACCESS_NAME='PNR'
    DELACCMODE='1,3,4,5,6'
    DELEGRMODE='2,3,4,5,6'
    MAXIMUMXFER=2
    RECOSTMAX2=250.0
ELSEIF (ACCESS == 3)
    ACCESS_NAME='KNR'
    DELACCMODE='1,2,4,5,6'
    DELEGRMODE='2,3,4,5,6'
    MAXIMUMXFER=2
    RECOSTMAX2=250.0
ENDIF

; End of PILOT Script

  LOOP MODE = 1, 5, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

; Mode hierarchy
; Skyway <- Local Bus <- Express Bus <- BRT/LRT <- Com Rail
; 
; 21 LOCAL BUS
; 22 EXPRESS
; 23 SKYWAY & TROLLEY
; 24 BRT
; 25 LRT
; 26 COMMUTER RAIL

IF (MODE==1) ; Lowest level in the nest
  MODE_NAME='SKYWAY'
  ALLOWEXCLUDEMODES = ' '
  DELETEMODE='21,22,24,25,26'
  PREFLB=1.00
  PREFEB=1.00
  PREFSKY=1.00
  PREFBRT=1.00
  PREFLRT=1.00
  PREFCRL=1.00
  BRDpen23=2.0
  TRANSFERPEN1='XFERCONST=10.00, from=21-200, to=21-200'
ELSEIF (MODE==2)
  MODE_NAME='LOCAL'
  ALLOWEXCLUDEMODES = ' '
  DELETEMODE='22,24,25,26'
  PREFLB=1.00
  PREFEB=1.00
  PREFSKY=1.30
  PREFBRT=1.00
  PREFLRT=1.00
  PREFCRL=1.00
  BRDpen23=2.0
  TRANSFERPEN1='XFERCONST=10.00, from=21-200, to=21-200'
ELSEIF (MODE==3)
  MODE_NAME='EXPRESS'
  ALLOWEXCLUDEMODES = ' '
  DELETEMODE='24,25,26'
  PREFLB=1.30
  PREFEB=1.00
  PREFSKY=1.30
  PREFBRT=1.00
  PREFLRT=1.00
  PREFCRL=1.00
  BRDpen23=2.0
  TRANSFERPEN1='XFERCONST=10.00, from=21-200, to=21-200'
ELSEIF (MODE==4)
  MODE_NAME='BRTLRT'
  DELETEMODE='26'
  PREFLB=1.30
  PREFEB=1.30
  PREFSKY=1.30
  PREFBRT=1.00
  PREFLRT=1.00
  PREFCRL=1.00
  BRDpen23=2.0
  TRANSFERPEN1='XFERCONST=10.00, from=21-200, to=21-200'
ELSEIF (MODE==5)
  MODE_NAME='COMRAIL'
  ALLOWEXCLUDEMODES = ';'
  DELETEMODE= ' '
  PREFLB=1.30
  PREFEB=1.30
  PREFSKY=1.30
  PREFBRT=1.30
  PREFLRT=1.30
  PREFCRL=1.00
  BRDpen23=2.0
  TRANSFERPEN1='XFERCONST=10.00, from=21-200, to=21-200'
ENDIF

; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\applications\TPMAT00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\FACTORS.PRN" MSG='create FACTORS file'
FILEI LOOKUPI[1] = "{CATALOG_DIR}\parameters\TRN_COEFFICIENTS.DBF"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\@Access_Name@@Mode_Name@.FAC"

ZONES=1

; LOOKUP for coefficient file
LOOKUP NAME=COEFF, LOOKUP[1]=1, RESULT=2,
FAIL=0,0,0,LIST=Y,INTERPOLATE=N,LOOKUPI=1

ovtfactor =COEFF(1,3)/COEFF(1,1)     ; out-of-vehicle time factor (OVT time and Wait factor)
valtime   =0.6*COEFF(1,1)/COEFF(1,4)  ; value of time (in $/hr)
aatfactor =COEFF(1,5)/COEFF(1,1)     ; drive access to transit time factor

comment=';'

IF (I=1)
  PRINT FORM=5.0,
    list="",comment, "PT Factors File for ********",'@ACCESS_NAME@'," Access - ",'@MODE_NAME@'," ********",
         "\n",comment, "NERPM - December 2006, AECOM Consult",
         "\n\n",comment, "Global Settings",
         "\n BESTPATHONLY=T",
         "\n FREQBYMODE=T",
         "\n RECOSTMAX=",@RECOSTMAX2@(6.2),
         "\n MAXFERS=",@MAXIMUMXFER@(1.0),
         "\n SERVICEMODEL=FREQUENCY",
         
         ; Don't write delete modes for Commuter Rail 
         @ALLOWEXCLUDEMODES@ "\n\n",comment, "Available Transit Modes",
         @ALLOWEXCLUDEMODES@"\n DELMODE = ",'@DELETEMODE@',
         
         "\n\n",comment, "Access & Egress Modes",
         "\n DELACCESSMODE = ",'@DELACCMODE@',
         "\n DELEGRESSMODE = ",'@DELEGRMODE@',

         "\n\n",comment, "Fare & Wait Times",
         "\n FARESYSTEM=1, OPERATOR=1",
         "\n FARESYSTEM=2, OPERATOR=2",
         "\n FARESYSTEM=3, OPERATOR=3",
         "\n FARESYSTEM=4, OPERATOR=4",
         "\n FARESYSTEM=5, OPERATOR=5",
         "\n FARESYSTEM=6, OPERATOR=6",
         "\n FARESYSTEM=7, OPERATOR=7",
         "\n FARESYSTEM=8, OPERATOR=8",
         "\n IWAITCURVE=1,  NODES={NODEMIN}-99999",
         "\n XWAITCURVE=1,  NODES={NODEMIN}-99999",
         "\n WAITFACTOR=",ovtfactor(5.2)," NODES={NODEMIN}-99999",

         "\n\n",comment, "Run Factors",
         "\n RUNFACTOR[1]   =",ovtfactor(5.2),
         "\n RUNFACTOR[2]   = 1.00",
         "\n RUNFACTOR[3]   = 1.00",
         "\n RUNFACTOR[4]   =",ovtfactor(5.2),
         "\n RUNFACTOR[5]   = 1.00",
         "\n RUNFACTOR[6]   = 1.00",
         "\n RUNFACTOR[11]  =",ovtfactor(5.2),
         "\n RUNFACTOR[12]  =",ovtfactor(5.2),
         "\n RUNFACTOR[21]  = ",@PREFLB@(4.2),
         "\n RUNFACTOR[22]  = ",@PREFEB@(4.2),
         "\n RUNFACTOR[23]  = ",@PREFSKY@(4.2),
         "\n RUNFACTOR[24]  = ",@PREFBRT@(4.2),
         "\n RUNFACTOR[25]  = ",@PREFLRT@(4.2),
         "\n RUNFACTOR[26]  = ",@PREFCRL@(4.2),

         "\n\n",comment, "Boarding & Transfer Penalties",
         "\n BRDPEN[21]  = 2.0",
         "\n BRDPEN[22]  = 2.0",
         "\n BRDPEN[23]  = ",@BRDpen23@(3.1),
         "\n BRDPEN[24]  = 2.0",
         "\n BRDPEN[25]  = 2.0",
         "\n BRDPEN[26]  = 2.0",
         "\n BRDPEN[27]  = 2.0",
         "\n XFERPEN=0.00, from=21-200, to=21-200",
         "\n XFERFACTOR=1.00, from=21-200, to=21-200",
         "\n ",'@TRANSFERPEN1@',

         "\n  ",PRINTO=1
ENDIF


ENDRUN


  ENDLOOP

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


; End of PILOT Script

ENDLOOP

; Script for program NETWORK in file "C:\NERPM43\applications\TPNET00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\TPNET00F.PRN" MSG='Peak Transit Speeds'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\PKPreLoad.NET"
FILEI LOOKUPI[1] = "{Catalog_Dir}\parameters\TRANSPD.DBF"
FILEO NETO = "{SCENARIO_DIR}\output\PRELOAD_PT.NET"

PROCESS PHASE=NODEMERGE
    if (N>80008 & N<80100) STOPGRP=1
ENDPROCESS

PROCESS PHASE=LINKMERGE

  if (time_1>0)
    _AUTOSPEED=60*(DISTANCE)/TIME_1
  else
    _AUTOSPEED=15
  ENDIF

;===========================================================
;SKS-CAP AutoSpeed to 2.5-75 mph and recalculate time_1 (congested time)
;Addressed in Step 4 of Preassignment

;If (_AUTOSPEED<2.5) _AUTOSPEED=2.5
;IF (_AUTOSPEED>75.0) _AUTOSPEED=75
;time_1 = 60.0*DISTANCE/_AUTOSPEED
;CSPD_1=_AUTOSPEED
;=======================================

  LOOKUP name=curve,
     lookup[1]=CURVE_NO, result=LOW_MODE,
     lookup[2]=CURVE_NO, result=HIGH_MODE,
     lookup[3]=CURVE_NO, result=LOW_FT,
     lookup[4]=CURVE_NO, result=HIGH_FT,
     lookup[5]=CURVE_NO, result=LOW_AT,
     lookup[6]=CURVE_NO, result=HIGH_AT,
     lookup[7]=CURVE_NO, result=PKSPDRATIO,
     interpolate=n, fail=0,0,0, list=y, lookupi=1

array LM=500, HM=500, LF=500, HF=500, LA=500, HA=500, SR=500

  LOOP _nn=1,500                                    ; assuming there are no more than 500 curves
   LM[_nn]=CURVE(1,_nn)
   HM[_nn]=CURVE(2,_nn)
   LF[_nn]=CURVE(3,_nn)
   HF[_nn]=CURVE(4,_nn)
   LA[_nn]=CURVE(5,_nn)
   HA[_nn]=CURVE(6,_nn)
   SR[_nn]=CURVE(7,_nn)
   if (LM[_nn] > 0) _numberofcurves=_nn
   if (LM[_nn] <= 0) BREAK
  ENDLOOP

  spdratioM21 = 1.0  ; initialize
  spdratioM22 = 1.0
  spdratioM23 = 1.0
  spdratioM24 = 1.0
  spdratioM25 = 1.0
  spdratioM26 = 1.0
 ; spdratioM27 = 1.0

  LOOP _nn=1,_numberofcurves
    if ((FACILITY_TYPE >= LF[_nn]) & (FACILITY_TYPE <= HF[_nn]) & (AREA_TYPE >= LA[_nn]) & (AREA_TYPE <= HA[_nn]))
     if ((LM[_nn] >= 21) & (HM[_nn] <= 21)) spdratioM21 = SR[_nn]
     if ((LM[_nn] >= 22) & (HM[_nn] <= 22)) spdratioM22 = SR[_nn]
     if ((LM[_nn] >= 23) & (HM[_nn] <= 23)) spdratioM23 = SR[_nn]
     if ((LM[_nn] >= 24) & (HM[_nn] <= 24)) spdratioM24 = SR[_nn]
     if ((LM[_nn] >= 25) & (HM[_nn] <= 25)) spdratioM25 = SR[_nn]
     if ((LM[_nn] >= 26) & (HM[_nn] <= 26)) spdratioM26 = SR[_nn]
    endif
  ENDLOOP

     ; APPLY DEFAULT CURVES
     IF (_AUTOSPEED>0)
       _TSPD21=spdratioM21*_AUTOSPEED  ; Bus Speeds
       _TSPD22=spdratioM22*_AUTOSPEED  ; Express Bus (assumed same as buses)
       _TSPD23=spdratioM23*_AUTOSPEED  ; Skyway Speeds (assumed same as buses)
       _TSPD24=spdratioM24*_AUTOSPEED  ; BRT speeds
       _TSPD25=spdratioM25*_AUTOSPEED  ; LRT speeds
       _TSPD26=spdratioM26*_AUTOSPEED  ; Commuter rail speeds

       M21TIMEPK=60*(DISTANCE)/_TSPD21
       M22TIMEPK=60*(DISTANCE)/_TSPD22
       M23TIMEPK=60*(DISTANCE)/_TSPD23
       M24TIMEPK=60*(DISTANCE)/_TSPD24
       M25TIMEPK=60*(DISTANCE)/_TSPD25
       M26TIMEPK=60*(DISTANCE)/_TSPD26
     ENDIF

     ; OVERRIDES BUS TIMES FOR BUS LINKS FROM NETWORK
     IF (TBSTIME>0)
        M21TIMEPK=TBSTIME
        M22TIMEPK=TBSTIME
        M23TIMEPK=TBSTIME
        M24TIMEPK=TBSTIME
        M25TIMEPK=TBSTIME 
        M26TIMEPK=TBSTIME
     ENDIF

     ; GET THE FIXED GUIDEWAY TIMES
     IF (TFGTIME>0)
        M23TIMEPK=999  ;
        M25TIMEPK=999
        M26TIMEPK=999
     ENDIF

     IF (TFGTIME>0 & TFGMODE=23) M23TIMEPK=TFGTIME     ; skyway times
     IF (TFGTIME>0&TFGMODE=22)
      M22TIMEPK=TFGTIME     ; Premium buses coded as a local bus mode
      M24TIMEPK=TFGTIME     ; BRT times
     ENDIF
     IF (TFGTIME>0&TFGMODE=11)
      M21TIMEPK=TFGTIME     ; Links with FT=59 (connectors to the station for local buses)
      M22TIMEPK=TFGTIME     ; Links with FT=59 (connectors to the station for express buses)
      M23TIMEPK=TFGTIME     ; Links with FT=59 (connectors to the station for Skuway)
      M24TIMEPK=TFGTIME     ; Links with FT=59 (connectors to the station for BRT)
      M25TIMEPK=TFGTIME     ; Links with FT=59 (connectors to the station for LRT) 
      M26TIMEPK=TFGTIME     ; Links with FT=59 (connectors to the station for com rail) 
     ENDIF

     ; ASSIGNS THINGS WITH MISSING VALUES A 999
     IF (M21TIMEPK=0) M21TIMEPK=999
     IF (M22TIMEPK=0) M22TIMEPK=999
     IF (M23TIMEPK=0) M23TIMEPK=999
     IF (M24TIMEPK=0) M24TIMEPK=999
     IF (M25TIMEPK=0) M25TIMEPK=999
     IF (M26TIMEPK=0) M26TIMEPK=999
    if (facility_type=69 & A>80008) BRTLINKTIME=TFGTIME

; ################## Set centroid connectors to maximum length for walk-transit paths
  if (LI.1.A <= {ZONESA} | LI.1.B <= {ZONESA})
    if (LI.1.DISTANCE > 0.40)
      ADJDISTANCE=0.40
    else
      ADJDISTANCE=LI.1.DISTANCE
    endif
  else
    ADJDISTANCE=LI.1.DISTANCE
  endif
; #######################
; WALK CONTROLS
     WALKTIME=60*(ADJDISTANCE)/{AVGWLKSPD}
     IF (FACILITY_TYPE=10-19,69,70-99)
        WALKTIME=999.99
     ENDIF
     IF (FACILITY_TYPE=59) ; escaltor link
        DISTANCE=0.1
        ADJDISTANCE=0.1
        WALKTIME=1.0
     ENDIF

ENDPROCESS

ENDRUN


; Script for program NETWORK in file "C:\NERPM43\applications\TPNET00D.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\TPNET00G.PRN" MSG='Off-peak Transit Speeds'
FILEI LOOKUPI[1] = "{Catalog_Dir}\parameters\TRANSPD.DBF"
FILEI LINKI[1] = "{Scenario_Dir}\output\UNLOADED.NET"
FILEO NETO = "{SCENARIO_DIR}\output\UNLOADED_PT.NET"

PROCESS PHASE=NODEMERGE
    if (N>80008 & N<80100) STOPGRP=1
ENDPROCESS

PROCESS PHASE=LINKMERGE

  if (time>0)
    _AUTOSPEED=60*(DISTANCE)/TIME
  else
    _AUTOSPEED=15
  ENDIF

  LOOKUP name=curve,
     lookup[1]=CURVE_NO, result=LOW_MODE,
     lookup[2]=CURVE_NO, result=HIGH_MODE,
     lookup[3]=CURVE_NO, result=LOW_FT,
     lookup[4]=CURVE_NO, result=HIGH_FT,
     lookup[5]=CURVE_NO, result=LOW_AT,
     lookup[6]=CURVE_NO, result=HIGH_AT,
     lookup[7]=CURVE_NO, result=OPSPDRATIO,
     interpolate=n, fail=0,0,0, list=y, lookupi=1

array LM=500, HM=500, LF=500, HF=500, LA=500, HA=500, SR=500

  LOOP _nn=1,500                                    ; assuming there are no more than 500 curves
   LM[_nn]=CURVE(1,_nn)
   HM[_nn]=CURVE(2,_nn)
   LF[_nn]=CURVE(3,_nn)
   HF[_nn]=CURVE(4,_nn)
   LA[_nn]=CURVE(5,_nn)
   HA[_nn]=CURVE(6,_nn)
   SR[_nn]=CURVE(7,_nn)
   if (LM[_nn] > 0) _numberofcurves=_nn
   if (LM[_nn] <= 0) BREAK
  ENDLOOP

  spdratioM21 = 1.0  ; initialize
  spdratioM22 = 1.0
  spdratioM23 = 1.0
  spdratioM24 = 1.0
  spdratioM25 = 1.0
  spdratioM26 = 1.0
 ; spdratioM27 = 1.0

  LOOP _nn=1,_numberofcurves
    if ((FACILITY_TYPE >= LF[_nn]) & (FACILITY_TYPE <= HF[_nn]) & (AREA_TYPE >= LA[_nn]) & (AREA_TYPE <= HA[_nn]))
     if ((LM[_nn] >= 21) & (HM[_nn] <= 21)) spdratioM21 = SR[_nn]
     if ((LM[_nn] >= 22) & (HM[_nn] <= 22)) spdratioM22 = SR[_nn]
     if ((LM[_nn] >= 23) & (HM[_nn] <= 23)) spdratioM23 = SR[_nn]
     if ((LM[_nn] >= 24) & (HM[_nn] <= 24)) spdratioM24 = SR[_nn]
     if ((LM[_nn] >= 25) & (HM[_nn] <= 25)) spdratioM25 = SR[_nn]
     if ((LM[_nn] >= 26) & (HM[_nn] <= 26)) spdratioM26 = SR[_nn]
    endif
  ENDLOOP
; APPLY DEFAULT CURVES
     IF (_AUTOSPEED>0)
       _TSPD21=spdratioM21*_AUTOSPEED  ; Bus Speeds
       _TSPD22=spdratioM22*_AUTOSPEED  ; Express Bus (assumed same as buses)
       _TSPD23=spdratioM23*_AUTOSPEED  ; Skyway Speeds (assumed same as buses)
       _TSPD24=spdratioM24*_AUTOSPEED  ; BRT speeds
       _TSPD25=spdratioM25*_AUTOSPEED  ; LRT speeds
       _TSPD26=spdratioM26*_AUTOSPEED  ; Commuter rail speeds

       M21TIMEOP=60*(DISTANCE)/_TSPD21
       M22TIMEOP=60*(DISTANCE)/_TSPD22
       M23TIMEOP=60*(DISTANCE)/_TSPD23
       M24TIMEOP=60*(DISTANCE)/_TSPD24
       M25TIMEOP=60*(DISTANCE)/_TSPD25
       M26TIMEOP=60*(DISTANCE)/_TSPD26
     ENDIF


     ; OVERRIDES BUS TIMES FOR BUS LINKS FROM NETWORK
     IF (TBSTIME>0)
        M21TIMEOP=TBSTIME
        M22TIMEOP=TBSTIME
        M23TIMEOP=TBSTIME
        M24TIMEOP=TBSTIME
        M25TIMEOP=TBSTIME 
        M26TIMEOP=TBSTIME
     ENDIF

     ; GET THE FIXED GUIDEWAY TIMES
     IF (TFGTIME>0)
        M23TIMEOP=999  ;
        M25TIMEOP=999
        M26TIMEOP=999
     ENDIF
     
     IF (TFGTIME>0 & TFGMODE=23) M23TIMEPK=TFGTIME     ; skyway times
     IF (TFGTIME>0&TFGMODE=22)
      M22TIMEOP=TFGTIME     ; Premium buses coded as a local bus mode
      M24TIMEOP=TFGTIME     ; BRT times
     ENDIF
     IF (TFGTIME>0&TFGMODE=11)
      M21TIMEOP=TFGTIME     ; Links with FT=59 (connectors to the station for local buses)
      M22TIMEOP=TFGTIME     ; Links with FT=59 (connectors to the station for express buses)
      M23TIMEOP=TFGTIME     ; Links with FT=59 (connectors to the station for Skuway)
      M24TIMEOP=TFGTIME     ; Links with FT=59 (connectors to the station for BRT)
      M25TIMEOP=TFGTIME     ; Links with FT=59 (connectors to the station for LRT) 
      M26TIMEOP=TFGTIME     ; Links with FT=59 (connectors to the station for com rail) 
     ENDIF

     ; ASSIGNS THINGS WITH MISSING VALUES A 999
     IF (M21TIMEOP=0) M21TIMEOP=999
     IF (M22TIMEOP=0) M22TIMEOP=999
     IF (M23TIMEOP=0) M23TIMEOP=999
     IF (M24TIMEOP=0) M24TIMEOP=999
     IF (M25TIMEOP=0) M25TIMEOP=999
     IF (M26TIMEOP=0) M26TIMEOP=999
    if (facility_type=69 & A>80008) BRTLINKTIME=TFGTIME

; ################## Set centroid connectors to maximum length for walk-transit paths
  if (LI.1.A <= {ZONESA} | LI.1.B <= {ZONESA})
    if (LI.1.DISTANCE > 0.40)
      ADJDISTANCE=0.40
    else
      ADJDISTANCE=LI.1.DISTANCE
    endif
  else
    ADJDISTANCE=LI.1.DISTANCE
  endif
; #######################
; WALK CONTROLS
     WALKTIME=60*(ADJDISTANCE)/{AVGWLKSPD}
     IF (FACILITY_TYPE=10-19,69,70-99)
        WALKTIME=999.99
     ENDIF
     IF (FACILITY_TYPE=59) ; escaltor link
        DISTANCE=0.1
        ADJDISTANCE=0.1
        WALKTIME=1.0
     ENDIF

ENDPROCESS

ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\TPNET00E.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\TPNET00A.PRN" MSG='Create STATDATA file using PNR information'
FILEI LINKI[1] = "{Scenario_Dir}\output\PKPreLoad.NET"
FILEO PRINTO[3] = "{SCENARIO_DIR}\output\FringePNROP.TXT"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\FringePNRPK.TXT"
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\output\NODES.CSV"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\STATDATA_{ALT}{YEAR}.DAT"


ARRAY PNR=9999,RNG=9999,ZON=9999,PRK=9999,CSTAM=9999,CSTMD=9999,PNRT=9999,KNRT=9999,TYPE=9999

PROCESS  PHASE=NODEMERGE
; put nodes, x and y coordinates into memory for lookup nearest TAZ question
lookup lookupi=1,name=netcoord, lookup[1]=1, result=2, lookup[2]=1, result=3, fail=0

if (N=1) _CNT=1
if (N=1) _CNT1=1

if (TSTYPE_{year}{alt} > 0)
 workstat=N
 workstatx=netcoord(1,workstat,0)
 workstaty=netcoord(2,workstat,0)
 mindist=999.99
 loop _ww=1,{ZONESI}
   zx=netcoord(1,_ww,0)
   zy=netcoord(2,_ww,0)
   if (_ww!=workstat) dist=sqrt((workstatx-zx)^2+(workstaty-zy)^2)/5280
   if (dist<mindist) mindist=dist, nearestzone=_ww
 endloop

 PNR[_CNT]=N
 RNG[_CNT]=TSRANGE_{year}{alt}
 ZON[_CNT]=nearestzone
 PRK[_CNT]=TSPARKSPACE_{year}{alt}
 CSTAM[_CNT]=TSCOSTAM_{year}{alt}
 CSTMD[_CNT]=TSCOSTMD_{year}{alt}
 PNRT[_CNT]=2.0
 KNRT[_CNT]=0.5
 TYPE[_CNT]=TSTYPE_{year}{alt}
; get all the informal PNRs first (locations obtained from the on-board survey)
  if (TSTYPE_{year}{alt}=3,4,5,6) ; informal PNRs (locations obtained from on-board survey) stations
   autocontype=1
   if (TSTYPE_{year}{alt}=4) autocontype=4
   print list=_CNT1(4.0),PNR[_CNT](6.0),ZON[_CNT](6.0),RNG[_CNT](6.1),PRK[_CNT](6.0),CSTAM[_CNT](6.0),CSTMD[_CNT](6.0),
                                    PNRT[_CNT](6.1),KNRT[_CNT](6.1),autocontype(3.0)," Informal PNR/KNR", printo=1
   _CNT1=_CNT1+1
  endif

 _CNT=_CNT+1
endif

ENDPROCESS

PROCESS PHASE=LINKMERGE

 LOOP _ww=1,_CNT
  if ((LI.1.A = PNR[_ww]) & (LI.1.A >0) & (LI.1.FACILITY_TYPE=59))  ; formal PNR
   print list=_CNT1(4.0),li.1.B(6.0),ZON[_ww](6.0),RNG[_ww](6.1),PRK[_ww](6.0),CSTAM[_ww](6.0),CSTMD[_ww](6.0),
                                    LI.1.PNRTERMTIME(6.1),LI.1.KNRTERMTIME(6.1),TYPE[_ww](3.0)," PNR Station", li.1.A(6.0), printo=1
   _CNT1=_CNT1+1
  endif
; GENERATE statement for Fringe PNRs
  IF ((LI.1.A = PNR[_ww]) & (LI.1.B >80000) & (LI.1.FACILITY_TYPE=59) & (TYPE[_ww]=2))
    PRINT FORM=5.0,list="\n  GENERATE,COST=(LW.DISTANCE),EXTRACTCOST=(li.time_1+li.svcminutes+li.svcseconds/60+li.cartoll*{ctoll}*60),MINCOST=200*6,MAXCOST=200*20,LIST=N,",
    "\n  NTLEGMODE=5,MAXNTLEGS=200*1,DIRECTION=1,ONEWAY=T,EXCLUDELINK=(LI.COUNTY=1,3,4,5,6),",
    "\n  FROMNODE=1-{ZONESA}, TONODE=",LI.1.B,printo=2                                 ;peak period

    PRINT FORM=5.0,list="\n  GENERATE,COST=(LW.DISTANCE),EXTRACTCOST=(li.time+li.svcminutes+li.svcseconds/60+li.cartoll*{ctoll}*60),MINCOST=200*6,MAXCOST=200*20,LIST=N,",
    "\n  NTLEGMODE=5,MAXNTLEGS=200*1,DIRECTION=1,ONEWAY=T,EXCLUDELINK=(LI.COUNTY=1,3,4,5,6),",
    "\n  FROMNODE=1-{ZONESA}, TONODE=",LI.1.B,printo=3                                 ;off-peak period
  ENDIF

  if (LI.1.B=PNR[_ww])
   PRKCSTAM=CSTAM[_ww]
   PRKCSTMD=CSTMD[_ww]
   PNRTerminalTime=PNRT[_ww]
   KNRTerminalTime=KNRT[_ww]
  endif
 ENDLOOP

ENDPROCESS

ENDRUN


; Script for program NETWORK in file "C:\NERPM43\applications\TPNET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\GenPrep.PRN"
FILEI LINKI[1] = "{Scenario_Dir}\output\PKPreLoad.NET"
FILEO PRINTO[7] = "{SCENARIO_DIR}\output\FringeKNRBusOP.TXT"
FILEO PRINTO[6] = "{SCENARIO_DIR}\output\FringeKNRBusPK.TXT"
FILEO PRINTO[5] = "{SCENARIO_DIR}\output\STATXFER_TMP.DAT"
FILEO PRINTO[4] = "{SCENARIO_DIR}\output\STATCON_TMP.DAT"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\ZONESAT.DAT"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\CBDXFER.DAT"

ARRAY CBDNODETMP=99999, CBDNODE=99999, BRTSTATIONS=500

PROCESS PHASE=NODEMERGE
 IF (N=1)
   _CNT=1
 ; GENERATE CBD sidewalks
       PRINT FORM=5.0, list="; CBD sidewalk (0.6 mile) from CBD nodes to all other nodes",
         "\n\n  GENERATE, COST=(LW.DISTANCE),EXTRACTCOST=(LW.WALKTIME),MAXCOST=200*{XFERACC},LIST=N,",
         "\n  EXCLUDELINK=(LI.FACILITY_TYPE=10-19,69,70-99),NTLEGMODE=12,MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=3,ONEWAY=F,",
         "\n  FROMNODE=",printo=1
  ; 6 - FRINGE PARK ACCESS TO BUS - peak period
       PRINT FORM=5.0, list="; fringe knr access to bus",
         "\n\n  GENERATE, COST=(LW.DISTANCE),EXTRACTCOST=LI.TIME_1,MINCOST=200*0.2,MAXCOST=200*7,LIST=N,",
         "\n     MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=1,ONEWAY=T,FROMNODE=1-{ZONESI},TONODE=", printo=6
  ; 7 - FRINGE PARK ACCESS TO BUS - off-peak period
       PRINT FORM=5.0, list="; fringe knr access to bus",
         "\n\n  GENERATE, COST=(LW.DISTANCE),EXTRACTCOST=LI.TIME,MINCOST=200*0.2,MAXCOST=200*7,LIST=N,",
         "\n     MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=1,ONEWAY=T,FROMNODE=1-{ZONESI},TONODE=", printo=7
 ENDIF

ENDPROCESS

PHASE=LINKMERGE

; Store BRT nodes for SELECTLINK analysis
    if ( (FACILITY_TYPE=69) && (LI.1.A >= {FirstBRTStationNode}) && (LI.1.B >= {FirstBRTStationNode}) && (LI.1.A < LI.1.B) )   ; pick up the BRT Links (does not include the Skyway Links)
     if (_idx=0)
       BRTSTATIONS[_idx+1]=LI.1.A
       BRTSTATIONS[_idx+2]=LI.1.B
       _idx=_idx+2
     else
       BRTSTATIONS[_idx+1]=LI.1.A
       BRTSTATIONS[_idx+2]=LI.1.B
      _idx=_idx+2
     endif
    endif
; store CBD nodes
    _LNKCNT=_LNKCNT+1
    if ( (LI.1.A <> _lastnode) && (LI.1.A > {ZONESA}) )
     if (LI.1.AREA_TYPE>10 && LI.1.AREA_TYPE<20)                    ;list only CBD nodes
;        PRINT FORM=5.0, list= LI.1.A(6.0),",", printo=1
       CBDNODETMP[_LNKCNT]=LI.1.A
     endif
    endif

; list zones with area types (replaces CBDZONES.SYN and EXURBS.SYN files)
   if ( (LI.1.A <> _lastnode) && (LI.1.A <= {ZONESA}) )
     if (LI.1.A > 0) PRINT list=LI.1.A(10.0), LI.1.AREA_TYPE(10.0), printo=2
   endif

    _lastnode = LI.1.A
ENDPHASE

; Issue - Voyager does not allow to have more than 1000 nodes in one FROMNODE list
; assuming that there are no more than 10,000 nodes in the CBD region
; not sure whether the script below will work for more than 10,000 nodes in the CBD region
; summary phase for printing out the GENERATE statement with a list of CBD nodes for CBD sidewalks
PHASE=SUMMARY
    _A=1
    _B=1
    LOOP _N=1,99999
     if (CBDNODETMP[_N]>0)
      CBDNODE[_A]=CBDNODETMP[_N]
      _A=_A+1
     endif

    ENDLOOP

    LOOP _K=1,9999
      _M=(_K-1)*10
      if (CBDNODE[_M+1]>0 & CBDNODE[_M+10]>0)
       _B=_B+1
       if (_B<=50)

        PRINT FORM=5.0, list= CBDNODE[_M+1](6.0),",",CBDNODE[_M+2](6.0),",",CBDNODE[_M+3](6.0),",",CBDNODE[_M+4](6.0),",",
                              CBDNODE[_M+5](6.0),",",CBDNODE[_M+6](6.0),",",CBDNODE[_M+7](6.0),",",CBDNODE[_M+8](6.0),",",
                              CBDNODE[_M+9](6.0),",",CBDNODE[_M+10](6.0),",",printo=1
        PRINT FORM=5.0, list= CBDNODE[_M+1](6.0),",",CBDNODE[_M+2](6.0),",",CBDNODE[_M+3](6.0),",",CBDNODE[_M+4](6.0),",",
                              CBDNODE[_M+5](6.0),",",CBDNODE[_M+6](6.0),",",CBDNODE[_M+7](6.0),",",CBDNODE[_M+8](6.0),",",
                              CBDNODE[_M+9](6.0),",",CBDNODE[_M+10](6.0),",",printo=6
        PRINT FORM=5.0, list= CBDNODE[_M+1](6.0),",",CBDNODE[_M+2](6.0),",",CBDNODE[_M+3](6.0),",",CBDNODE[_M+4](6.0),",",
                              CBDNODE[_M+5](6.0),",",CBDNODE[_M+6](6.0),",",CBDNODE[_M+7](6.0),",",CBDNODE[_M+8](6.0),",",
                              CBDNODE[_M+9](6.0),",",CBDNODE[_M+10](6.0),",",printo=7
       endif

       if (_B=50)
         PRINT FORM=5.0, list= "TONODE={NODEMIN}-99999", printo=1
         PRINT FORM=5.0, list= "NTLEGMODE=6", printo=6
         PRINT FORM=5.0, list= "NTLEGMODE=6", printo=7
         PRINT FORM=5.0, list="GENERATE, COST=(LW.DISTANCE),EXTRACTCOST=(LW.WALKTIME),MAXCOST=200*{XFERACC},LIST=N,",
           "\n  EXCLUDELINK=(LI.FACILITY_TYPE=10-19,69,70-99),NTLEGMODE=12,MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=3,ONEWAY=F,",
           "\n  FROMNODE=",printo=1

  ; 6 - FRINGE PARK ACCESS TO BUS - peak period
       PRINT FORM=5.0, list="; fringe knr access to bus",
         "\n\n  GENERATE, COST=(LW.DISTANCE),EXTRACTCOST=LI.TIME_1,MINCOST=200*0.2,MAXCOST=200*7,LIST=N,",
         "\n     MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=1,ONEWAY=T,FROMNODE=1-{ZONESI},TONODE=", printo=6

 ; 7 - FRINGE PARK ACCESS TO BUS - off-peak period
       PRINT FORM=5.0, list="; fringe knr access to bus",
         "\n\n  GENERATE, COST=(LW.DISTANCE),EXTRACTCOST=LI.TIME,MINCOST=200*0.2,MAXCOST=200*7,LIST=N,",
         "\n     MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=1,ONEWAY=T,FROMNODE=1-{ZONESI},TONODE=", printo=7
       endif

       if (_B>50)
        PRINT FORM=5.0, list= CBDNODE[_M+1](6.0),",",CBDNODE[_M+2](6.0),",",CBDNODE[_M+3](6.0),",",CBDNODE[_M+4](6.0),",",
                              CBDNODE[_M+5](6.0),",",CBDNODE[_M+6](6.0),",",CBDNODE[_M+7](6.0),",",CBDNODE[_M+8](6.0),",",
                              CBDNODE[_M+9](6.0),",",CBDNODE[_M+10](6.0),",",printo=1
        PRINT FORM=5.0, list= CBDNODE[_M+1](6.0),",",CBDNODE[_M+2](6.0),",",CBDNODE[_M+3](6.0),",",CBDNODE[_M+4](6.0),",",
                              CBDNODE[_M+5](6.0),",",CBDNODE[_M+6](6.0),",",CBDNODE[_M+7](6.0),",",CBDNODE[_M+8](6.0),",",
                              CBDNODE[_M+9](6.0),",",CBDNODE[_M+10](6.0),",",printo=6
        PRINT FORM=5.0, list= CBDNODE[_M+1](6.0),",",CBDNODE[_M+2](6.0),",",CBDNODE[_M+3](6.0),",",CBDNODE[_M+4](6.0),",",
                              CBDNODE[_M+5](6.0),",",CBDNODE[_M+6](6.0),",",CBDNODE[_M+7](6.0),",",CBDNODE[_M+8](6.0),",",
                              CBDNODE[_M+9](6.0),",",CBDNODE[_M+10](6.0),",",printo=7
       endif
      endif


      if (CBDNODE[_M+10]<=0)
       LOOP _C=1,10
        if (CBDNODE[_M+_C]>0) PRINT FORM=5.0, list= CBDNODE[_M+_C](6.0),",",printo=1
        if (CBDNODE[_M+_C]>0) PRINT FORM=5.0, list= CBDNODE[_M+_C](6.0),",",printo=6
        if (CBDNODE[_M+_C]>0) PRINT FORM=5.0, list= CBDNODE[_M+_C](6.0),",",printo=7
       ENDLOOP
      endif

    ENDLOOP

    PRINT FORM=5.0, list= "TONODE={NODEMIN}-99999", printo=1
    PRINT FORM=5.0, list= "NTLEGMODE=6", printo=6
    PRINT FORM=5.0, list= "NTLEGMODE=6", printo=7

;; BRT stations - walk connectors and transfer connectors
   SORT ARRAY=BRTSTATIONS

    loop _ff=1,500
; 3 mile walk connector to/from stations
     if ({isFutureYearAlternative}=1 & _ff=1); & BRTSTATIONS[_ff]>0)
        PRINT FORM=5.0,list="\n\n ; 3 mile walk connector from station to/from all zones",
          "\n  GENERATE,COST=(LW.DISTANCE),EXTRACTCOST=(LW.WALKTIME),MAXCOST=200*3.0,LIST=N,",
          "\n  EXCLUDELINK=(LI.FACILITY_TYPE=10-19,69,70-99),MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=3,ONEWAY=F,",
          "\n  FROMNODE=",printo=4
     endif
     if ({isFutureYearAlternative}=1 & _ff>1 & BRTSTATIONS[_ff]>0 & BRTSTATIONS[_ff]<>_prevstation) print list=BRTSTATIONS[_ff](9.0),",",printo=4
; station-nearby stop transfer connectors - maxntlegs=20 (99 too much for jax - huge impact on running times)
     if ({isFutureYearAlternative}=1 & _ff=1)
        PRINT FORM=5.0,list=";0.6 mile transfer connectors from all BRT stations to nearby stops",
          "\n\n  GENERATE,COST=(LW.DISTANCE),EXTRACTCOST=(LW.WALKTIME),MAXCOST=200*0.6,LIST=N,",
          "\n  EXCLUDELINK=(LI.FACILITY_TYPE=10-19,69,70-99),MAXNTLEGS=200*20,DIRECTION=3,ONEWAY=F,",
          "\n  FROMNODE=",printo=5
     endif
     if ({isFutureYearAlternative}=1 & _ff>1 & BRTSTATIONS[_ff]>0 & BRTSTATIONS[_ff]<>_prevstation) print list=BRTSTATIONS[_ff](9.0),",",printo=5
     _prevstation=BRTSTATIONS[_ff]

    endloop

    if ({isFutureYearAlternative}=1)
     print list="    TONODE=1-{ZONESA}, NTLEGMODE=1",printo=4
     print list="    TONODE={NODEMIN}-99999, NTLEGMODE=11",printo=5
    endif

ENDPHASE


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\applications\TPMAT00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\TPMAT00B.PRN" MSG='Create STATDATA DBF file'
FILEO RECO[1] = "{SCENARIO_DIR}\output\STATDATA_{alt}{year}.DBF",
   FORM=10.0, FIELDS=TAZ,STNODE,STNUM, FORM=10.2, FIELDS=STMAXD,STPKSP,STPKCS1,STPKCS2,STWALKPR,STWALKKR,FORM=5.0, FIELDS=TSTYPE, CFORM=30, FIELDS=STNAME
FILEI RECI = "{SCENARIO_DIR}\output\STATDATA_{ALT}{YEAR}.DAT",
 SORT=TAZ,
   STATION=1-4, STATNODE=5-10, TAZ=11-16, DRV=17-22, SPACES=23-28,
   A1=29-34, A2=35-40, B1=41-46, B2=47-52, C1=54-55, NAME(C)=56-85

RO.TAZ=RI.TAZ
RO.STNODE=RI.STATNODE
RO.STNUM=RI.STATION
RO.STMAXD=RI.DRV
RO.STPKSP=RI.SPACES
RO.STPKCS1=RI.A1
RO.STPKCS2=RI.A2
RO.STWALKPR=RI.B1
RO.STWALKKR=RI.B2
RO.TSTYPE=RI.C1
RO.STNAME=RI.NAME

WRITE RECO=1


ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\CNNET00G.S"
;;<<Default Template>><<NETWORK>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK MSG='Peak rename fields for AUOTCON'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\PRELOAD_PT.NET"
FILEO NETO = "{SCENARIO_DIR}\output\PRELOAD_PT_TEMP.NET"

PROCESS  PHASE=INPUT,filei=NI.1
ENDPROCESS

PROCESS PHASE = NODEMERGE
      COMP STAZ   = STATZONE
      COMP STANUM = TSSTATION_{year}{alt}
      COMP TSTYPE = TSTYPE_{year}{alt}
      COMP MAXD   = TSRANGE_{year}{alt}
      COMP SPACE  = TSPARKSPACE_{year}{alt}
      COMP STACOST_AM = TSCOSTAM_{year}{alt}
      COMP STACOST_MD = TSCOSTMD_{year}{alt}
ENDPROCESS


PROCESS  PHASE=LINKMERGE  
; Use this phase to make computations and selections of any data on the LINKI files.


ENDPROCESS


PROCESS  PHASE=SUMMARY   
; Use this phase for combining and reporting of working variables.


ENDPROCESS
ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\CNNET00H.S"
;;<<Default Template>><<NETWORK>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK MSG='OffPeak rename fields for AUOTCON'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\UNLOADED_PT.NET"
FILEO NETO = "{SCENARIO_DIR}\output\UNLOADED_PT_TEMP.NET"

PROCESS  PHASE=INPUT,filei=NI.1
ENDPROCESS

PROCESS PHASE = NODEMERGE
      COMP STAZ   = STATZONE
      COMP STANUM = TSSTATION_{year}{alt}
      COMP TSTYPE = TSTYPE_{year}{alt}
      COMP MAXD   = TSRANGE_{year}{alt}
      COMP SPACE  = TSPARKSPACE_{year}{alt}
      COMP STACOST_AM = TSCOSTAM_{year}{alt}
      COMP STACOST_MD = TSCOSTMD_{year}{alt}
ENDPROCESS


PROCESS  PHASE=LINKMERGE  
; Use this phase to make computations and selections of any data on the LINKI files.


ENDPROCESS


PROCESS  PHASE=SUMMARY   
; Use this phase for combining and reporting of working variables.


ENDPROCESS
ENDRUN


; Script for program PUBLIC TRANSPORT in file "C:\NERPM43\applications\CNPTR00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=PUBLIC TRANSPORT PRNFILE="{SCENARIO_DIR}\output\CNPTR00A.PRN" MSG='Peak period connectors'
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PT_AUTOCON_PK.OUT"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\NTLEG2PK_10A.PRN"
FILEI FACTORI[2] = "{SCENARIO_DIR}\output\PNRCOMRAIL.FAC"
FILEI MATI[1] = "{SCENARIO_DIR}\output\PRELSKIMS.MAT"

; Inputs for walk connectors
FILEI NETI = "{SCENARIO_DIR}\output\PRELOAD_PT_TEMP.NET"
FILEI LINEI[1] = "{SCENARIO_DIR}\input\TROUTE_{year}{alt}.LIN"
FILEI SYSTEMI = "{CATALOG_DIR}\parameters\SYSTEM.PTS"
FILEI FAREI = "{SCENARIO_DIR}\input\TFARES_{year}{alt}.FAR"
FILEI FACTORI[1] = "{SCENARIO_DIR}\output\WalkCOMRAIL.FAC"

; Output files
FILEO NETO = "{SCENARIO_DIR}\output\NTLEGSPK.NET"
FILEO LINKO[1] = "{SCENARIO_DIR}\output\NTLEGPK_{alt}{year}.DBF"
FILEO LINEO = "{SCENARIO_DIR}\output\TROUTE_MOD.LIN"
FILEO NTLEGO = "{SCENARIO_DIR}\output\NTLEGPK_{YEAR}{ALT}.NTL"
FILEO REPORTO = "{SCENARIO_DIR}\output\NTLEGPK.RPT"

; OVERALL PARAMETERS OF RUN
PARAMETERS USERCLASSES=1,FARE=N, MAPSCALE=5280, HDWAYPERIOD=1,
           NOROUTEERRS=999999, NOROUTEMSGS=999999,
           TRANTIME=LW.TRANTIME,
           TRANTIME[21]=LI.M21TIMEPK,
           TRANTIME[22]=LI.M22TIMEPK,
           TRANTIME[23]=LI.M23TIMEPK,
           TRANTIME[24]=LI.M24TIMEPK
           TRANTIME[25]=LI.M25TIMEPK
           TRANTIME[26]=LI.M26TIMEPK
REPORT LINES=T

PROCESS PHASE=LINKREAD
 LW.TRANTIME=LI.M21TIMEPK
 LW.WALKTIME=LI.WALKTIME
 LW.WALKDISTANCE=LI.DISTANCE
 LW.DISTANCE=LI.DISTANCE
 LW.ADJDISTANCE=LI.ADJDISTANCE
ENDPROCESS

PROCESS PHASE=DATAPREP

  ; 1 - WALK ACCESS/EGRESS
  GENERATE, COST=(LW.ADJDISTANCE),EXTRACTCOST=(LW.WALKTIME),MAXCOST=200*{WALKACCESSDIST},LIST=N,EXCLUDELINK=(LI.FACILITY_TYPE=10-19,69,70-99),
            NTLEGMODE=1,MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=3,ONEWAY=F,FROMNODE=1-{ZONESI},TONODE={NODEMIN}-99999
     
  ; 11 - Fixed-guideway to bus (transfer connectors)
  GENERATE, COST=(LW.DISTANCE),EXTRACTCOST=(LI.WALKTIME),MAXCOST=200*{WALKACCESSDIST},LIST=N,INCLUDELINK=(LI.FACILITY_TYPE=59),
            NTLEGMODE=11,MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=3,DIRECTLINK=2,ONEWAY=F,FROMNODE={NODEMIN}-99999,TONODE={NODEMIN}-99999
  
            ; 11 - station to nearby stop (transfer connectors)
  READ, FILE = "{SCENARIO_DIR}\OUTPUT\STATXFER_TMP.DAT"

  ; 12 - CBD sidewalks
   READ, FILE = "{SCENARIO_DIR}\OUTPUT\CBDXFER.DAT"

            
 ; Add AUTOCON outputs
 list='\nGenerate Zone Access/Egress Legs'
    GENERATE, 
       PNR=T,
       KNR=T,
       PERIOD=1,
       
       PNRMODE=2,
       KNRMODE=3,
       INTERNALZONES=1-2494,
       
       CBDZONE=730,
       ORIGINTERMTIME=2.0,
       DEFDRIVETIME=20.0,
       CHECKRELEVANCE=1,
       CHECKBACKTRACK=1,
       MAXBACKDIST=4.0,
       MAXBACKFACTOR=0.30,
       DISTANCEFACTOR=5280,
       
       PREMIUMMODE=0,1,0,1,1,1,1,  
       MODEPRIORITY=7,5,7,2,1,4,3,
       
       VOT=6,3,
       OVTRATIO=2,2,
       AATRATIO=1.5,1.5,
       AUTOCCPNR=1.2,
       AUTOCCKNR=1.2,
       AOC=9.5,
       INFLTRANSITFARE=0.9487,
       INFLAOC=1,
       INFLPARKINGCOST=1.1976,
       MAXCHECK = 10,
       MAXCONN = 5,
       
       CONNREPORT=1,
       GENREPORT=2,
       TIMEMAT=MI.1.4,
       DISTMAT=MI.1.2,
       AUTOMATCH=T      ; T=original logic, F=Enhanced logic

  ENDPROCESS

ENDRUN


; Script for program PUBLIC TRANSPORT in file "C:\NERPM43\APPLICATIONS\CNPTR00I.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=PUBLIC TRANSPORT PRNFILE="C:\NERPM43\APPLICATIONS\CNPTR00E.PRN" MSG='OffPeak period connectors'
FILEO PRINTO[2] = "{Scenario_Dir}\output\PT_AUTOCON_PK.OUT"
FILEO PRINTO[1] = "{Scenario_Dir}\output\NTLEG2OP_10A.PRN"
FILEI FACTORI[2] = "{SCENARIO_DIR}\output\PNRCOMRAIL.FAC"
FILEI MATI[1] = "{SCENARIO_DIR}\output\FHSKIMS.MAT"

; Inputs for walk connectors
FILEI NETI = "{SCENARIO_DIR}\output\UNLOADED_PT_TEMP.NET"
FILEI LINEI[1] = "{SCENARIO_DIR}\input\TROUTE_{year}{alt}.LIN"
FILEI SYSTEMI = "{CATALOG_DIR}\parameters\SYSTEM.PTS"
FILEI FAREI = "{SCENARIO_DIR}\input\TFARES_{year}{alt}.FAR"
FILEI FACTORI[1] = "{SCENARIO_DIR}\output\WalkCOMRAIL.FAC"

; Output files
FILEO NETO = "{Scenario_Dir}\output\NTLEGSOP.NET"
FILEO LINKO[1] = "{SCENARIO_DIR}\output\NTLEGOP_{alt}{year}.DBF"
FILEO LINEO = "{Scenario_Dir}\output\TROUTE_MOD.LIN"
FILEO NTLEGO = "{SCENARIO_DIR}\output\NTLEGOP_{YEAR}{ALT}.NTL"
FILEO REPORTO = "{SCENARIO_DIR}\output\NTLEGOP.RPT"

; OVERALL PARAMETERS OF RUN
PARAMETERS USERCLASSES=1,FARE=N, MAPSCALE=5280, HDWAYPERIOD=1,
           NOROUTEERRS=999999, NOROUTEMSGS=999999,
           TRANTIME=LW.TRANTIME,
           TRANTIME[21]=LI.M21TIMEOP,
           TRANTIME[22]=LI.M22TIMEOP,
           TRANTIME[23]=LI.M23TIMEOP,
           TRANTIME[24]=LI.M24TIMEOP,
           TRANTIME[25]=LI.M25TIMEOP,
           TRANTIME[26]=LI.M26TIMEOP
REPORT LINES=T

PROCESS PHASE=LINKREAD
 LW.TRANTIME=LI.M21TIMEOP
 LW.WALKTIME=LI.WALKTIME
 LW.WALKDISTANCE=LI.DISTANCE
 LW.DISTANCE=LI.DISTANCE
 LW.ADJDISTANCE=LI.ADJDISTANCE
ENDPROCESS

PROCESS PHASE=DATAPREP

  ; 1 - WALK ACCESS/EGRESS
  GENERATE, COST=(LW.ADJDISTANCE),EXTRACTCOST=(LW.WALKTIME),MAXCOST=200*{WALKACCESSDIST},LIST=N,EXCLUDELINK=(LI.FACILITY_TYPE=10-19,69,70-99),
            NTLEGMODE=1,MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=3,ONEWAY=F,FROMNODE=1-{ZONESI},TONODE={NODEMIN}-99999

  ; 11 - Fixed-guideway to bus
  GENERATE, COST=(LW.DISTANCE),EXTRACTCOST=(LI.WALKTIME),MAXCOST=200*{WALKACCESSDIST},LIST=N,INCLUDELINK=(LI.FACILITY_TYPE=59),
            NTLEGMODE=11,MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=3,DIRECTLINK=1,ONEWAY=F,FROMNODE={NODEMIN}-99999,TONODE={NODEMIN}-99999
  ;11 - station to nearby stop (transfer connectors)
  READ, FILE = "{SCENARIO_DIR}\OUTPUT\STATXFER_TMP.DAT"

  ; 12 - CBD sidewalks
   READ, FILE = "{SCENARIO_DIR}\OUTPUT\CBDXFER.DAT"

 ; Add AUTOCON outputs
 list='\nGenerate Zone Access/Egress Legs'
    GENERATE, 
       PNR=T,
       KNR=T,
       PERIOD=1,
       
       PNRMODE=2,
       KNRMODE=3,
       INTERNALZONES=1-2494,
       
       CBDZONE=730,
       ORIGINTERMTIME=2.0,
       DEFDRIVETIME=20.0,
       CHECKRELEVANCE=1,
       CHECKBACKTRACK=1,
       MAXBACKDIST=4.0,
       MAXBACKFACTOR=0.30,
       DISTANCEFACTOR=5280,
       
       PREMIUMMODE=0,1,0,1,1,1,1,  
       MODEPRIORITY=7,5,7,2,1,4,3,
       
       VOT=6,3,
       OVTRATIO=2,2,
       AATRATIO=1.5,1.5,
       AUTOCCPNR=1.2,
       AUTOCCKNR=1.2,
       AOC=9.5,
       INFLTRANSITFARE=0.9487,
       INFLAOC=1,
       INFLPARKINGCOST=1.1976,
       MAXCHECK = 10,
       MAXCONN = 5,
       
       CONNREPORT=1,
       GENREPORT=2,
       TIMEMAT=MI.1.4,
       DISTMAT=MI.1.2,
       AUTOMATCH=T      ; T=original logic, F=Enhanced logic

  ENDPROCESS

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\applications\CNMAT00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\CNMAT00A1.PRN" MSG='Peak walk, pnr, knr connectors'
FILEI LOOKUPI[3] = "{SCENARIO_DIR}\output\STATDATA_{alt}{year}.DBF"
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\output\NODES.CSV"
FILEI LOOKUPI[2] = "{CATALOG_DIR}\parameters\TRN_COEFFICIENTS.DBF"
FILEI RECI = "{SCENARIO_DIR}\output\NTLEGPK_{YEAR}{ALT}.NTL"

FILEO PRINTO[3] = "{SCENARIO_DIR}\output\NTLEG3PK_{alt}{year}.NTL"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\NTLEG2PK_{alt}{year}.NTL"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\NTLEG1PK_TEM.NTL"
FILEO PRINTO[4] = "{SCENARIO_DIR}\output\NTLEG11PK_{alt}{year}.NTL"
FILEO PRINTO[5] = "{SCENARIO_DIR}\output\NTLEG12PK_{alt}{year}.NTL"

; print all removed NTLEGS
s1=strpos('NT',reci)
s2=strpos('LEG',reci)
s3=strpos('MODE',reci)
s4=strpos('COST',reci)
s5=strpos('DIST',reci)
s6=strpos('ONEWAY',reci)
s7=strpos('XN',reci)

; get the origin and destination zone
s8=(s3-s2)
leg1=substr(reci,s2,s8)
s9=strpos('=',leg1)
s10=strpos('-',leg1)
s11=(s9+1)
s12=(s10-1)
s13=(s10+1)
zonei=val(substr(leg1,s11,s12))
zonej=val(substr(leg1,s13,strlen(leg1)))

; get the mode number
s14=(s4-s3)
mode1=substr(reci,s3,s14)
s15=strpos('=',mode1)
s16=(s15+1)
mode=val(substr(mode1,s16,strlen(mode1)))

; get the time on the connector (cost field in the NT leg file)
s17=(s5-s4)
time1=substr(reci,s4,s17)
s18=strpos('=',time1)
s19=(s18+1)
time=val(substr(time1,s19,strlen(time1)))

; get the distance
s20=(s6-s5)
dist1=substr(reci,s5,s20)
s21=strpos('=',dist1)
s22=(s21+1)
dist=val(substr(dist1,s22,strlen(dist1)))

; get the rest of the string
s23=substr(reci,s6,strlen(reci))


; ############# check for error in time field #################
if (time > 999)
 time=999
 print list='*****Error in the time field, Time exceeds 999 min *****', zonei(5.0),'-',zonej(5.0),mode(3.0)
endif
;##############################################################

; LOOKUP for coefficient file
LOOKUP, NAME=COEFF, LOOKUP[1]=1, RESULT=2,FAIL=0,0,0,LIST=Y,INTERPOLATE=N,LOOKUPI=2
ovtfactor =COEFF(1,3)/COEFF(1,1)      ; out-of-vehicle time factor (OVT time and Wait factor)
valtime   =0.6*COEFF(1,1)/COEFF(1,4)  ; value of time (in $/hr)
aatfactor =COEFF(1,5)/COEFF(1,1)      ; drive access to transit time factor

if (i==1 && _ctr==0)
  PRINT LIST=";;<<PT>>;;", PRINTO=1
  PRINT LIST=";;<<PT>>;;", PRINTO=2
  PRINT LIST=";;<<PT>>;;", PRINTO=3
  _ctr = _ctr + 1
endif

if (mode=1) PRINT FORM=L, LIST="NT LEG=",zonei,"-",zonej," MODE=",mode," COST=",time(6.2L)," DIST=",dist(6.2L)," ",s23,PRINTO=1
if (mode=2) PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(6.2)," DIST=",dist(5.2)," ONEWAY=T",PRINTO=2
if (mode=3) PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(6.2)," DIST=",dist(5.2)," ONEWAY=T",PRINTO=3
if (mode=11) PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(6.2)," DIST=",dist(5.2),PRINTO=4
if (mode=12) PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(6.2)," DIST=",dist(5.2),PRINTO=5

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\applications\CNMAT00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\CNMAT00B.PRN" MSG='OffPeak walk, pnr, knr connectors'

FILEI RECI = "{SCENARIO_DIR}\output\NTLEGOP_{YEAR}{ALT}.NTL"
FILEO PRINTO[3] = "{SCENARIO_DIR}\output\NTLEG3OP_{alt}{year}.NTL"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\NTLEG2OP_{alt}{year}.NTL"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\NTLEG1OP_TEM.NTL"

FILEI LOOKUPI[3] = "{SCENARIO_DIR}\output\STATDATA_{alt}{year}.DBF"
FILEI LOOKUPI[2] = "{CATALOG_DIR}\parameters\TRN_COEFFICIENTS.DBF"
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\output\NODES.CSV"
FILEO PRINTO[5] = "{Scenario_Dir}\output\NTLEG12OP_{alt}{year}.NTL"
FILEO PRINTO[4] = "{Scenario_Dir}\output\NTLEG11OP_{alt}{year}.NTL"

s1=strpos('NT',reci)
s2=strpos('LEG',reci)
s3=strpos('MODE',reci)
s4=strpos('COST',reci)
s5=strpos('DIST',reci)
s6=strpos('ONEWAY',reci)
s7=strpos('XN',reci)

; get the origin and destination zone
s8=(s3-s2)
leg1=substr(reci,s2,s8)
s9=strpos('=',leg1)
s10=strpos('-',leg1)
s11=(s9+1)
s12=(s10-1)
s13=(s10+1)
zonei=val(substr(leg1,s11,s12))
zonej=val(substr(leg1,s13,strlen(leg1)))

; get the mode number
s14=(s4-s3)
mode1=substr(reci,s3,s14)
s15=strpos('=',mode1)
s16=(s15+1)
mode=val(substr(mode1,s16,strlen(mode1)))

; get the time on the connector (cost field in the NT leg file)
s17=(s5-s4)
time1=substr(reci,s4,s17)
s18=strpos('=',time1)
s19=(s18+1)
time=val(substr(time1,s19,strlen(time1)))

; get the distance
s20=(s6-s5)
dist1=substr(reci,s5,s20)
s21=strpos('=',dist1)
s22=(s21+1)
dist=val(substr(dist1,s22,strlen(dist1)))

; get the rest of the string
s23=substr(reci,s6,strlen(reci))

; ############# check for error in time field #################
if (time > 999)
 time=999
 print list='*****Error in the time field, Time exceeds 999 min *****', zonei(5.0),'-',zonej(5.0),mode(3.0)
endif
;##############################################################

; LOOKUP for coefficient file
LOOKUP, NAME=COEFF, LOOKUP[1]=1, RESULT=2,FAIL=0,0,0,LIST=Y,INTERPOLATE=N,LOOKUPI=2
ovtfactor =COEFF(1,3)/COEFF(1,1)     ; out-of-vehicle time factor (OVT time and Wait factor)
valtime   =0.6*COEFF(1,1)/COEFF(1,4)  ; value of time (in $/hr)
aatfactor =COEFF(1,5)/COEFF(1,1)     ; drive access to transit time factor

if (i==1 && _ctr==0)
  PRINT LIST=";;<<PT>>;;", PRINTO=1
  PRINT LIST=";;<<PT>>;;", PRINTO=2
  PRINT LIST=";;<<PT>>;;", PRINTO=3
  _ctr = _ctr + 1
endif

if (mode=1) PRINT FORM=L, LIST="NT LEG=",zonei,"-",zonej," MODE=",mode," COST=",time(6.2L)," DIST=",dist(6.2L)," ",s23,PRINTO=1
if (mode=2) PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(6.2)," DIST=",dist(5.2)," ONEWAY=T",PRINTO=2
if (mode=3) PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(6.2)," DIST=",dist(5.2)," ONEWAY=T",PRINTO=3
if (mode=11) PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(6.2)," DIST=",dist(5.2),PRINTO=4
if (mode=12) PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(6.2)," DIST=",dist(5.2),PRINTO=5

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\RWMAT00D.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\RWMAT00A.PRN" MSG='Connector Information for Peak'
FILEO RECO[1] = "{SCENARIO_DIR}\output\PKZONECONN_TEM.DBF",
FIELDS =zonea,conn_ctr,mindist,mincost,cenflag
;FIELDS =zonea(5.0),conn_ctr(3.0),mindist(5.2),mincost(5.2),cenflag(1.0)

FILEI RECI = "{SCENARIO_DIR}\output\NTLEG1PK_TEM.NTL"

s1=strpos('NT',reci)
s2=strpos('LEG',reci)
s3=strpos('MODE',reci)
s4=strpos('COST',reci)
s5=strpos('DIST',reci)
s6=strpos('ONEWAY',reci)
s7=strpos('XN',reci)

; get the origin and destination zone
s8=(s3-s2)
leg1=substr(reci,s2,s8)
s9=strpos('=',leg1)
s10=strpos('-',leg1)
s11=(s9+1)
s12=(s10-1)
s13=(s10+1)
zonei=val(substr(leg1,s11,s12))
zonej=val(substr(leg1,s13,strlen(leg1)))

; get the mode number
s14=(s4-s3)
mode1=substr(reci,s3,s14)
s15=strpos('=',mode1)
s16=(s15+1)
mode=val(substr(mode1,s16,strlen(mode1)))

; get the time on the connector (cost field in the NT leg file)
s17=(s5-s4)
time1=substr(reci,s4,s17)
s18=strpos('=',time1)
s19=(s18+1)
time=val(substr(time1,s19,strlen(time1)))

; get the distance
s20=(s6-s5)
dist1=substr(reci,s5,s20)
s21=strpos('=',dist1)
s22=(s21+1)
dist=val(substr(dist1,s22,strlen(dist1)))

; get the rest of the string
s23=substr(reci,s6,strlen(reci))

; Get information (# connectors,mindist,centroid stop(?)) about walk access connectors

if (mode==1 && zonei<{ZONESA})     ; mode = walk & Anode less the Number of Zones
 if (_ctrwalk==1)
   zonea=zonei
   conn_ctr=conn_ctr+1
   mindist=dist
   mincost=time
   if (s7==0) cenflag=1            ; Check for stop at centroid Connector
 endif

 if (_ctrwalk >1 && zonei==zonea)
   conn_ctr=conn_ctr+1            ; Number of walk access connectors for a zone
   if (s7==0) cenflag=1
   if (dist<mindist)
       mindist=dist               ; Minimum length of the connector
       mincost=time
   endif
 endif

 if (_ctrwalk>1 && zonei<>zonea)
   WRITE RECO=1                   ; Output # connectors, min.length & Stop flag for centroid connectors
   zonea=zonei
   conn_ctr=1
   mindist=dist
   mincost=time
   cenflag=0
  if (s7==0) cenflag=1
 endif
  _ctrwalk=_ctrwalk + 1
endif

if (i==0)
 WRITE RECO=1                     ; output the information for the last centroid connector
endif

if (i==1 && _ctrwalk==0)
  _ctrwalk=_ctrwalk + 1
endif

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\RWMAT00H.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\RWMAT00C.PRN" MSG='Revise Peak Walk Access Connectors'
FILEO PRINTO[3] = "{SCENARIO_DIR}\output\NTLEG1PK_DEL.NTL"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PCWPK_TEM.DAT"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\NTLEG1PK_{alt}{year}.NTL"
FILEI RECI = "{SCENARIO_DIR}\OUTPUT\NTLEG1PK_TEM.NTL"
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\input\pcwalk_{year}{alt}.dat"
FILEI LOOKUPI[2] = "{SCENARIO_DIR}\output\PKZONECONN_TEM.DBF"

avgwalkc=({AVGWALK}/{AVGWLKSPD})*60   ;average walk time (minutes)

if (_ctr>0)
 s1=strpos('NT',reci)
 s2=strpos('LEG',reci)
 s3=strpos('MODE',reci)
 s4=strpos('COST',reci)
 s5=strpos('DIST',reci)
 s6=strpos('ONEWAY',reci)
 s7=strpos('XN',reci)

 ; get the origin and destination zone
 s8=(s3-s2)
 leg1=substr(reci,s2,s8)
 s9=strpos('=',leg1)
 s10=strpos('-',leg1)
 s11=(s9+1)
 s12=(s10-1)
 s13=(s10+1)
 zonei=val(substr(leg1,s11,s12))
 zonej=val(substr(leg1,s13,strlen(leg1)))

 if (tempzone <> zonei )
  new_zone=1
 elseif (tempzone == zonei)
  new_zone=0
 endif

 ; get the mode number
 s14=(s4-s3)
 mode1=substr(reci,s3,s14)
 s15=strpos('=',mode1)
 s16=(s15+1)
 mode=val(substr(mode1,s16,strlen(mode1)))

 ; get the time on the connector (cost field in the NT leg file)
 s17=(s5-s4)
 time1=substr(reci,s4,s17)
 s18=strpos('=',time1)
 s19=(s18+1)
 time=val(substr(time1,s19,strlen(time1)))

 ; get the distance
 s20=(s6-s5)
 dist1=substr(reci,s5,s20)
 s21=strpos('=',dist1)
 s22=(s21+1)
 dist=val(substr(dist1,s22,strlen(dist1)))

 ; get the rest of the string
 s23=substr(reci,s6,strlen(reci))
 s24=strpos('=',s23)
 s25=substr(reci,s6,s24+1)

 if (zonei<{ZONESA})
  zone = zonei                  ; Check if Anode is the zone number
 elseif (zonei>{ZONESA})
  zone=zonej
 endif

 ;Lookup for pcwalk file
 LOOKUP LOOKUPI=1, NAME=PCWALK, LOOKUP[1]=1, RESULT=2,LOOKUP[2]=1, RESULT=3,LOOKUP[3]=1, RESULT=4,LOOKUP[4]=1, RESULT=5,
        INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0

        pkprod=PCWALK(1,zone)
        pkattr=PCWALK(2,zone)
        opprod=PCWALK(3,zone)              ; Lookup for PCW information
        opattr=PCWALK(4,zone)

 ;Lookup for connectors
 LOOKUP LOOKUPI=2, NAME=GETCONNECTORS, LOOKUP[1]=1, RESULT=2,LOOKUP[2]=1, RESULT=3,LOOKUP[3]=1, RESULT=4,LOOKUP[4]=1, RESULT=5,INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0

        conn=GETCONNECTORS(1,zone)
        mindist=GETCONNECTORS(2,zone)    ; Lookup for centroid connector information
        mincost=GETCONNECTORS(3,zone)
        cenflag=GETCONNECTORS(4,zone)

 ; Assigning Rule values (rules refer to the rule numbers used in the REWALK documentation)
 if (cenflag=0 && pkprod<95) rule = 2                                ; No Transit Stop at centroid connector and PCW<95%
 if (cenflag=0 && pkprod>=95 && mindist<{AVGWALK}) rule = 3          ; No Transit Stop at centroid connector & PCW>95% & shortest conn.length<AVGWALK
 if (cenflag=0 && pkprod>=95 && mindist>={AVGWALK}) rule = 4         ; No Transit Stop at centroid connector & PCW>95% & shortest conn.length>=AVGWALK
 if (cenflag=1 && pkprod=100) rule = 5                               ; Transit Stop at centroid connector & PCW =100%
 if (cenflag=1 && pkprod>={MINPCW} && pkprod<100) rule = 6           ; Transit Stop at centroid connector & MinPCW<=PCW<100%
 if (cenflag=1 && pkprod<{MINPCW}) rule = 7                          ; Transit Stop at centroid connector & PCW<MinPCW

 ;Rules 3,5: No changes to walk access connectors & PCW
 if (rule=3,5)
   PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(5.2)," DIST=",dist(5.2)," ",s25,PRINTO=1
   if (zonei<{ZONESA} && new_zone=1)
    PRINT LIST= zone(5.0),pkprod(5.0),pkattr(5.0),opprod(5.0),opattr(5.0),rule(3.0), PRINTO=2
    tempzone=zonei
   endif
 endif

 ;Rules 2,4,7: Delete walk access connectors and reset PCW =0
 if(rule=2,4,7)
   pkprod=0
   pkattr=0
   PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(5.2)," DIST=",dist(5.2)," ",s23,PRINTO=3
   if (zonei<{ZONESA} && new_zone=1)
    PRINT LIST= zone(5.0),pkprod(5.0),pkattr(5.0),opprod(5.0),opattr(5.0),rule(3.0), PRINTO=2
    tempzone=zonei
   endif
 endif

 ;Rule 6: No changes to PCW, adjust walk access connector dist & times
 if (rule=6)
  if (mindist>{AVGWALK})
   dist_delta =(mindist - {AVGWALK})       ;if minimum connector length > AVGWALK
   time_delta =(mincost-avgwalkc)          ;set minimum distance & time to avgwalk & avgwalkc
   dist=(dist-dist_delta)                  ;and adjust the rest of the connectors by the same delta's
   time=(time-time_delta)
  endif
   PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(5.2)," DIST=",dist(5.2)," ",s25,PRINTO=1
  if (zonei<{ZONESA} && new_zone=1)
    PRINT LIST= zone(5.0),pkprod(5.0),pkattr(5.0),opprod(5.0),opattr(5.0),rule(3.0), PRINTO=2
   tempzone=zonei
  endif
 endif

endif

if (i==1 && _ctr==0)
  PRINT LIST=";;<<PT>>;;", PRINTO=1
  tempzone=0
endif

_ctr = _ctr + 1

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\RWMAT00G.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\RWMAT00B.PRN" MSG='Connector Information for Off-Peak'
FILEO RECO[1] = "{SCENARIO_DIR}\output\OPZONECONN_TEM.DBF",
FIELDS =zonea,conn_ctr,mindist,mincost,cenflag

;FIELDS =zonea(5.0),conn_ctr(3.0),mindist(5.2),mincost(5.2),cenflag(1.0)
FILEI RECI = "{SCENARIO_DIR}\output\NTLEG1OP_TEM.NTL"

s1=strpos('NT',reci)
s2=strpos('LEG',reci)
s3=strpos('MODE',reci)
s4=strpos('COST',reci)
s5=strpos('DIST',reci)
s6=strpos('ONEWAY',reci)
s7=strpos('XN',reci)

; get the origin and destination zone
s8=(s3-s2)
leg1=substr(reci,s2,s8)
s9=strpos('=',leg1)
s10=strpos('-',leg1)
s11=(s9+1)
s12=(s10-1)
s13=(s10+1)
zonei=val(substr(leg1,s11,s12))
zonej=val(substr(leg1,s13,strlen(leg1)))

; get the mode number
s14=(s4-s3)
mode1=substr(reci,s3,s14)
s15=strpos('=',mode1)
s16=(s15+1)
mode=val(substr(mode1,s16,strlen(mode1)))

; get the time on the connector (cost field in the NT leg file)
s17=(s5-s4)
time1=substr(reci,s4,s17)
s18=strpos('=',time1)
s19=(s18+1)
time=val(substr(time1,s19,strlen(time1)))

; get the distance
s20=(s6-s5)
dist1=substr(reci,s5,s20)
s21=strpos('=',dist1)
s22=(s21+1)
dist=val(substr(dist1,s22,strlen(dist1)))

; get the rest of the string
s23=substr(reci,s6,strlen(reci))

; Get information (# connectors,mindist,centroid stop(?)) about walk access connectors

if (mode==1 && zonei<{ZONESA})        ; mode = walk & Anode less the Number of Zones
 if (_ctrwalk==1)
   zonea=zonei
   conn_ctr=conn_ctr+1
   mindist=dist
   mincost=time
   if (s7==0) cenflag=1                        ; Check for stop at centroid Connector
 endif

 if (_ctrwalk >1 && zonei==zonea)
   conn_ctr=conn_ctr+1         ; Number of walk access connectors for a zone
   if (s7==0) cenflag=1
   if (dist<mindist)
       mindist=dist               ; Minimum length of the connector
       mincost=time
   endif
 endif

 if (_ctrwalk>1 && zonei<>zonea)
   WRITE RECO=1                   ; Output # connectors, min.length & Stop flag for centroid connectors
   zonea=zonei
   conn_ctr=1
   mindist=dist
   mincost=time
   cenflag=0
  if (s7==0) cenflag=1
 endif
  _ctrwalk=_ctrwalk + 1
endif

if (i==0)
 WRITE RECO=1                 ; output the information for the last centroid connector
endif

if (i==1 && _ctrwalk==0)
  _ctrwalk=_ctrwalk + 1
endif

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\RWMAT00I.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\RWMAT00E.PRN" MSG='Revise Off Peak Walk Access Connectors'
FILEO PRINTO[3] = "{SCENARIO_DIR}\output\NTLEG1OP_DEL.NTL"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PCWOP_TEM.DAT"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\NTLEG1OP_{alt}{year}.NTL"
FILEI RECI = "{SCENARIO_DIR}\OUTPUT\NTLEG1OP_TEM.NTL"
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\input\pcwalk_{year}{alt}.dat"
FILEI LOOKUPI[2] = "{SCENARIO_DIR}\output\OPZONECONN_TEM.DBF"

avgwalkc=({AVGWALK}/{AVGWLKSPD})*60

if (_ctr>0)
 s1=strpos('NT',reci)
 s2=strpos('LEG',reci)
 s3=strpos('MODE',reci)
 s4=strpos('COST',reci)
 s5=strpos('DIST',reci)
 s6=strpos('ONEWAY',reci)
 s7=strpos('XN',reci)

 ; get the origin and destination zone
 s8=(s3-s2)
 leg1=substr(reci,s2,s8)
 s9=strpos('=',leg1)
 s10=strpos('-',leg1)
 s11=(s9+1)
 s12=(s10-1)
 s13=(s10+1)
 zonei=val(substr(leg1,s11,s12))
 zonej=val(substr(leg1,s13,strlen(leg1)))

 if (tempzone <> zonei )
  new_zone=1
 elseif (tempzone == zonei)
 new_zone=0
 endif

 ; get the mode number
 s14=(s4-s3)
 mode1=substr(reci,s3,s14)
 s15=strpos('=',mode1)
 s16=(s15+1)
 mode=val(substr(mode1,s16,strlen(mode1)))

 ; get the time on the connector (cost field in the NT leg file)
 s17=(s5-s4)
 time1=substr(reci,s4,s17)
 s18=strpos('=',time1)
 s19=(s18+1)
 time=val(substr(time1,s19,strlen(time1)))

 ; get the distance
 s20=(s6-s5)
 dist1=substr(reci,s5,s20)
 s21=strpos('=',dist1)
 s22=(s21+1)
 dist=val(substr(dist1,s22,strlen(dist1)))

 ; get the rest of the string
 s23=substr(reci,s6,strlen(reci))
 s24=strpos('=',s23)
 s25=substr(reci,s6,s24+1)

 if (zonei<{ZONESA})
  zone = zonei                  ; Check if Anode is the zone number
 elseif (zonei>{ZONESA})
  zone=zonej
 endif

 ;Lookup for pcwalk file
 LOOKUP LOOKUPI=1, NAME=PCWALK, LOOKUP[1]=1, RESULT=2,LOOKUP[2]=1, RESULT=3,LOOKUP[3]=1, RESULT=4,LOOKUP[4]=1, RESULT=5,
        INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0

        pkprod=PCWALK(1,zone)
        pkattr=PCWALK(2,zone)
        opprod=PCWALK(3,zone)              ; Lookup for PCW information
        opattr=PCWALK(4,zone)

 ;Lookup for connectors
 LOOKUP LOOKUPI=2, NAME=GETCONNECTORS, LOOKUP[1]=1, RESULT=2,LOOKUP[2]=1, RESULT=3,LOOKUP[3]=1, RESULT=4,LOOKUP[4]=1, RESULT=5,INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0

        conn=GETCONNECTORS(1,zone)
        mindist=GETCONNECTORS(2,zone)    ; Lookup for centroid connector information
        mincost=GETCONNECTORS(3,zone)
        cenflag=GETCONNECTORS(4,zone)

 ; Assigning Rule values (rules refer to the rule numbers used in the REWALK documentation)
 if (cenflag=0 && opprod<95) rule = 2                                ; No Transit Stop at centroid connector and PCW<95%
 if (cenflag=0 && opprod>=95 && mindist<{AVGWALK}) rule = 3           ; No Transit Stop at centroid connector & PCW>95% & shortest conn.length<AVGWALK
 if (cenflag=0 && opprod>=95 && mindist>={AVGWALK}) rule = 4          ; No Transit Stop at centroid connector & PCW>95% & shortest conn.length>=AVGWALK
 if (cenflag=1 && opprod=100) rule = 5                               ; Transit Stop at centroid connector & PCW =100%
 if (cenflag=1 && opprod>={MINPCW} && opprod<100) rule = 6           ; Transit Stop at centroid connector & MinPCW<=PCW<100%
 if (cenflag=1 && opprod<{MINPCW}) rule = 7                          ; Transit Stop at centroid connector & PCW<MinPCW

 ;Rules 3,5: No changes to walk access connectors & PCW
 if (rule=3,5)
  PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(5.2)," DIST=",dist(5.2)," ",s25,PRINTO=1
  if (zonei<{ZONESA} && new_zone=1)
    PRINT LIST= zone(5.0),pkprod(5.0),pkattr(5.0),opprod(5.0),opattr(5.0),rule(3.0), PRINTO=2
    tempzone=zonei
  endif
 endif

 ;Rules 2,4,7: Delete walk access connectors and reset PCW =0
 if(rule=2,4,7)
  opprod=0
  opattr=0
  PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(5.2)," DIST=",dist(5.2)," ",s23,PRINTO=3
  if (zonei<{ZONESA} && new_zone=1)
   PRINT LIST= zone(5.0),pkprod(5.0),pkattr(5.0),opprod(5.0),opattr(5.0),rule(3.0), PRINTO=2
   tempzone=zonei
  endif
 endif

 ;Rule 6: No changes to PCW, adjust walk access connector dist & times
 if (rule=6)
  if (mindist>{AVGWALK})
   dist_delta =(mindist - {AVGWALK})        ;if minimum connector length > AVGWALK
   time_delta =(mincost-avgwalkc)         ;set minimum distance & time to avgwalk & avgwalkc
   dist=(dist-dist_delta)                 ;and adjust the rest of the connectors by the same delta's
   time=(time-time_delta)
  endif
  PRINT LIST="NT LEG=",zonei(5.0),"-",zonej(5.0)," MODE=",mode(2.0)," COST=",time(5.2)," DIST=",dist(5.2)," ",s25,PRINTO=1
  if (zonei<{ZONESA} && new_zone=1)
   PRINT LIST= zone(5.0),pkprod(5.0),pkattr(5.0),opprod(5.0),opattr(5.0),rule(3.0), PRINTO=2
   tempzone=zonei
  endif
 endif

endif

if (i==1 && _ctr==0)
  PRINT LIST=";;<<PT>>;;", PRINTO=1
  tempzone=0
endif

_ctr = _ctr + 1

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\RWMAT00J.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\RWMAT00F.PRN" MSG='Revise PCWALK'
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PCWCHANGE_TEM.DAT"
FILEI ZDATI[1] = "{SCENARIO_DIR}\input\PCWALK_{Year}{Alt}.DAT",
  z=#1,pkprod=#2,pkattr=#3,opprod=#4,opattr=#5
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\PCWALK_{alt}{year}.DAT"
FILEI LOOKUPI[2] = "{SCENARIO_DIR}\output\PCWOP_TEM.DAT"
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\output\PCWPK_TEM.DAT"

zones={ZONESA}    ; Number of zones

;Peak period temp pcwalk file
LOOKUP LOOKUPI=1, NAME=PKPCWALK, LOOKUP[1]=1, RESULT=1,LOOKUP[2]=1, RESULT=2,LOOKUP[3]=1, RESULT=3,LOOKUP[4]=1, RESULT=6,
        INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0
        pk_chkzone=PKPCWALK(1,z)         ; Check for existience of zone in peak walk access connectors file(centroid connector) 
        pk_rule=PKPCWALK(4,z,1)
;Off-Peak period temp pcwalk file
LOOKUP LOOKUPI=2, NAME=OPPCWALK, LOOKUP[1]=1, RESULT=1,LOOKUP[2]=1, RESULT=4,LOOKUP[3]=1, RESULT=5,LOOKUP[4]=1, RESULT=6,
        INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0
        op_chkzone=OPPCWALK(1,z)        ; Check for existience of zone in off peak walk access connectors file(centroid connector)
        op_rule=OPPCWALK(4,z,1)
;;Peak period modifications
if (pk_chkzone>0)
  zone =z
  pkp=PKPCWALK(2,z)
  pka=PKPCWALK(3,z)                    ; revised peak PCW's 
  elseif (pk_chkzone==0)
  zone =z
  pkp=0
  pka=0
endif

;;Off-peak period modifications
if (op_chkzone>0)
  zone =z
  opp=OPPCWALK(2,z)
  opa=OPPCWALK(3,z)                   ;revised off peak PCW's 
elseif (op_chkzone==0)
  zone =z
  opp=0
  opa=0
endif

PRINT LIST= zone(5.0),pkp(6.0),pka(6.0),opp(6.0),opa(6.0), PRINTO=1   ; Output PCW with PCW's updated for peak & off peak 

;;Output zones whose PCW were revised
if (_ctr=0) 
  PRINT  LIST =';Percent Walk updated for the zones below based on the following rules:\n\n',
              ';Rule 1 : No Walk Access Connectors to the Zone(PCW=0)\n',
              ';Rule 2 : No Transit Stop at centroid connector and PCW<95% (PCW=0)\n',
              ';Rule 3 : No Transit Stop at centroid connector & PCW>95% & shortest conn.length<AVGWALK (No Change in PCW)\n',
              ';Rule 4 : No Transit Stop at centroid connector & PCW>95% & shortest conn.length>=AVGWALK (PCW=0)\n',
              ';Rule 5 : Transit Stop at centroid connector & PCW =100% (No Change in PCW)\n',
              ';Rule 6 : Transit Stop at centroid connector & MinPCW<=PCW<100% (No Change in PCW)\n',
              ';Rule 7 : Transit Stop at centroid connector & PCW<MinPCW (PCW=0)\n',PRINTO=2
  PRINT LIST = 'ZONE   ','REVISED_PK_PROD  ','ORIGINAL_PK_PROD  ','PK_RULE  ','REVISED_OP_PROD  ','ORIGINAL_OP_PROD  ','OP_RULE',PRINTO=2
endif

if ( ((pk_rule=1,2,4,7) && pkprod>0) || ((op_rule=1,2,4,7) && opprod>0) ) PRINT LIST = zone(5.0),'         ',pkp(6.0),
  '            ',pkprod(6.0),'       ',pk_rule(3.0),'          ',opp(6.0),'            ',opprod(6.0),'       ',op_rule(3.0),PRINTO=2
    

_ctr=_ctr+1 

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\CNMAT00D.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\CNMAT00B1.PRN" MSG='Modify TROUTE file to remove DELAY (for AUTOCON program)'
FILEI RECI = "{SCENARIO_DIR}\output\TROUTE_MOD.LIN",
MAXSCAN=120
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\troute_modified.lin"

PAR MAXSTRING=200

;what follows is a modified version of the original script to be able to run autocon using Voyager 5.1 or above
;this modified version was provided by CITILABS Heejoo Ham on March 30, 2011 to PBS&J (an Atkins Company)
;further modified by Atkins to temporarily delete the headway[2] variable so that autocon can run

linestr=reci

pos_delay=strpos('DELAY=',linestr)                        ; check position of "DELAY="
pos_delay_c=strpos('DELAY_C=',linestr)                    ; check position of "DELAY_C="
pos_n=strpos('N=',linestr)                                ; check position of "N="
pos_head=strpos('HEADWAY[2]=',linestr)                    ; check position of "HEADWAY[2]="
linestrlen=strlen(linestr)                                ; length of current record string

pos_linename=strpos('LINE ',linestr)                      ; check position of "LINE NAME"
if (pos_linename>0)
   _curline=1                                             ; flag for beginning current transit line record
endif

if (pos_delay>0 || pos_delay_c>0 || pos_n>0 || pos_head>0)
   rev_linestr=linestr                                    ; revised line string record
   
   if (pos_head>0)
      loop _ii=1,500
         pos_a=strpos('HEADWAY[2]=',rev_linestr)
         if (pos_a>0)
            rev_linestr=deletestr(rev_linestr,pos_a,13)    ; delete "HEADWAY[2]=##"
         else
            break
         endif
      endloop
   endif


   if (pos_delay>0)
      loop _ii=1,500
         pos_a=strpos('DELAY=',rev_linestr)
         if (pos_a>0)
            rev_linestr=deletestr(rev_linestr,pos_a,7)    ; delete "DELAY=#"
         else
            break
         endif
      endloop
   endif
   if (pos_delay_c>0)
      loop _ii=1,500
         pos_b=strpos('DELAY_C=',rev_linestr)
         if (pos_b>0)
            rev_linestr=deletestr(rev_linestr,pos_b,9)    ; delete "DELAY_C=#"
         else
            break
         endif
      endloop
   endif
   if (pos_n>0)
      pos_loc=1
      loop _ii=1,500
         pos_c=strposex('N=',rev_linestr,pos_loc)
         if (pos_c>0 & _curline=1)                        ; skip for the first keyword with "N="
            pos_loc=pos_c+2                               ; replace the first column position after "N="
            _curline=0
            continue
         elseif (pos_c>0 & _curline=0)                    ; remove all "N=" if it is not the first one
            rev_linestr=deletestr(rev_linestr,pos_c,2)
         else
            break
         endif
      endloop
   endif
   print list=rev_linestr,printo=1                        ; write the modified current record
   rev_linestr=''
else                                                      ; if the current line record doesn't
   print list=linestr,printo=1                            ; include any designated keywords
endif


;==========================================================================================================
;What follows is the original script that worked fine with Voyager 5.0, but NOT with VOYAGER 5.1 and above

/*
linestr=reci

; ############## Check for 'DELAY' keyword in the line file
pos_delay=strpos('DELAY=',linestr)
linestrlen=strlen(linestr)
pos_delay_c=strpos('DELAY_C=',linestr)

if (pos_delay_c > 0) goto skip

if (deleten==1)  ; takes care of situations where 'N=' spills into another line
  pos_n_nextline=strpos('N=',linestr)
  s91=substr(linestr,1,pos_n_nextline)
  s92=substr(linestr,pos_n_nextline+2,linestrlen)
  print list='       ',s92,printo=1
  deleten=0
  goto skip
endif

if (deleten1==1)  ; takes care of situations where 'N=' spills into another line
  pos_n_nextline1=strpos('N=',linestr)
  s93=substr(linestr,1,pos_n_nextline1)
  s94=substr(linestr,pos_n_nextline1+2,linestrlen)
  print list='       ',s94,printo=1
  deleten1=0
  goto skip2
endif

if ((pos_delay > 0) & (deleten==0))
; print list=linestr,printo=1
 s1=substr(linestr,1,pos_delay-1)   ;yes
 s2=substr(linestr,pos_delay+6,linestrlen)
; print list='*',s2,'*',printo=1
 pos_n=strpos('N=',s2)
 if (pos_n=0)  ; 'N=' is on the next line
  deleten=1
  s3=' ,'
 else
  deleten=0
  s3=substr(s2,pos_n+2,strlen(s2))
 endif
 print list=s1,s3,printo=1
 s1=' '
 s2=' '
 s3=' '
else
 deleten=0
 print list=linestr,printo=1
endif

:skip

; ############### Also check for 'DELAY_C' keyword

if ((pos_delay_c > 0) & (deleten1==0))
; print list=linestr,printo=1
 s11=substr(linestr,1,pos_delay_c-1)
 s21=substr(linestr,pos_delay_c+8,linestrlen)
; print list='*',s21,'*',printo=1
 pos_n=strpos('N=',s21)
 if (pos_n=0)  ; 'N=' is on the next line
  deleten1=1
  s31=' ,'
 else
  deleten1=0
  s31=substr(s21,pos_n+2,strlen(s21))
 endif
 print list=s11,s31,printo=1
 s11=' '
 s21=' '
 s31=' '
else
 deleten1=0
; print list=linestr,printo=1
endif

:skip2
*/
;====================================================================================================
;end of the original script for Voyager 5.0

ENDRUN


; Script for program PUBLIC TRANSPORT in file "C:\NERPM43\applications\CNPTR00D.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=PUBLIC TRANSPORT PRNFILE="{SCENARIO_DIR}\output\CNPTR00C.PRN" MSG='All walk skim'
FILEI NETI = "{SCENARIO_DIR}\output\PRELOAD_PT.NET"
FILEO ROUTEO[1] = "{SCENARIO_DIR}\output\AllWalk_{alt}{Year}.RTE"
FILEO MATO[1] = "{SCENARIO_DIR}\output\AllWalk_{alt}{Year}.MAT",
 MO=1,DEC=2,NAME=ALLWALK
FILEO REPORTO = "{SCENARIO_DIR}\output\CNPTR00B.RPT"
FILEI FACTORI[1] = "{SCENARIO_DIR}\output\WalkCOMRAIL.FAC"
FILEI FAREI = "{SCENARIO_DIR}\input\TFARES_{year}{alt}.FAR"
FILEI SYSTEMI = "{CATALOG_DIR}\parameters\SYSTEM.PTS"
FILEI LINEI[1] = "{SCENARIO_DIR}\input\TROUTE_{year}{alt}.LIN"

; OVERALL PARAMETERS OF RUN
PARAMETERS USERCLASSES=1,FARE=N, MAPSCALE=5280, HDWAYPERIOD=1,
           NOROUTEERRS=999999, NOROUTEMSGS=999999,
           TRANTIME=LW.TRANTIME,
           TRANTIME[21]=LI.M21TIMEPK,
           TRANTIME[22]=LI.M22TIMEPK,
           TRANTIME[23]=LI.M23TIMEPK,
           TRANTIME[24]=LI.M24TIMEPK

REPORT LINES=T
PROCESS PHASE=LINKREAD
 LW.TRANTIME=LI.M21TIMEPK
 LW.WALKTIME=LI.WALKTIME
 LW.WALKDISTANCE=LI.DISTANCE
 LW.DISTANCE=LI.DISTANCE
ENDPROCESS

PROCESS PHASE=DATAPREP

  ; 4 - ALL-WALKS
  GENERATE, COST=(LW.DISTANCE),EXTRACTCOST=(LW.WALKTIME),MAXCOST=200*7,LIST=N,EXCLUDELINK=(LI.FACILITY_TYPE=10-19,69,70-99),
            NTLEGMODE=4,MAXNTLEGS=200*{MAXWLKACCLNKS},DIRECTION=3,ONEWAY=F,FROMNODE=1-{ZONESI},TONODE=1-{ZONESI}

ENDPROCESS


PROCESS PHASE=SKIMIJ
 IF (TIMEA(0,4) > 0)
  MW[1]=TIMEA(0,4)     ; all walk time
 ELSE
  MW[1]=9999.99
 ENDIF
ENDPROCESS

ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

; DistributeMULTISTEP ProcessID="NERPM4Dist", ProcessNum=1
; End of PILOT Script

LOOP PER = 1, 2, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
IF (PER == 1)
    Period='PK'
    HWYNET = 'PRELOAD_PT'
ELSEIF (PER == 2)
    Period='OP'
    HWYNET = 'UNLOADED_PT'
ENDIF

; End of PILOT Script

  LOOP ACCESS = 1, 3, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


IF (ACCESS == 1)
    ACCESS_NAME='Walk'
ELSEIF (ACCESS == 2)
    ACCESS_NAME='PNR'
ELSEIF (ACCESS == 3)
    ACCESS_NAME='KNR'
ENDIF
; End of PILOT Script

; Script for program PUBLIC TRANSPORT in file "C:\NERPM43\APPLICATIONS\TNPTR00W.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=PUBLIC TRANSPORT PRNFILE="{SCENARIO_DIR}\output\TNPTR00A11.PRN" MSG='Peak transit paths and skims'
FILEI NTLEGI[1] = "{SCENARIO_DIR}\output\NTLEG1@Period@_{alt}{year}.NTL"
FILEO REPORTO = "{SCENARIO_DIR}\output\TNPTR00B.PRN"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\trnskim_@period@_@access_NAME@.rpt"

 ; OUTPUT files
FILEO NTLEGO = "{SCENARIO_DIR}\output\@PERIOD@NTL.NTL"
FILEO NETO = "{SCENARIO_DIR}\output\Transit@PERIOD@_@access_name@.NET"

FILEO MATO[1] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_SKYWAY_@ACCESS_NAME@_{alt}{year}.MAT",
MO=1-15,DEC=15*2 , NAME = WalkTime,DriveTime,XferTime,SkywayTime,LocalTime,ExpTime,BRTTime,CRailTime,OtherTime,ProjTime,NumXfers,InitWait,XferWait,Fare,TotalTime
FILEO MATO[2] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_LOCAL_@ACCESS_NAME@_{alt}{year}.MAT",
MO=1-15,DEC=15*2 , NAME = WalkTime,DriveTime,XferTime,SkywayTime,LocalTime,ExpTime,BRTTime,CRailTime,OtherTime,ProjTime,NumXfers,InitWait,XferWait,Fare,TotalTime
FILEO MATO[3] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_@ACCESS_NAME@_{alt}{year}.MAT",
MO=1-15,DEC=15*2 , NAME = WalkTime,DriveTime,XferTime,SkywayTime,LocalTime,ExpTime,BRTTime,CRailTime,OtherTime,ProjTime,NumXfers,InitWait,XferWait,Fare,TotalTime
FILEO MATO[4] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_@ACCESS_NAME@_{alt}{year}.MAT",
MO=1-15,DEC=15*2 , NAME = WalkTime,DriveTime,XferTime,SkywayTime,LocalTime,ExpTime,BRTTime,CRailTime,OtherTime,ProjTime,NumXfers,InitWait,XferWait,Fare,TotalTime
FILEO MATO[5] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_@ACCESS_NAME@_{alt}{year}.MAT",
MO=1-15,DEC=15*2 , NAME = WalkTime,DriveTime,XferTime,SkywayTime,LocalTime,ExpTime,BRTTime,CRailTime,OtherTime,ProjTime,NumXfers,InitWait,XferWait,Fare,TotalTime

FILEO ROUTEO[1] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_SKYWAY_@ACCESS_NAME@_{Alt}{year}.RTE",
  REPORTI={REPI}, REPORTJ={REPJ},TRACEI={REPI}, TRACEJ={REPJ} ;,I={REPI},J={REPJ}
FILEO ROUTEO[2] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_LOCAL_@ACCESS_NAME@_{Alt}{year}.RTE",
  REPORTI={REPI}, REPORTJ={REPJ},TRACEI={REPI}, TRACEJ={REPJ} ;,I={REPI},J={REPJ}
FILEO ROUTEO[3] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_EXPRESS_@ACCESS_NAME@_{Alt}{year}.RTE",
  REPORTI={REPI}, REPORTJ={REPJ},TRACEI={REPI}, TRACEJ={REPJ} ;,I={REPI},J={REPJ}
FILEO ROUTEO[4] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_BRTLRT_@ACCESS_NAME@_{Alt}{year}.RTE",
  REPORTI={REPI}, REPORTJ={REPJ},TRACEI={REPI}, TRACEJ={REPJ} ;,I={REPI},J={REPJ}
FILEO ROUTEO[5] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_COMRAIL_@ACCESS_NAME@_{Alt}{year}.RTE",
  REPORTI={REPI}, REPORTJ={REPJ},TRACEI={REPI}, TRACEJ={REPJ} ;,I={REPI},J={REPJ}

 ; Input files
FILEI FAREI = "{SCENARIO_DIR}\input\TFARES_{year}{alt}.FAR"
FILEI SYSTEMI = "{CATALOG_DIR}\parameters\SYSTEM.PTS"
FILEI LINEI[1] = "{SCENARIO_DIR}\input\TROUTE_{year}{alt}.LIN"
FILEI FACTORI[1] = "{SCENARIO_DIR}\output\@ACCESS_NAME@SKYWAY.FAC"
FILEI FACTORI[2] = "{SCENARIO_DIR}\output\@ACCESS_NAME@LOCAL.FAC"
FILEI FACTORI[3] = "{SCENARIO_DIR}\output\@ACCESS_NAME@EXPRESS.FAC"
FILEI FACTORI[4] = "{SCENARIO_DIR}\output\@ACCESS_NAME@BRTLRT.FAC"
FILEI FACTORI[5] = "{SCENARIO_DIR}\output\@ACCESS_NAME@COMRAIL.FAC"
FILEI NTLEGI[2] = "{SCENARIO_DIR}\output\NTLEG2@Period@_{alt}{year}.NTL"
FILEI NTLEGI[3] = "{SCENARIO_DIR}\output\NTLEG3@Period@_{alt}{year}.NTL"
FILEI NTLEGI[4] = "{SCENARIO_DIR}\output\NTLEG11@Period@_{alt}{year}.NTL"
FILEI NTLEGI[5] = "{SCENARIO_DIR}\output\NTLEG12@Period@_{alt}{year}.NTL"
FILEI NETI = "{SCENARIO_DIR}\output\@HWYNET@_Temp.NET"

zonemsg=50

; OVERALL PARAMETERS OF RUNPARAMETERS USERCLASSES=1-5,FARE=N, MAPSCALE=5280, HDWAYPERIOD=@PER@,
           NOROUTEERRS=999999, NOROUTEMSGS=999999,
           TRANTIME=LW.TRANTIME,
           TRANTIME[21]=LI.M21TIME@PERIOD@,
           TRANTIME[22]=LI.M22TIME@PERIOD@,
           TRANTIME[23]=LI.M23TIME@PERIOD@,
           TRANTIME[24]=LI.M24TIME@PERIOD@,
           TRANTIME[25]=LI.M25TIME@PERIOD@,
           TRANTIME[26]=LI.M26TIME@PERIOD@

;REPORT LINES=T
;REREPORT LINES=T,TRNLEGS3=T

PROCESS PHASE=LINKREAD
 LW.TRANTIME=LI.M21TIME@PERIOD@
 LW.WALKTIME=LI.WALKTIME
 LW.WALKDISTANCE=LI.DISTANCE
 LW.DISTANCE=LI.DISTANCE
ENDPROCESS

PROCESS PHASE=DATAPREP
    ; 1- Generate walk-access links
     GENERATE READNTLEGI=1
    ; 2- Generate PNR-access links
     GENERATE READNTLEGI=2
    ; 3- Generate KNR-access links
     GENERATE READNTLEGI=3
    ; 11- Generate fixed-guideway to bus links
     GENERATE READNTLEGI=4
    ; 12- Generate transfer links
     GENERATE READNTLEGI=5
ENDPROCESS

PROCESS PHASE=SKIMIJ
  ; SKYWAY 
  IF (USERCLASS==1)
      IF (TIMEA(0,23) > 0)                                     ; If Skyway path exists
       MW[1]=TIMEA(0,1)                                        ; Walk time
       MW[2]=TIMEA(0,2)+TIMEA(0,3)+TIMEA(0,6)                  ; Auto access time (PNR/KNR)
       MW[3]=TIMEA(0,11)+TIMEA(0,12)                           ; Transfer time
       MW[4]=TIMEA(0,23)                                       ; SKYWAY bus time
       MW[5]=TIMEA(0,21)                                       ; Local and express bus time
       MW[6]=TIMEA(0,22)                                       ; EXPRESS bus time
       MW[7]=TIMEA(0,24)+TIMEA(0,25)                           ; BRT, LRT time
       MW[8]=TIMEA(0,26)                                       ; Commuter Rail time
       MW[9]=TIMEA(0,27)                                       ; Project mode time
       MW[10]=0
       IF (BRDINGS(0,TMODES) > 0)
        MW[11]=BRDINGS(0,TMODES)-1                             ; Number of transfers
       ELSE
        MW[11]=0
       ENDIF
       MW[12]=IWAITA(0)                                        ; Initial wait time
       MW[13]=XWAITA(0)                                        ; Transfer wait time
       MW[14]=FAREA(0)*100                                     ; Fare matrix
       MW[15]=TIMEA(0,ALLMODES)                                ; Time on all modes
      ELSE
       MW[1]=0
       MW[2]=0
       MW[3]=0
       MW[4]=0
       MW[5]=0
       MW[6]=0
       MW[7]=0
       MW[8]=0
       MW[9]=0
       MW[10]=0
       MW[11]=0
       MW[12]=0
       MW[13]=0
       MW[14]=0
       MW[15]=0
      ENDIF
  
  ; LOCAL BUS path
   ELSEIF (USERCLASS=2)  
     IF (TIMEA(0,21) > 0)                                    ; If local bus path exists
       MW[1]=TIMEA(0,1)                                        ; Walk time
       MW[2]=TIMEA(0,2)+TIMEA(0,3)+TIMEA(0,6)                  ; Auto access time (PNR/KNR)
       MW[3]=TIMEA(0,11)+TIMEA(0,12)                           ; Transfer time
       MW[4]=TIMEA(0,23)                                       ; SKYWAY bus time
       MW[5]=TIMEA(0,21)                                       ; Local and express bus time
       MW[6]=TIMEA(0,22)                                       ; EXPRESS bus time
       MW[7]=TIMEA(0,24)+TIMEA(0,25)                           ; BRT, LRT time
       MW[8]=TIMEA(0,26)                                       ; Commuter Rail time
       MW[9]=TIMEA(0,27)                                       ; Project mode time
       MW[10]=0
       IF (BRDINGS(0,TMODES) > 0)
        MW[11]=BRDINGS(0,TMODES)-1                             ; Number of transfers
       ELSE
        MW[11]=0
       ENDIF
       MW[12]=IWAITA(0)                                        ; Initial wait time
       MW[13]=XWAITA(0)                                        ; Transfer wait time
       MW[14]=FAREA(0)*100                                     ; Fare matrix
       MW[15]=TIMEA(0,ALLMODES)                                ; Time on all modes
      ELSE
       MW[1]=0
       MW[2]=0
       MW[3]=0
       MW[4]=0
       MW[5]=0
       MW[6]=0
       MW[7]=0
       MW[8]=0
       MW[9]=0
       MW[10]=0
       MW[11]=0
       MW[12]=0
       MW[13]=0
       MW[14]=0
       MW[15]=0
      ENDIF
       
  ; EXPRESS BUS path
   ELSEIF (USERCLASS=3)  
     IF (TIMEA(0,22) > 0)                                    ; If express bus path exists
       MW[1]=TIMEA(0,1)                                        ; Walk time
       MW[2]=TIMEA(0,2)+TIMEA(0,3)+TIMEA(0,6)                  ; Auto access time (PNR/KNR)
       MW[3]=TIMEA(0,11)+TIMEA(0,12)                           ; Transfer time
       MW[4]=TIMEA(0,23)                                       ; SKYWAY bus time
       MW[5]=TIMEA(0,21)                                       ; Local and express bus time
       MW[6]=TIMEA(0,22)                                       ; EXPRESS bus time
       MW[7]=TIMEA(0,24)+TIMEA(0,25)                           ; BRT, LRT time
       MW[8]=TIMEA(0,26)                                       ; Commuter Rail time
       MW[9]=TIMEA(0,27)                                       ; Project mode time
       MW[10]=0
       IF (BRDINGS(0,TMODES) > 0)
        MW[11]=BRDINGS(0,TMODES)-1                             ; Number of transfers
       ELSE
        MW[11]=0
       ENDIF
       MW[12]=IWAITA(0)                                        ; Initial wait time
       MW[13]=XWAITA(0)                                        ; Transfer wait time
       MW[14]=FAREA(0)*100                                     ; Fare matrix
       MW[15]=TIMEA(0,ALLMODES)                                ; Time on all modes
      ELSE
       MW[1]=0
       MW[2]=0
       MW[3]=0
       MW[4]=0
       MW[5]=0
       MW[6]=0
       MW[7]=0
       MW[8]=0
       MW[9]=0
       MW[10]=0
       MW[11]=0
       MW[12]=0
       MW[13]=0
       MW[14]=0
       MW[15]=0
      ENDIF
     
  ; BRTLRT  path
   ELSEIF (USERCLASS=4)  
     IF (TIMEA(0,24) > 0)                       ; If BRT or LRT bus path exists
     ; IF ((TIMEA(0,24)+TIMEA(0,25)) > 0)                       ; If BRT or LRT bus path exists
       MW[1]=TIMEA(0,1)                                        ; Walk time
       MW[2]=TIMEA(0,2)+TIMEA(0,3)+TIMEA(0,6)                  ; Auto access time (PNR/KNR)
       MW[3]=TIMEA(0,11)+TIMEA(0,12)                           ; Transfer time
       MW[4]=TIMEA(0,23)                                       ; SKYWAY bus time
       MW[5]=TIMEA(0,21)                                       ; Local and express bus time
       MW[6]=TIMEA(0,22)                                       ; EXPRESS bus time
       MW[7]=TIMEA(0,24)+TIMEA(0,25)                           ; BRT, LRT time
       MW[8]=TIMEA(0,26)                                       ; Commuter Rail time
       MW[9]=TIMEA(0,27)                                       ; Project mode time
       MW[10]=0
       IF (BRDINGS(0,TMODES) > 0)
        MW[11]=BRDINGS(0,TMODES)-1                             ; Number of transfers
       ELSE
        MW[11]=0
       ENDIF
       MW[12]=IWAITA(0)                                        ; Initial wait time
       MW[13]=XWAITA(0)                                        ; Transfer wait time
       MW[14]=FAREA(0)*100                                     ; Fare matrix
       MW[15]=TIMEA(0,ALLMODES)                                ; Time on all modes
      ELSE
       MW[1]=0
       MW[2]=0
       MW[3]=0
       MW[4]=0
       MW[5]=0
       MW[6]=0
       MW[7]=0
       MW[8]=0
       MW[9]=0
       MW[10]=0
       MW[11]=0
       MW[12]=0
       MW[13]=0
       MW[14]=0
       MW[15]=0
      ENDIF   
      
  ; Commuter Rail path
   ELSEIF (USERCLASS=5)  ; 2.5 miles minimum bus ride on KNR paths - from OD survey
     IF (TIMEA(0,26) > 0)                                    ; If Commuter rail path exists
       MW[1]=TIMEA(0,1)                                        ; Walk time
       MW[2]=TIMEA(0,2)+TIMEA(0,3)+TIMEA(0,6)                  ; Auto access time (PNR/KNR)
       MW[3]=TIMEA(0,11)+TIMEA(0,12)                           ; Transfer time
       MW[4]=TIMEA(0,23)                                       ; SKYWAY bus time
       MW[5]=TIMEA(0,21)                                       ; Local and express bus time
       MW[6]=TIMEA(0,22)                                       ; EXPRESS bus time
       MW[7]=TIMEA(0,24)+TIMEA(0,25)                           ; BRT, LRT time
       MW[8]=TIMEA(0,26)                                       ; Commuter Rail time
       MW[9]=TIMEA(0,27)                                       ; Project mode time
       MW[10]=0
       IF (BRDINGS(0,TMODES) > 0)
        MW[11]=BRDINGS(0,TMODES)-1                             ; Number of transfers
       ELSE
        MW[11]=0
       ENDIF
       MW[12]=IWAITA(0)                                        ; Initial wait time
       MW[13]=XWAITA(0)                                        ; Transfer wait time
       MW[14]=FAREA(0)*100                                     ; Fare matrix
       MW[15]=TIMEA(0,ALLMODES)                                ; Time on all modes
      ELSE
       MW[1]=0
       MW[2]=0
       MW[3]=0
       MW[4]=0
       MW[5]=0
       MW[6]=0
       MW[7]=0
       MW[8]=0
       MW[9]=0
       MW[10]=0
       MW[11]=0
       MW[12]=0
       MW[13]=0
       MW[14]=0
       MW[15]=0
      ENDIF
   
 ENDIF

ENDPROCESS

ENDRUN


  ENDLOOP

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
; End of PILOT Script

ENDLOOP

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

; EndDistributeMULTISTEP



; End of PILOT Script

LOOP per = 1, 2, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

    IF (per ==1)
     todToken = 'PK'
     hwySkim = 'PRELSKIMS.MAT'
    ElseIF(per ==2)
     todToken = 'OP'
     hwySkim = 'FHSKIMS.MAT'
    EndIF
   
    
    ; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TRMAT00A.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\createDriveToSkywaySkims.PRN"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\DriveToSkyway.dat"
FILEO MATO[2] = "{SCENARIO_DIR}\output\@todToken@_DRV_SKYWAY_ZONES.MAT",MO=11,Name= PNRZONE
FILEO MATO[1] = "{SCENARIO_DIR}\output\@todToken@_DRV_SKYWAY.MAT",MO=1-10,Name= Toll,Distance,WtTime,WlkTime,SkyTime,Xfers,IWait,Xwait,Fare,TotalTime
FILEI MATI[2] = "{SCENARIO_DIR}\output\TSKIM_@todToken@_SKYWAY_Walk_{Alt}{year}.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\output\@hwySkim@"
    
    ; zones = 2578
    
    ; Loop by pnr lots and get the least time pnr location
    Array pnr=6, pathTime=6, skyTime=6
    pnr[1]=766, pnr[2]=767, pnr[3]=726, pnr[4]=677, pnr[5]=665, pnr[6]=739
    
    ; Loop by JZONES and get least cost path
    JLOOP
      ; Initialize variables for each JZone
      pathTime[1]=9999, pathTime[2]=9999, pathTime[3]=9999, pathTime[4]=9999, pathTime[5]=9999, pathTime[6]=9999
      skyTime[1]=0, skyTime[2]=0, skyTime[3]=0, skyTime[4]=0, skyTime[5]=0, skyTime[6]=0
      ; leastTime  = 9999
      chosenPnr = 0
      
        ; Get the origin-to-pnr and pnr-to-destination travel time
        skyTime[1] = MATVAL(2,4,pnr[1],J,0)
        skyTime[2] = MATVAL(2,4,pnr[2],J,0)
        skyTime[3] = MATVAL(2,4,pnr[3],J,0)
        skyTime[4] = MATVAL(2,4,pnr[4],J,0)
        skyTime[5] = MATVAL(2,4,pnr[5],J,0)
        skyTime[6] = MATVAL(2,4,pnr[6],J,0)
        
        ; pathtime = drive-to-pnr hwy time + trn walk time + skyway IVTT
        IF (skyTime[1] > 0) 
            pathTime[1] = MATVAL(1,3,I,pnr[1],0) + MATVAL(2,1,pnr[1],J,0) + MATVAL(2,4,pnr[1],J,0)
        ENDIF
        IF (skyTime[2] > 0) 
           pathTime[2] = MATVAL(1,3,I,pnr[2],0) + MATVAL(2,1,pnr[2],J,0) + MATVAL(2,4,pnr[2],J,0)
        ENDIF
        IF (skyTime[3] > 0) 
           pathTime[3] = MATVAL(1,3,I,pnr[3],0) + MATVAL(2,1,pnr[3],J,0) + MATVAL(2,4,pnr[3],J,0)
        ENDIF
        IF (skyTime[4] > 0) 
           pathTime[4] = MATVAL(1,3,I,pnr[4],0) + MATVAL(2,1,pnr[4],J,0) + MATVAL(2,4,pnr[4],J,0)
        ENDIF
        IF (skyTime[5] > 0) 
           pathTime[5] = MATVAL(1,3,I,pnr[5],0) + MATVAL(2,1,pnr[5],J,0) + MATVAL(2,4,pnr[5],J,0)
        ENDIF
        IF (skyTime[6] > 0) 
           pathTime[6] = MATVAL(1,3,I,pnr[6],0) + MATVAL(2,1,pnr[6],J,0) + MATVAL(2,4,pnr[6],J,0)
        ENDIF
        
        ; Compute total time if there is a walk to skyway path from that pnr station
        leastTime = min(pathTime[1],pathTime[2],pathTime[3],pathTime[4],pathTime[5],pathTime[6])
        
        ; Record the lowest cost pnr lot
        IF (leastTime == pathTime[1]) chosenPnr = 1
        IF (leastTime == pathTime[2]) chosenPnr = 2
        IF (leastTime == pathTime[3]) chosenPnr = 3
        IF (leastTime == pathTime[4]) chosenPnr = 4
        IF (leastTime == pathTime[5]) chosenPnr = 5
        IF (leastTime == pathTime[6]) chosenPnr = 6
        
        ; Fillin the least cost path values in the matrix
        IF (chosenPnr >0 & leastTime > 0 & leastTime != 9999)
          MW[1] = MATVAL(1,1,I,pnr[chosenPnr],0)   ; Toll cost
          MW[2] = MATVAL(1,2,I,pnr[chosenPnr],0)   ; Distance (hwy only, we don't have distance in trn skim)            
          MW[3] = MATVAL(1,4,I,pnr[chosenPnr],0)   ; Weighted Hwy Time
          MW[4] = MATVAL(2,1,pnr[chosenPnr],J,0)   ; Walk Time
          MW[5] = MATVAL(2,4,pnr[chosenPnr],J,0)   ; Skyway Time
          MW[6] = MATVAL(2,11,pnr[chosenPnr],J,0)  ; Number of xfers
          MW[7] = MATVAL(2,12,pnr[chosenPnr],J,0)  ; Inital waitime
          MW[8] = MATVAL(2,13,pnr[chosenPnr],J,0)  ; Xfer waitime
          MW[9] = MATVAL(2,14,pnr[chosenPnr],J,0)  ; Fare
          MW[10] = leastTime                       ; Time (drive+ walk+ skyway) 
          MW[11] = pnr[chosenPnr]                  ; Get the Choosen PNR lot(zone)
        ENDIF
    
      
      ; Trace for selected I-J pair (I= 1, J = 767)
      IF (I== 1 & J == 1) print form =15.4,list=  'I'(6),'J'(6),'Lot'(4),'pnr'(4),'PT1'(12),'PT2'(12),'PT3'(12),'PT4'(12),'PT5'(12),'PT6'(12), FILE = "C:\NERPM43\APPLICATIONS\DRIVETOSKYWAY.DAT"
      IF (I== 767 & J == 688) print form =15.4,list= I(6), J(6), chosenPnr(4), pnr[chosenPnr](4), 
                                                   pathTime[1](12.4), pathTime[2](12.4), pathTime[3](12.4), 
                                                   pathTime[4](12.4), pathTime[5](12.4), pathTime[6](12.4), 
 FILE = "C:\NERPM43\APPLICATIONS\DRIVETOSKYWAY.DAT"
    
    ENDJLOOP
    
ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


; End of PILOT Script

ENDLOOP

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TRIPGEN\TGMAT00A.S"
; Household Joint Probability Model (IPF) 
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{CATALOG_DIR}\APPLICATIONS\TGMAT00H.PRN" MSG='Household Joint Classification Model (IPF)'
;Output Files
FILEO PRINTO[3] = "{SCENARIO_DIR}\OUTPUT\HHCLASS_DEBUG.TXT"
FILEO RECO[2] = "{SCENARIO_DIR}\OUTPUT\HHClass.DBF",
   FIELDS=RECID(10.0),TAZ(4.0),HINC(1.0),HSIZ(1.0),HWRK(1.0),HDUT(1.0),HHFRAC(10.8)
FILEO PRINTO[2] = "{SCENARIO_DIR}\OUTPUT\HHCONVERGENCE.PRN"


;Household Seed Lookup
FILEI LOOKUPI[1] = "{Scenario_Dir}\Input\TRIPGEN\HHSeed.csv"
FILEI LOOKUPI[2] = "{Scenario_Dir}\Input\TRIPGEN\nftpo_incomebytaz2.dbf"
FILEI LOOKUPI[3] = "{Scenario_Dir}\Input\TRIPGEN\jacksonville_hhsize_marginals.dbf"
FILEI LOOKUPI[4] = "{Scenario_Dir}\Input\TRIPGEN\jacksonville_hhworkers_marginals.dbf"
FILEI LOOKUPI[5] = "{Scenario_Dir}\Input\TRIPGEN\abm_se_jta_1_23_13.dbf"

PAR ZONES={zonesi}, ZONEMSG=100

; Define arrays for distributions
ARRAY TYPE=D, ZD_MA=ZONES,4,4,4,2
ARRAY TYPE=D, INCM_MA=ZONES,4
ARRAY TYPE=D, HHSZ_MA=ZONES,4
ARRAY TYPE=D, WRKR_MA=ZONES,4
ARRAY TYPE=D, DU_MA=ZONES,2
ARRAY TYPE=4, TOTDU=ZONES
ARRAY ZDSKIP=4442, HHLDS=ZONES, INC_TOT=ZONES

; Read in lookup seed matrix
LOOKUP, NAME=HHSEED,
    LOOKUP[1]=1, RESULT=2,
    LOOKUP[2]=1, RESULT=3,
    LOOKUP[3]=1, RESULT=4,
    LOOKUP[4]=1, RESULT=5,
    LOOKUP[5]=1, RESULT=6,
    LOOKUP[6]=1, RESULT=7,
    LOOKUP[7]=1, RESULT=8,
    LOOKUP[8]=1, RESULT=9,
    LOOKUP[9]=1, RESULT=10,
    LOOKUP[10]=1, RESULT=11,
    LOOKUP[11]=1, RESULT=12,
    LOOKUP[12]=1, RESULT=13,
    LOOKUP[13]=1, RESULT=14,
    LOOKUP[14]=1, RESULT=15,
    LOOKUP[15]=1, RESULT=16,
    LOOKUP[16]=1, RESULT=17,
    LOOKUP[17]=1, RESULT=18,
    LOOKUP[18]=1, RESULT=19,
    LOOKUP[19]=1, RESULT=20,
    LOOKUP[20]=1, RESULT=21,
    LOOKUP[21]=1, RESULT=22,
    LOOKUP[22]=1, RESULT=23,
    LOOKUP[23]=1, RESULT=24,
    LOOKUP[24]=1, RESULT=25,
    LOOKUP[25]=1, RESULT=26,
    LOOKUP[26]=1, RESULT=27,
    LOOKUP[27]=1, RESULT=28,
    LOOKUP[28]=1, RESULT=29,
    LOOKUP[29]=1, RESULT=30,
    LOOKUP[30]=1, RESULT=31,
    LOOKUP[31]=1, RESULT=32,
    LOOKUP[32]=1, RESULT=33,
    
    INTERPOLATE=N, FAIL[1]=0, FAIL[2]=0, FAIL[3]=0, LIST=Y, LOOKUPI=1

       
 LOOKUP LOOKUPI=2,
        NAME=HHINCOME_Lookup,
          LOOKUP[1]=HHTAZ, RESULT=HHINC_LT15,
          LOOKUP[2]=HHTAZ, RESULT=HHINC_LT25,
          LOOKUP[3]=HHTAZ, RESULT=HHINC_LT50,
          LOOKUP[4]=HHTAZ, RESULT=HHINC_LT75,
          LOOKUP[5]=HHTAZ, RESULT=HHINC_75KP,
        INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0, FAIL[3]=0
        
 LOOKUP LOOKUPI=3,
        NAME=HHSIZE_Lookup,
          LOOKUP[1]=TAZ, RESULT=HH1P,
          LOOKUP[2]=TAZ, RESULT=HH2P,
          LOOKUP[3]=TAZ, RESULT=HH3P,
          LOOKUP[4]=TAZ, RESULT=HH4P,
          LOOKUP[5]=TAZ, RESULT=HH5P,
          LOOKUP[6]=TAZ, RESULT=HH6P,
          LOOKUP[7]=TAZ, RESULT=HH7P,
          LOOKUP[8]=TAZ, RESULT=TOTHH,
        INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0, FAIL[3]=0
        
 LOOKUP LOOKUPI=4,
        NAME=HHWORKERS_Lookup,
          LOOKUP[1]=TAZ, RESULT=WORKER0,
          LOOKUP[2]=TAZ, RESULT=WORKER1,
          LOOKUP[3]=TAZ, RESULT=WORKER2,
          LOOKUP[4]=TAZ, RESULT=WORKER3,
          LOOKUP[5]=TAZ, RESULT=HHTOT,
        INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0, FAIL[3]=0       
        
        
 LOOKUP LOOKUPI=5,
        NAME=DU_Lookup,
          LOOKUP[1]=TAZ, RESULT=SF_UNITS,
          LOOKUP[2]=TAZ, RESULT=MF_UNITS,
          LOOKUP[3]=TAZ, RESULT=TOTAL_OCCU,
        INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0, FAIL[3]=0 
        
 
; -------------------------------------------------------------------------------------------
;        READ IN NUMBER OF HOUSEHOLDS
; -------------------------------------------------------------------------------------------
HHLDS[I]=HHSIZE_LOOKUP(8,I)
; -------------------------------------------------------------------------------------------
;        READ IN MARGINALS FOR INCOME
; -------------------------------------------------------------------------------------------
INC_TOT[I]=HHINCOME_LOOKUP(1,I)+HHINCOME_LOOKUP(2,I)+HHINCOME_LOOKUP(3,I)+HHINCOME_LOOKUP(4,I)+HHINCOME_LOOKUP(5,I)

IF(INC_TOT[I]>0)
  INCM_MA[I][1]=(HHINCOME_LOOKUP(1,I)+HHINCOME_LOOKUP(2,I))/INC_TOT[I]
  INCM_MA[I][2]=HHINCOME_LOOKUP(3,I)/INC_TOT[I]
  INCM_MA[I][3]=HHINCOME_LOOKUP(4,I)/INC_TOT[I]
  INCM_MA[I][4]=HHINCOME_LOOKUP(5,I)/INC_TOT[I]
ELSE
  INCM_MA[I][1]=0
  INCM_MA[I][2]=0
  INCM_MA[I][3]=0
  INCM_MA[I][4]=0
ENDIF
; -------------------------------------------------------------------------------------------
;        READ IN MARGINALS FOR PERSONS
; -------------------------------------------------------------------------------------------
IF(HHSIZE_LOOKUP(8,I)>0)
  HHSZ_MA[I][1]=HHSIZE_LOOKUP(1,I)/HHSIZE_LOOKUP(8,I)
  HHSZ_MA[I][2]=HHSIZE_LOOKUP(2,I)/HHSIZE_LOOKUP(8,I)
  HHSZ_MA[I][3]=HHSIZE_LOOKUP(3,I)/HHSIZE_LOOKUP(8,I)
  HHSZ_MA[I][4]=(HHSIZE_LOOKUP(4,I)+HHSIZE_LOOKUP(5,I)+HHSIZE_LOOKUP(6,I)+HHSIZE_LOOKUP(7,I))/HHSIZE_LOOKUP(8,I)
ELSE
  HHSZ_MA[I][1]=0
  HHSZ_MA[I][2]=0
  HHSZ_MA[I][3]=0
  HHSZ_MA[I][4]=0
ENDIF
; -------------------------------------------------------------------------------------------
;        READ IN MARGINALS FOR WORKERS
; -------------------------------------------------------------------------------------------
IF(HHWORKERS_LOOKUP(5,I)>0)
  WRKR_MA[I][1]=HHWORKERS_LOOKUP(1,I)/HHWORKERS_LOOKUP(5,I)
  WRKR_MA[I][2]=HHWORKERS_LOOKUP(2,I)/HHWORKERS_LOOKUP(5,I)
  WRKR_MA[I][3]=HHWORKERS_LOOKUP(3,I)/HHWORKERS_LOOKUP(5,I)
  WRKR_MA[I][4]=HHWORKERS_LOOKUP(4,I)/HHWORKERS_LOOKUP(5,I)
ELSE
  WRKR_MA[I][1]=0
  WRKR_MA[I][2]=0
  WRKR_MA[I][3]=0
  WRKR_MA[I][4]=0
ENDIF
; -------------------------------------------------------------------------------------------
;        READ IN MARGINALS FOR DU TYPE
; -------------------------------------------------------------------------------------------

  TOTDU[I]=DU_LOOKUP(1,I)+DU_LOOKUP(2,I)
  PRINT LIST="TOT DWELLING UNITS=", TOTDU(8.0)
  IF (TOTDU[I] > 0)
    DU_MA[I][1]=ROUND(DU_LOOKUP(1,I)/TOTDU[I]*1000)/1000
    DU_MA[I][2]=ROUND(DU_LOOKUP(2,I)/TOTDU[I]*1000)/1000
  ELSE
    DU_MA[I][1]=0
    DU_MA[I][2]=0
ENDIF


; ===========================================================================================
;      PERFORM ITERATIVE PROPORTIONAL FIT (IPF) BY ZONE
; ===========================================================================================
IF (I == ZONES)  ; after reading all ZONEDATA, perform analysis

    LOOP ZN=1,ZONES  ; main loop on zones
        PRINT LIST="(TGMAT00H) Household Joint Classification Model:  Zone = ",ZN(4.0), printo=0
        IF (ZN == 1) PRINT LIST="Household Joint Classification Model (IPF) Results","\nModel Year= 20{YEAR}","\n ", printo=2
        IF (HHLDS[ZN] > 0)
            ; -------------------------------------------------------------------------------------------
            ; Reinitialize seed matrix from regional seed matrix for each zone's starting point
            LOOP INCM = 1,4    ; Income
                LOOP PERS = 1,4    ; Persons
                    LOOP WRKS = 1,4    ; Workers
                        LOOP DUTYPE = 1,2    ; Dwelling Unit Type
                            IPWD= (1000*INCM) + (100*PERS) + (10*WRKS) + DUTYPE
                            ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE]=HHSEED(PERS*8 + WRKS*2 + DUTYPE - 10,INCM)
                            IF (ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE]=0) ZDSKIP[IPWD]=1
              IF(ZN={SelOrigin,EditBox-INTEGER,"Select zone for IPF debugging","227"})
                                IF (INCM==1 && PERS==1 && WRKS==1 && DUTYPE==1) PRINT LIST="*****INITIAL REGIONAL SEED MATRIX*****", PRINTO=3
                                PRINT LIST="SELZONE=",ZN(4.0)," INCM=",INCM(1.0)," PERSONS=",PERS(1.0)," WORKERS=",WRKS-1(1.0)," DUTYPE=",DUTYPE(1.0),IPWD(4.0),100*ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE](10.6),"%", PRINTO=3
                            ENDIF
                        ENDLOOP ;Dwelling Unit Type
                    ENDLOOP ;Workers
                ENDLOOP ;Persons
            ENDLOOP ;Income
        
            ; -------------------------------------------------------------------------------------------
            ;        MAIN IPF LOOP BEGINS HERE
            ; -------------------------------------------------------------------------------------------
            LOOP _it=1,{HHIPFITER,ComboEdit-INTEGER,"Max number of IPF zonal Iterations","15","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20",5,20}
                ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
                ; Calculate Marginals for Seed Matrix
                SINC1 = 0, SINC2 = 0, SINC3 = 0, SINC4 = 0
                SPR1M = 0, SPR2M = 0, SPR3M = 0, SPR4M = 0
                SWK0 = 0, SWK1 = 0, SWK2 = 0, SWK3 = 0
                SDU1 = 0, SDU2 = 0 
           
                LOOP INCM=1,4
                    LOOP PERS=1,4
                        LOOP WRKS=1,4
                            LOOP DUTYPE=1,2
                                IF (INCM=1) SINC1 = SINC1 + ZD_MA[ZN][1][PERS][WRKS][DUTYPE]
                                IF (INCM=2) SINC2 = SINC2 + ZD_MA[ZN][2][PERS][WRKS][DUTYPE]
                                IF (INCM=3) SINC3 = SINC3 + ZD_MA[ZN][3][PERS][WRKS][DUTYPE]
                                IF (INCM=4) SINC4 = SINC4 + ZD_MA[ZN][4][PERS][WRKS][DUTYPE]
                                  
                                IF (PERS=1) SPR1M = SPR1M + ZD_MA[ZN][INCM][1][WRKS][DUTYPE]
                                IF (PERS=2) SPR2M = SPR2M + ZD_MA[ZN][INCM][2][WRKS][DUTYPE]
                                IF (PERS=3) SPR3M = SPR3M + ZD_MA[ZN][INCM][3][WRKS][DUTYPE]
                                IF (PERS=4) SPR4M = SPR4M + ZD_MA[ZN][INCM][4][WRKS][DUTYPE]
                                  
                                IF (WRKS=1) SWK0 = SWK0 + ZD_MA[ZN][INCM][PERS][1][DUTYPE]
                                IF (WRKS=2) SWK1 = SWK1 + ZD_MA[ZN][INCM][PERS][2][DUTYPE]
                                IF (WRKS=3) SWK2 = SWK2 + ZD_MA[ZN][INCM][PERS][3][DUTYPE]
                                IF (WRKS=4) SWK3 = SWK3 + ZD_MA[ZN][INCM][PERS][4][DUTYPE]
                      
                                IF (DUTYPE=1) SDU1 = SDU1 + ZD_MA[ZN][INCM][PERS][WRKS][1]
                                IF (DUTYPE=2) SDU2 = SDU2 + ZD_MA[ZN][INCM][PERS][WRKS][2]
                            ENDLOOP
                        ENDLOOP
                    ENDLOOP
                ENDLOOP
        
                            
                ; calculate ratios where appropriate
                margin0=0
                IF (sinc1>0) margin0=margin0+abs(1-(INCM_MA[ZN][1]/sinc1))
                IF (sinc2>0) margin0=margin0+abs(1-(INCM_MA[ZN][2]/sinc2))
                IF (sinc3>0) margin0=margin0+abs(1-(INCM_MA[ZN][3]/sinc3))
                IF (sinc4>0) margin0=margin0+abs(1-(INCM_MA[ZN][4]/sinc4))
        
                IF (spr1m>0) margin0=margin0+abs(1-(HHSZ_MA[ZN][1]/spr1m))
                IF (spr2m>0) margin0=margin0+abs(1-(HHSZ_MA[ZN][2]/spr2m))
                IF (spr3m>0) margin0=margin0+abs(1-(HHSZ_MA[ZN][3]/spr3m))
                IF (spr4m>0) margin0=margin0+abs(1-(HHSZ_MA[ZN][4]/spr4m))
        
                IF (swk0>0) margin0=margin0+abs(1-(WRKR_MA[ZN][1]/swk0))
                IF (swk1>0) margin0=margin0+abs(1-(WRKR_MA[ZN][2]/swk1))
                IF (swk2>0) margin0=margin0+abs(1-(WRKR_MA[ZN][3]/swk2))
                IF (swk3>0) margin0=margin0+abs(1-(WRKR_MA[ZN][4]/swk3))
        
                IF (sdu1>0) margin0=margin0+abs(1-(DU_MA[ZN][1]/sdu1))
                IF (sdu2>0) margin0=margin0+abs(1-(DU_MA[ZN][2]/sdu2))
                       
    
                PRINT LIST = "TAZ = ", zn(4.0), "  MARGIN = ", margin0(12.6),{ipftol}
    
                   
                ; check for convergence
                IF (margin0<{ipftol})
                    converged=1
                    BREAK
                ELSE
                    converged=0
                ENDIF
                   
            ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ; Add Print for Diagnostics
            IF (ZN={SelOrigin}&_it<{hhipfiter})
                PRINT LIST="\n\n----------------------------------------------------------------- ",
                "\nZONE=",ZN(4.0)," IPF ITERATION=",_it(5.0),"  GRP1   GRP2   GRP3   GRP4",
                "\n  INCOME MODEL RESULTS        ",SINC1(6.4)," ",SINC2(6.4)," ",SINC3(6.4)," ",SINC4(6.4),
                "\n    TARGET VALUES             ",INCM_MA[ZN][1](6.4)," ",INCM_MA[ZN][2](6.4)," ",INCM_MA[ZN][3](6.4)," ",INCM_MA[ZN][4](6.4),
                "\n  PERSON MODEL RESULTS        ",SPR1M(6.4)," ",SPR2M(6.4)," ",SPR3M(6.4)," ",SPR4M(6.4),
                "\n    TARGET VALUES             ",HHSZ_MA[ZN][1](6.4)," ",HHSZ_MA[ZN][2](6.4)," ",HHSZ_MA[ZN][3](6.4)," ",HHSZ_MA[ZN][4](6.4),
                "\n  WORKER MODEL RESULTS        ",SWK0(6.4)," ",SWK1(6.4)," ",SWK2(6.4)," ",SWK3(6.4),
                "\n    TARGET VALUES             ",WRKR_MA[ZN][1](6.4)," ",WRKR_MA[ZN][2](6.4)," ",WRKR_MA[ZN][3](6.4)," ",WRKR_MA[ZN][4](6.4),
                "\n  DUTYPE MODEL RESULTS        ",SDU1(6.4)," ",SDU2(6.4),
                "\n    TARGET VALUES             ",DU_MA[ZN][1](6.4)," ",DU_MA[ZN][2](6.4), printo=3
            ENDIF
                   
            ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ; Perform Adjustments to Seed Values based on Joint Probabilities of Marginals
            ; Zero out any cell where the marginal is zero
    
            LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IF (INCM_MA[ZN][1]=0) ZD_MA[ZN][1][PERS][WRKS][DUTYPE] = 0
                            IF (INCM_MA[ZN][2]=0) ZD_MA[ZN][2][PERS][WRKS][DUTYPE] = 0
                            IF (INCM_MA[ZN][3]=0) ZD_MA[ZN][3][PERS][WRKS][DUTYPE] = 0
                            IF (INCM_MA[ZN][4]=0) ZD_MA[ZN][4][PERS][WRKS][DUTYPE] = 0
                              
                            IF (HHSZ_MA[ZN][1]=0) ZD_MA[ZN][INCM][1][WRKS][DUTYPE] = 0
                            IF (HHSZ_MA[ZN][2]=0) ZD_MA[ZN][INCM][2][WRKS][DUTYPE] = 0
                            IF (HHSZ_MA[ZN][3]=0) ZD_MA[ZN][INCM][3][WRKS][DUTYPE] = 0
                            IF (HHSZ_MA[ZN][4]=0) ZD_MA[ZN][INCM][4][WRKS][DUTYPE] = 0
                              
                            IF (WRKR_MA[ZN][1]=0) ZD_MA[ZN][INCM][PERS][1][DUTYPE] = 0
                            IF (WRKR_MA[ZN][2]=0) ZD_MA[ZN][INCM][PERS][2][DUTYPE] = 0
                            IF (WRKR_MA[ZN][3]=0) ZD_MA[ZN][INCM][PERS][3][DUTYPE] = 0
                            IF (WRKR_MA[ZN][4]=0) ZD_MA[ZN][INCM][PERS][4][DUTYPE] = 0
                  
                            IF (DU_MA[ZN][1]=0) ZD_MA[ZN][INCM][PERS][WRKS][1] = 0
                            IF (DU_MA[ZN][2]=0) ZD_MA[ZN][INCM][PERS][WRKS][2] = 0
                        ENDLOOP
                    ENDLOOP
                ENDLOOP
            ENDLOOP
                   
            ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ; First calculate adjustment for income
        
             LOOP INCM=1,4
                 LOOP PERS=1,4
                     LOOP WRKS=1,4
                         LOOP DUTYPE=1,2
                             IF ((INCM_MA[ZN][INCM]>0) && (HHSZ_MA[ZN][PERS]>0) && (WRKR_MA[ZN][WRKS]>0) && (DU_MA[ZN][DUTYPE]>0))
                                 IF (INCM=1) ZD_MA[ZN][1][PERS][WRKS][DUTYPE] = ZD_MA[ZN][1][PERS][WRKS][DUTYPE] * INCM_MA[ZN][1] / SINC1
                                 IF (INCM=2) ZD_MA[ZN][2][PERS][WRKS][DUTYPE] = ZD_MA[ZN][2][PERS][WRKS][DUTYPE] * INCM_MA[ZN][2] / SINC2
                                 IF (INCM=3) ZD_MA[ZN][3][PERS][WRKS][DUTYPE] = ZD_MA[ZN][3][PERS][WRKS][DUTYPE] * INCM_MA[ZN][3] / SINC3
                                 IF (INCM=4) ZD_MA[ZN][4][PERS][WRKS][DUTYPE] = ZD_MA[ZN][4][PERS][WRKS][DUTYPE] * INCM_MA[ZN][4] / SINC4
                             ENDIF
                          ENDLOOP
                      ENDLOOP
                  ENDLOOP
            ENDLOOP          
        
            ;   Recalculate Marginals for Seed Matrix
    
            SINC1 = 0, SINC2 = 0, SINC3 = 0, SINC4 = 0
            SPR1M = 0, SPR2M = 0, SPR3M = 0, SPR4M = 0
            SWK0 = 0, SWK1 = 0, SWK2 = 0, SWK3 = 0
            SDU1 = 0, SDU2 = 0 
        
            LOOP INCM=1,4
               LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IF (INCM=1) SINC1 = SINC1 + ZD_MA[ZN][1][PERS][WRKS][DUTYPE]
                            IF (INCM=2) SINC2 = SINC2 + ZD_MA[ZN][2][PERS][WRKS][DUTYPE]
                            IF (INCM=3) SINC3 = SINC3 + ZD_MA[ZN][3][PERS][WRKS][DUTYPE]
                            IF (INCM=4) SINC4 = SINC4 + ZD_MA[ZN][4][PERS][WRKS][DUTYPE]
                                   
                            IF (PERS=1) SPR1M = SPR1M + ZD_MA[ZN][INCM][1][WRKS][DUTYPE]
                            IF (PERS=2) SPR2M = SPR2M + ZD_MA[ZN][INCM][2][WRKS][DUTYPE]
                            IF (PERS=3) SPR3M = SPR3M + ZD_MA[ZN][INCM][3][WRKS][DUTYPE]
                            IF (PERS=4) SPR4M = SPR4M + ZD_MA[ZN][INCM][4][WRKS][DUTYPE]
                                  
                            IF (WRKS=1) SWK0 = SWK0 + ZD_MA[ZN][INCM][PERS][1][DUTYPE]
                            IF (WRKS=2) SWK1 = SWK1 + ZD_MA[ZN][INCM][PERS][2][DUTYPE]
                            IF (WRKS=3) SWK2 = SWK2 + ZD_MA[ZN][INCM][PERS][3][DUTYPE]
                            IF (WRKS=4) SWK3 = SWK3 + ZD_MA[ZN][INCM][PERS][4][DUTYPE]
                               
                            IF (DUTYPE=1) SDU1 = SDU1 + ZD_MA[ZN][INCM][PERS][WRKS][1]
                            IF (DUTYPE=2) SDU2 = SDU2 + ZD_MA[ZN][INCM][PERS][WRKS][2]
                        ENDLOOP
                    ENDLOOP
                ENDLOOP
            ENDLOOP           
                  
            ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ; Second calculate adjustment for household size
             LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IF ((INCM_MA[ZN][INCM]>0) && (HHSZ_MA[ZN][PERS]>0) && (WRKR_MA[ZN][WRKS]>0) && (DU_MA[ZN][DUTYPE]>0))
                                IF (PERS=1) ZD_MA[ZN][INCM][1][WRKS][DUTYPE] = ZD_MA[ZN][INCM][1][WRKS][DUTYPE] * HHSZ_MA[ZN][1] / SPR1M
                                IF (PERS=2) ZD_MA[ZN][INCM][2][WRKS][DUTYPE] = ZD_MA[ZN][INCM][2][WRKS][DUTYPE] * HHSZ_MA[ZN][2] / SPR2M
                                IF (PERS=3) ZD_MA[ZN][INCM][3][WRKS][DUTYPE] = ZD_MA[ZN][INCM][3][WRKS][DUTYPE] * HHSZ_MA[ZN][3] / SPR3M
                                IF (PERS=4) ZD_MA[ZN][INCM][4][WRKS][DUTYPE] = ZD_MA[ZN][INCM][4][WRKS][DUTYPE] * HHSZ_MA[ZN][4] / SPR4M
                            ENDIF
                        ENDLOOP
                    ENDLOOP
                ENDLOOP
            ENDLOOP        
    
            ; Recalculate Marginals for Seed Matrix
            SINC1 = 0, SINC2 = 0, SINC3 = 0, SINC4 = 0
            SPR1M = 0, SPR2M = 0, SPR3M = 0, SPR4M = 0
            SWK0 = 0, SWK1 = 0, SWK2 = 0, SWK3 = 0
            SDU1 = 0, SDU2 = 0         
            
            LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IF (INCM=1) SINC1 = SINC1 + ZD_MA[ZN][1][PERS][WRKS][DUTYPE]
                            IF (INCM=2) SINC2 = SINC2 + ZD_MA[ZN][2][PERS][WRKS][DUTYPE]
                            IF (INCM=3) SINC3 = SINC3 + ZD_MA[ZN][3][PERS][WRKS][DUTYPE]
                            IF (INCM=4) SINC4 = SINC4 + ZD_MA[ZN][4][PERS][WRKS][DUTYPE]
                               
                            IF (PERS=1) SPR1M = SPR1M + ZD_MA[ZN][INCM][1][WRKS][DUTYPE]
                            IF (PERS=2) SPR2M = SPR2M + ZD_MA[ZN][INCM][2][WRKS][DUTYPE]
                            IF (PERS=3) SPR3M = SPR3M + ZD_MA[ZN][INCM][3][WRKS][DUTYPE]
                            IF (PERS=4) SPR4M = SPR4M + ZD_MA[ZN][INCM][4][WRKS][DUTYPE]
                               
                            IF (WRKS=1) SWK0 = SWK0 + ZD_MA[ZN][INCM][PERS][1][DUTYPE]
                            IF (WRKS=2) SWK1 = SWK1 + ZD_MA[ZN][INCM][PERS][2][DUTYPE]
                            IF (WRKS=3) SWK2 = SWK2 + ZD_MA[ZN][INCM][PERS][3][DUTYPE]
                            IF (WRKS=4) SWK3 = SWK3 + ZD_MA[ZN][INCM][PERS][4][DUTYPE]
                           
                            IF (DUTYPE=1) SDU1 = SDU1 + ZD_MA[ZN][INCM][PERS][WRKS][1]
                            IF (DUTYPE=2) SDU2 = SDU2 + ZD_MA[ZN][INCM][PERS][WRKS][2]
                        ENDLOOP
                    ENDLOOP
                ENDLOOP
            ENDLOOP           
                  
            ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ; Third calculate adjustment for workers in households
             LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IF ((INCM_MA[ZN][INCM]>0) && (HHSZ_MA[ZN][PERS]>0) && (WRKR_MA[ZN][WRKS]>0) && (DU_MA[ZN][DUTYPE]>0))
                                IF (WRKS=1 && SWK0>0) ZD_MA[ZN][INCM][PERS][1][DUTYPE] = ZD_MA[ZN][INCM][PERS][1][DUTYPE] * WRKR_MA[ZN][1] / SWK0
                                IF (WRKS=2 && SWK1>0) ZD_MA[ZN][INCM][PERS][2][DUTYPE] = ZD_MA[ZN][INCM][PERS][2][DUTYPE] * WRKR_MA[ZN][2] / SWK1
                                IF (WRKS=3 && SWK2>0) ZD_MA[ZN][INCM][PERS][3][DUTYPE] = ZD_MA[ZN][INCM][PERS][3][DUTYPE] * WRKR_MA[ZN][3] / SWK2
                                IF (WRKS=4 && SWK3>0) ZD_MA[ZN][INCM][PERS][4][DUTYPE] = ZD_MA[ZN][INCM][PERS][4][DUTYPE] * WRKR_MA[ZN][4] / SWK3
                            ENDIF
                        ENDLOOP
                    ENDLOOP
                ENDLOOP
            ENDLOOP          
                                  
            ; Recalculate Marginals for Seed Matrix
             
            SINC1 = 0, SINC2 = 0, SINC3 = 0, SINC4 = 0
            SPR1M = 0, SPR2M = 0, SPR3M = 0, SPR4M = 0
            SWK0 = 0, SWK1 = 0, SWK2 = 0, SWK3 = 0
            SDU1 = 0, SDU2 = 0  
        
            LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IF (INCM=1) SINC1 = SINC1 + ZD_MA[ZN][1][PERS][WRKS][DUTYPE]
                            IF (INCM=2) SINC2 = SINC2 + ZD_MA[ZN][2][PERS][WRKS][DUTYPE]
                            IF (INCM=3) SINC3 = SINC3 + ZD_MA[ZN][3][PERS][WRKS][DUTYPE]
                            IF (INCM=4) SINC4 = SINC4 + ZD_MA[ZN][4][PERS][WRKS][DUTYPE]
                               
                            IF (PERS=1) SPR1M = SPR1M + ZD_MA[ZN][INCM][1][WRKS][DUTYPE]
                            IF (PERS=2) SPR2M = SPR2M + ZD_MA[ZN][INCM][2][WRKS][DUTYPE]
                            IF (PERS=3) SPR3M = SPR3M + ZD_MA[ZN][INCM][3][WRKS][DUTYPE]
                            IF (PERS=4) SPR4M = SPR4M + ZD_MA[ZN][INCM][4][WRKS][DUTYPE]
                               
                            IF (WRKS=1) SWK0 = SWK0 + ZD_MA[ZN][INCM][PERS][1][DUTYPE]
                            IF (WRKS=2) SWK1 = SWK1 + ZD_MA[ZN][INCM][PERS][2][DUTYPE]
                            IF (WRKS=3) SWK2 = SWK2 + ZD_MA[ZN][INCM][PERS][3][DUTYPE]
                            IF (WRKS=4) SWK3 = SWK3 + ZD_MA[ZN][INCM][PERS][4][DUTYPE]
                           
                            IF (DUTYPE=1) SDU1 = SDU1 + ZD_MA[ZN][INCM][PERS][WRKS][1]
                            IF (DUTYPE=2) SDU2 = SDU2 + ZD_MA[ZN][INCM][PERS][WRKS][2]
                        ENDLOOP
                    ENDLOOP
                ENDLOOP
            ENDLOOP           
                             
            ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ; Fourth calculate adjustment for Dwelling Units
            
            LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IF ((INCM_MA[ZN][INCM]>0) && (HHSZ_MA[ZN][PERS]>0) && (WRKR_MA[ZN][WRKS]>0) && (DU_MA[ZN][DUTYPE]>0))
                                                            IF (DUTYPE=1) ZD_MA[ZN][INCM][PERS][WRKS][1] = ZD_MA[ZN][INCM][PERS][WRKS][1] * DU_MA[ZN][1] / SDU1
                                IF (DUTYPE=2) ZD_MA[ZN][INCM][PERS][WRKS][2] = ZD_MA[ZN][INCM][PERS][WRKS][2] * DU_MA[ZN][2] / SDU2
                            ENDIF
                        ENDLOOP
                    ENDLOOP
                ENDLOOP
            ENDLOOP          
    
            ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ; Normalize the Seed Arrays on each iteration just to avoid ending up with bizarre results
            ; when the matrix is not solvable
               
            ZDTOTAL=0
            LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            ZDTOTAL = ZDTOTAL + ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE]
                        ENDLOOP ; DUType
                    ENDLOOP ; Workers
                ENDLOOP ; Persons
            ENDLOOP ; Income
                 
            LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IF(ZDTOTAL>0)
                              ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE] = ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE]/ZDTOTAL
                            ELSE
                              ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE] = 0
                            ENDIF
                            
                        ENDLOOP ; DUType
                    ENDLOOP ; Workers
                ENDLOOP ; Persons
            ENDLOOP ; Income
               
            ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ; On the last iteration, remove any cells with really small values
        
            LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IPWD= (1000*INCM) + (100*PERS) + (10*WRKS) + DUTYPE
                            IF (ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE]<0.00001 & _it={HHIPFITER})
                                ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE]=0.0
                            ENDIF
                        ENDLOOP ; DUType
                    ENDLOOP ; Workers
                ENDLOOP ; Persons
            ENDLOOP ; Income
        
            ; . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
            ; Normalize the final written values WRT 1.0
            IF (_it={HHIPFITER})
            
            ZDTOTAL=0
            LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            ZDTOTAL = ZDTOTAL + ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE]
                        ENDLOOP    ; DUType
                    ENDLOOP    ; Workers
                ENDLOOP    ; Persons
            ENDLOOP    ; Income
                     
            
            LOOP INCM=1,4
                LOOP PERS=1,4
                    LOOP WRKS=1,4
                        LOOP DUTYPE=1,2
                            IF(ZDTOTAL>0)
                              ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE] = ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE]/ZDTOTAL
                            ELSE
                              ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE] = 0
                            ENDIF
                        ENDLOOP    ; DUType
                    ENDLOOP    ; Workers
                ENDLOOP    ; Persons
            ENDLOOP    ; Income
                 
            ENDIF    ; _it=HHIPFITER
        
        ENDLOOP    ;_it=1,HHIPFITER
      
      ;     -------------------------------------------------------------------------------------------
      ;             MAIN IPF LOOP ENDS HERE
      ;     -------------------------------------------------------------------------------------------
         
      ;  Report convergence for each zone at final iteration
   
   IF(ZN==1) PRINT LIST = "HOUSEHOLD CLASSIFICATION IPF CONVERGENCE", PRINTO=2
   PRINT LIST = "TAZ = ", ZN(4), "  MARGIN = ", margin0(8.3), "  CONVERGED [1=YES] = ", converged(1), PRINTO=2

   
      ;     -------------------------------------------------------------------------------------------
      ;           WRITE HOUSEHOLD CLASSIFICATION
      ;     -------------------------------------------------------------------------------------------
      LOOP INCM=1,4
          LOOP PERS=1,4
              LOOP WRKS=1,4
                  LOOP DUTYPE=1,2
                      IPWD= (1000*INCM) + (100*PERS) + (10*WRKS) + DUTYPE
                      IF (ZN={SelOrigin}) 
           IF(INCM==1 && PERS==1 && WRKS==1 && DUTYPE==1) PRINT LIST="\n\nHOUSEHOLD CLASSFICATION FOR SELECT ZONE", PRINTO=3
           PRINT LIST="TAZ=",ZN," INCM=",INCM(1.0)," PERSONS=",PERS(1.0)," WORKERS=",WRKS-1(1.0)," DUTYPE=",DUTYPE(1.0)," HHFRACTION=",100*ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE](10.6),"%",PRINTO=3
                      ENDIF
                      RO.RECID=IPWD*10000 + ZN
                      RO.TAZ=ZN
                      RO.HINC=INCM
                      RO.HSIZ=PERS
                      RO.HWRK=WRKS
                      RO.HDUT=DUTYPE
                      RO.HHFRAC=ZD_MA[ZN][INCM][PERS][WRKS][DUTYPE]
                    WRITE RECO=2
                  ENDLOOP
              ENDLOOP  
          ENDLOOP  
      ENDLOOP   
              
      ; more print diagnostics
      IF (ZN={SelOrigin})
          finalit=_it-1
        IF (converged=1)
          CNVRG='YES'
        ELSE
          CNVRG='NO!'
        ENDIF
        
        PRINT LIST="\n----------------------------------------------------------------- ",
        "\nZONE=",ZN(4.0)," Closure <",{ipftol}(10.8lr)," Achieved=",CNVRG," IPF ITERATION=",finalit(5.0l),
        "\n                              GRP1   GRP2   GRP3   GRP4",
        "\n  INCOME MODEL RESULTS       ",SINC1(6.4)," ",SINC2(6.4)," ",SINC3(6.4)," ",SINC4(6.4),
        "\n    TARGET VALUES            ",INCM_MA[ZN][1](6.4)," ",INCM_MA[ZN][2](6.4)," ",INCM_MA[ZN][3](6.4)," ",INCM_MA[ZN][4](6.4),
        "\n  PERSON MODEL RESULTS       ",SPR1M(6.4)," ",SPR2M(6.4)," ",SPR3M(6.4)," ",SPR4M(6.4),
        "\n    TARGET VALUES            ",HHSZ_MA[ZN][1](6.4)," ",HHSZ_MA[ZN][2](6.4)," ",HHSZ_MA[ZN][3](6.4)," ",HHSZ_MA[ZN][4](6.4),
        "\n  WORKER MODEL RESULTS       ",SWK0(6.4)," ",SWK1(6.4)," ",SWK2(6.4)," ",SWK3(6.4),
        "\n    TARGET VALUES            ",WRKR_MA[ZN][1](6.4)," ",WRKR_MA[ZN][2](6.4)," ",WRKR_MA[ZN][3](6.4)," ",WRKR_MA[ZN][4](6.4),
        "\n  DUTYPE MODEL RESULTS       ",SDU1(6.4)," ",SDU2(6.4),
        "\n    TARGET VALUES            ",DU_MA[ZN][1](6.4)," ",DU_MA[ZN][2](6.4), printo=3
      ENDIF

    ELSE           ; No households in this zone, report zero for all classes
  
      LOOP INCM=1,4
          LOOP PERS=1,4
              LOOP WRKS=1,4
                  LOOP DUTYPE=1,2
                      IPWD= (1000*INCM) + (100*PERS) + (10*WRKS) + DUTYPE
                      RO.RECID=IPWD*10000 + ZN
                      RO.TAZ=ZN
                      RO.HINC=INCM
                      RO.HSIZ=PERS
                      RO.HWRK=WRKS
                      RO.HDUT=DUTYPE
                      RO.HHFRAC=0.00
                    WRITE RECO=2
                  ENDLOOP
              ENDLOOP  
          ENDLOOP  
      ENDLOOP   
      IF (ZN={SelOrigin}) PRINT LIST="\n----------------------------------------------------------------- ",
                  "\nZONE=",ZN(4.0)," No Households in this Zone - No IPF performed", PRINTO=3

    ENDIF    ; HHLDS[ZN] equal 0
    
    ENDLOOP    ; CLOSE ZONE LOOP

ENDIF ; End Analysis

; Clear User Progress Message
;PRINT LIST="", printo=0

ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\TRIPGEN\TGNET00E.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{CATALOG_DIR}\APPLICATIONS\TGNET00A.PRN" MSG='Floating Zone Mixed Density'
FILEI LOOKUPI[1] = "{Scenario_Dir}\Input\TRIPGEN\MixedDensity.csv"
FILEI LINKI[1] = "{SCENARIO_DIR}\OUTPUT\UNLOADED.NET"
FILEI NODEI[2] = "{Scenario_Dir}\Input\TRIPGEN\ZDATA_10A.dbf",
 RENAME=Zone-N
FILEO PRINTO[1] = "{SCENARIO_DIR}\OUTPUT\Float_ZnData.csv"


LOOKUP, NAME=MDM, LOOKUP[1]=1, RESULT=2, INTERPOLATE=N, LIST=Y, LOOKUPI=1

PROCESS  PHASE=INPUT

    ARRAY _CentNum={zonesi},
        _CentX={zonesi},
        _CentY={zonesi},
        _ResHhld={zonesi},
        _TotEmp={zonesi},
        _FloatResHhld={zonesi},
        _FloatEmp={zonesi},
        _MixedDen={zonesi}

ENDPROCESS


PROCESS  PHASE=NODEMERGE  

    IF (N<={zonesi})
      
    _cnt=_cnt+1
        _FloatResHhld[_cnt]=0
        _FloatEmp[_cnt]=0
        _CentX[_cnt]=X
        _CentY[_cnt]=Y
        _ResHhld[_cnt]=RESDHHLD
        _TotEmp[_cnt]=TOT_EMP
        _regionEmp = _regionEmp + TOT_EMP
        _regionHHs = _regionHHs + RESDHHLD

  ENDIF
ENDPROCESS




PROCESS  PHASE=LINKMERGE  

    _linkcnt=_linkcnt+1
  
    ; Find zones within the half-mile buffer, accumulate count of households and employment, and
  ; then compute the mixed density for the zone
  
    IF (_linkcnt=1)

        LOOP _iTAZ=1,{zonesi}

         LOOP _jTAZ=1,{zonesi}

           ; Calculate the distance between the subject TAZ and the other TAZs
                    _dist=SQRT((_CentX[_iTAZ]-_CentX[_jTAZ])^2 +(_CentY[_iTAZ]-_CentY[_jTAZ])^2)
            
                    IF (_dist <= {UNITS}/2)  ; distance <= 0.5 mile
                 
                        ;Keep a tally of floating zone resident households 
                        _FloatResHhld[_iTAZ]=_FloatResHhld[_iTAZ]+_ResHhld[_jTAZ]
 ;                       _FloatResHhld[_TAZ]=_tmphhld

                        ;Keep a tally of floating zone employment 
                        _FloatEmp[_iTAZ]=_FloatEmp[_iTAZ]+_TotEmp[_jTAZ]
;                        _FloatEmp[_TAZ]=_tmpemp
                        
                    ENDIF   
       ENDLOOP   ; end jTAZ loop

             ; Calculate mixed density

           IF(_FloatResHhld[_iTAZ] == 0.0 || _FloatEmp[_iTAZ] == 0.0)
                _MixedDen[_iTAZ] = -5
      ELSE
                _MixedDen[_iTAZ] = MDM(1,_iTAZ)
           ENDIF

             ; Write to output file

           IF (_iTAZ==1) PRINT CSV=T LIST='TAZ','Households','Tot_Emp','FloatHHlds','FloatEmp','Mixed_Density','CentX','CentY', PRINTO=1
             PRINT CSV=T LIST=_iTAZ(5),_ResHhld[_iTAZ](7),_TotEmp[_iTAZ](7),_FloatResHHld[_iTAZ](7),_FloatEmp[_iTAZ](7),_MixedDen[_iTAZ](7.6),_CentX[_iTAZ],_CentY[_iTAZ], PRINTO=1
       
    ENDLOOP
    ENDIF

  ENDPROCESS


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TRIPGEN\TGMAT00J.S"
*del *.prj
*del *.var

; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

RUN PGM=MATRIX PRNFILE="{Scenario_Dir}\OUTPUT\TGMAT00J.PRN" MSG='Transit and Walk Accessibility'
FILEO PRINTO[1] = "{Scenario_Dir}\OUTPUT\AccCalcsDebug.TXT"

FILEO RECO[1] = "{Scenario_Dir}\OUTPUT\WalkTranAcc.dbf",
 FIELDS=TAZ(4.0),Trn_Acc(8.4),Aut_Acc(8.4),Wlk_Acc(8.4),Comp_Acc(8.4)



;Floating Zones Data
FILEI ZDATI[1] = "{Scenario_Dir}\OUTPUT\Float_ZnData.csv",
   Z=#1,TotHhlds=#2,TotEmp=#3,FloatHhld=#4,FloatEmp=#5,MixedDen=#6,CentX=#7,CentY=#8

;Congested Highway Skim
FILEI MATI[4] = "{Scenario_Dir}\OUTPUT\PRELSKIMS.MAT"

;Walk to transit skim
FILEI MATI[2] = "{Scenario_Dir}\OUTPUT\TSKIM_PK_LOCAL_Walk_{alt}{year}.MAT"

; ----------------------------------------------------------------------------------

ZONES=2494
ZONEMSG=10


; ----------------------------------------------------------------------------------

; READ IN INPUT DATA

; Walk to Transit Time

MW[1] = MI.2.4 + MI.2.5 + MI.2.6 + MI.2.7 + MI.2.8 + MI.2.9 + MI.2.10      ; in-vehicle time
MW[2] = MI.2.1 + MI.2.3 + MI.2.12 + MI.2.13                                ; out-of-vehicle time

; Auto Time
MW[9] = MI.4.3                                                            ; SOV Time

; Walk Distance
MW[10] = MI.4.2                                                            ; SOV distance


; CALCULATE ACCESSIBILITIES

ARRAY TRNACC=2494, AUTACC=2494, WLKACC=2494

JLOOP

    ; transit accessibility -- include only if there's a valid transit path
  IF(MW[1] > 0.0)  TRNACC[I] = TRNACC[I] + EXP(-0.025 * (MW[1] + 2*MW[2])) * ZI.1.TotEmp[J]

    ; Auto accessibility -- include only if there's a valid Auto path
  IF(MW[9] > 0.0)  AUTACC[I] = AUTACC[I] + EXP(-0.025 * (MW[9])) * ZI.1.TotEmp[J]

  ; walk accessibility
  WLKACC[I] = WLKACC[I] + EXP(-2.0 * MW[10]) * ZI.1.TotEmp[J]
  
  ; now some debugging
  
  IF(I == 3)
  
    IF(J==1) PRINT LIST = 'Transit Accessibility Calculations for Zone = ', I(5), printo=1
    IF(J==1) PRINT LIST = '\n JZone   TranIVTime    TranOVTime    SovTime   WalkDist     Employment', printo=1
    PRINT LIST = J(5), MW[1](10.2), '     ', MW[2](10.2), '     ', MW[9](10.2), '     ', MW[10](10.2), '     ', ZI.1.TotEmp[J], printo=1

  ENDIF
ENDJLOOP


; WRITE OUTPUT FILE

RO.TAZ=I

IF(TRNACC[I] > 0.0)
   RO.TRN_ACC = LN(TRNACC[I])
ELSE
   RO.TRN_ACC = -9.9
ENDIF

IF(AUTACC[I] > 0.0)
   RO.AUT_ACC = LN(AUTACC[I])
ELSE
   RO.AUT_ACC = -9.9
ENDIF

IF(WLKACC[I] > 0.0)
   RO.WLK_ACC = LN(WLKACC[I])
ELSE
   RO.WLK_ACC = -9.9
ENDIF

RO.COMP_ACC = RO.TRN_ACC - RO.AUT_ACC


WRITE RECO=1

; DEBUG

IF(I == 3)

  PRINT LIST = '\n\nTransit Accessibility = ',RO.TRN_ACC(10.3), printo=1
  PRINT LIST = '\n\nAuto Accessibility = ',RO.AUT_ACC(10.3), printo=1
  PRINT LIST = '\n\nComposite Accessibility = ',RO.COMP_ACC(10.3), printo=1
 PRINT LIST = '\nWalk Accessibility    = ', RO.WLK_ACC(10.3), printo=1

ENDIF


ENDRUN

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TRIPGEN\TGMAT00K.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{CATALOG_DIR}\APPLICATIONS\TGMAT00K.PRN" MSG='Auto Availability Model'
FILEI LOOKUPI[3] = "{SCENARIO_DIR}\Input\TRIPGEN\nftpo_incomebytaz2.dbf"
FILEI LOOKUPI[2] = "{Scenario_Dir}\Input\TRIPGEN\COEFF_AUTOOWN.csv"
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\OUTPUT\HHClass.DBF"
FILEI ZDATI[1] = "{Scenario_Dir}\Input\TRIPGEN\ZDATA_10A.dbf"
FILEI ZDATI[5] = "{Scenario_Dir}\OUTPUT\WalkTranAcc.dbf"
FILEI ZDATI[3] = "{SCENARIO_DIR}\OUTPUT\Float_ZnData.csv",
    Z=#1,TotHhlds=#2,TotEmp=#3,FloatHhld=#4,FloatEmp=#5,MixedDen=#6,CentX=#7,CentY=#8
    ;Z=#1,Households=#2,Tot_Emp=3,Hhld_Density=4,Pop_Density=5,TotEmp_Density=6,IndEmp_Density=7,
    ;CommEmp_Density=8,ServEmp_Density=9,Mixed_Density=10
  
FILEO PRINTO[1] = "{SCENARIO_DIR}\OUTPUT\AUTOOWN_DEBUG.TXT"
FILEO RECO[1] = "{SCENARIO_DIR}\OUTPUT\AUTOOWN_MODEL.DBF",
  FIELDS = RECIDX(10), TAZ(5), INC(1), AUT(1), WRK(1), SIZE(1), HHLDS(12.4)
FILEO PRINTO[2] = "{SCENARIO_DIR}\OUTPUT\HHLDS_BY_AUTOS_TOTAL.PRN"

; READ IN THE HOUSEHOLD CLASSIFICATION
;LOOKUP, NAME = TAZID,  LOOKUP[1]=1, RESULT=2, INTERPOLATE=N, LIST=N, LOOKUPI=1
;LOOKUP, NAME = HINC,   LOOKUP[1]=1, RESULT=3, INTERPOLATE=N, LIST=N, LOOKUPI=1
;LOOKUP, NAME = HSIZ,   LOOKUP[1]=1, RESULT=4, INTERPOLATE=N, LIST=N, LOOKUPI=1
;LOOKUP, NAME = HWRK,   LOOKUP[1]=1, RESULT=5, INTERPOLATE=N, LIST=N, LOOKUPI=1
;LOOKUP, NAME = HDUT,   LOOKUP[1]=1, RESULT=6, INTERPOLATE=N, LIST=N, LOOKUPI=1
LOOKUP, NAME = HHFRAC, LOOKUP[1]=1, RESULT=7, INTERPOLATE=N, LIST=N, LOOKUPI=1

; READ IN THE MODEL COEFFICIENTS
LOOKUP, NAME = COEFFA0, LOOKUP[1]=2, RESULT=3, INTERPOLATE=N, LIST=Y, LOOKUPI=2
LOOKUP, NAME = COEFFA1, LOOKUP[1]=2, RESULT=4, INTERPOLATE=N, LIST=Y, LOOKUPI=2
LOOKUP, NAME = COEFFA2, LOOKUP[1]=2, RESULT=5, INTERPOLATE=N, LIST=Y, LOOKUPI=2
LOOKUP, NAME = COEFFA3, LOOKUP[1]=2, RESULT=6, INTERPOLATE=N, LIST=Y, LOOKUPI=2

LOOKUP LOOKUPI=3,
        NAME=HHINCOME_Lookup,
          LOOKUP[1]=HHTAZ, RESULT=HHINC_LT15,
          LOOKUP[2]=HHTAZ, RESULT=HHINC_LT25,
          LOOKUP[3]=HHTAZ, RESULT=HHINC_LT50,
          LOOKUP[4]=HHTAZ, RESULT=HHINC_LT75,
          LOOKUP[5]=HHTAZ, RESULT=HHINC_75KP,
        INTERPOLATE=F, FAIL[1]=0, FAIL[2]=0, FAIL[3]=0


ARRAY TYPE=D K=4, CMXD=4, CACC=4, CINC15K=4
ARRAY TYPE=D CINC=4,4
ARRAY TYPE=D CSIZ=4,4
ARRAY TYPE=D CWRK=4,4
ARRAY TYPE=D CDUT=4,2
ARRAY TYPE=4 INC_TOT=ZONES
ARRAY TYPE=D VLOW_INC=ZONES

ARRAY TYPE=D UTIL=4, EXPUTIL=4, HHSHARE=4, PRB_AUTO=4, CLASS_HH=4, TOT_HH=5,7
ARRAY TYPE=C10 CntyName=7

IF(I == 1)

; INITIALIZATION

    LOOP _aa = 1,5
      LOOP _cc = 1, 7
         TOT_HH[_aa][_cc] = 0.0
     ENDLOOP
    ENDLOOP

  CntyName[1] = 'Nasssau   '
  CntyName[2] = 'Duval     '
  CntyName[3] = 'StJones   '
  CntyName[4] = 'Clay      '
  CntyName[5] = 'Baker     '
  CntyName[6] = 'Putnam    '
  
  
  ; MODEL PARAMETERS
  
  ; Constants
    K[1]    = COEFFA0(1,1)
    K[2]    = COEFFA1(1,1)
    K[3]    = COEFFA2(1,1)
    K[4]    = COEFFA3(1,1)
  
  ; Household income coefficients
  ; CINC[auto choice, income class]
 
  CINC[1][1] = COEFFA0(1,2)
  CINC[1][2] = COEFFA0(1,3)
  CINC[1][3] = COEFFA0(1,4)
  CINC[1][4] = COEFFA0(1,5)
    
  CINC[2][1] = COEFFA1(1,2)
  CINC[2][2] = COEFFA1(1,3)
  CINC[2][3] = COEFFA1(1,4)
  CINC[2][4] = COEFFA1(1,5)
  
  CINC[3][1] = COEFFA2(1,2)
  CINC[3][2] = COEFFA2(1,3)
  CINC[3][3] = COEFFA2(1,4)
  CINC[3][4] = COEFFA2(1,5)
  
  CINC[4][1] = COEFFA3(1,2)
  CINC[4][2] = COEFFA3(1,3)
  CINC[4][3] = COEFFA3(1,4)
  CINC[4][4] = COEFFA3(1,5)

 
  ; Household size coefficients
  ; CSIZ[auto choice, household size class]
 
  CSIZ[1][1] = COEFFA0(1,6)
  CSIZ[1][2] = COEFFA0(1,7)
  CSIZ[1][3] = COEFFA0(1,8)
  CSIZ[1][4] = COEFFA0(1,9)
    
  CSIZ[2][1] = COEFFA1(1,6)
  CSIZ[2][2] = COEFFA1(1,7)
  CSIZ[2][3] = COEFFA1(1,8)
  CSIZ[2][4] = COEFFA1(1,9)
  
  CSIZ[3][1] = COEFFA2(1,6)
  CSIZ[3][2] = COEFFA2(1,7)
  CSIZ[3][3] = COEFFA2(1,8)
  CSIZ[3][4] = COEFFA2(1,9)
  
  CSIZ[4][1] = COEFFA3(1,6)
  CSIZ[4][2] = COEFFA3(1,7)
  CSIZ[4][3] = COEFFA3(1,8)
  CSIZ[4][4] = COEFFA3(1,9)


  ; Household workers coefficients
  ; CWRK[auto choice, number of workers class]
 
  CWRK[1][1] = COEFFA0(1,10)
  CWRK[1][2] = COEFFA0(1,11)
  CWRK[1][3] = COEFFA0(1,12)
  CWRK[1][4] = COEFFA0(1,13)
    
  CWRK[2][1] = COEFFA1(1,10)
  CWRK[2][2] = COEFFA1(1,11)
  CWRK[2][3] = COEFFA1(1,12)
  CWRK[2][4] = COEFFA1(1,13)
  
  CWRK[3][1] = COEFFA2(1,10)
  CWRK[3][2] = COEFFA2(1,11)
  CWRK[3][3] = COEFFA2(1,12)
  CWRK[3][4] = COEFFA2(1,13)
  
  CWRK[4][1] = COEFFA3(1,10)
  CWRK[4][2] = COEFFA3(1,11)
  CWRK[4][3] = COEFFA3(1,12)
  CWRK[4][4] = COEFFA3(1,13)


  ; Mixed density coefficients
  ; CMXD[auto choice]
 
  CMXD[1] = COEFFA0(1,14)
  CMXD[2] = COEFFA1(1,14)
  CMXD[3] = COEFFA2(1,14)
  CMXD[4] = COEFFA3(1,14)

  ; Composite accessibility coefficients
  ; CACC[auto choice]
 
  CACC[1] = COEFFA0(1,15)
  CACC[2] = COEFFA1(1,15)
  CACC[3] = COEFFA2(1,15)
  CACC[4] = COEFFA3(1,15)

  ; Very low income households coefficients
  
  CINC15K[1] = COEFFA0(1,16)
  CINC15K[2] = COEFFA1(1,16)
  CINC15K[3] = COEFFA2(1,16)
  CINC15K[4] = COEFFA3(1,16)
  
  
 ; Report coefficient values on debug output file
 
 LOOP _a = 1, 4
   IF(_a == 1) 
    PRINT LIST = '\nCOEFFICIENTS -- AUTO AVAILABILITY MODEL', PRINTO=1
    PRINT LIST = '\nCHOICE    K      INC1    INC2    INC3    INC4    SIZ1    SIZ2    SIZ3    SIZ4    WRK1    WRK2    WRK3    WRK4    DUT1    DUT2  MIXDEN  COMACC', PRINTO=1
    PRINT LIST = '--------------------------------------------------------------------------------------------------------------------------------------------------------', PRINTO=1
    ENDIF   
    PRINT LIST = 'Auto', _a(1.0), K[_a](8.4), 
                                  CINC[_a][1](8.4),CINC[_a][2](8.4),CINC[_a][3](8.4),CINC[_a][4](8.4),
                                  CSIZ[_a][1](8.4),CSIZ[_a][2](8.4),CSIZ[_a][3](8.4),CSIZ[_a][4](8.4),
                                  CWRK[_a][1](8.4),CWRK[_a][2](8.4),CWRK[_a][3](8.4),CWRK[_a][4](8.4),
                                  CDUT[_a][1](8.4),CDUT[_a][2](8.4),
                                  CMXD[_a](8.4),CACC[_a](8.4), PRINTO=1
    IF(_a == 4) PRINT LIST = '---------------------------------------------------------------------------------------------------------------------------------------------', PRINTO=1
 ENDLOOP
 
 ENDIF  ; end initialization statements

PAR ZONES={ZONESI} zonemsg=100

; TAZ 
ZN=ZI.1.ZONE

; County

_cnty = 1; ZI.1.COUNTY
;use single quote here (') not double (")
; IF(CntyFIPS == 12105) _cnty = 1      ;POLK
;IF(CntyFIPS == 12015) _cnty = 1      ;CHARLOTTE
;IF(CntyFIPS == 12021) _cnty = 2      ;COLLIER
;IF(CntyFIPS == 12027) _cnty = 3      ;DESOTO
;IF(CntyFIPS == 12043) _cnty = 4      ;GLADES
;IF(CntyFIPS == 12049) _cnty = 5      ;HARDEE
;IF(CntyFIPS == 12051) _cnty = 6      ;HENDRY
;IF(CntyFIPS == 12055) _cnty = 7      ;HIGHLANDS
;IF(CntyFIPS == 12071) _cnty = 8      ;LEE
;IF(CntyFIPS == 12081) _cnty = 9      ;MANATEE
;IF(CntyFIPS == 12093) _cnty =10      ;OKEECHOBEE
;IF(CntyFIPS == 12105) _cnty =11      ;POLK
;IF(CntyFIPS == 12115) _cnty =12      ;SARASOTA

; Total households for this TAZ
TOTHHLDS=ZI.1.RESDHHLD

; Mixed household & employment density
MIXDEN=ZI.3.MixedDen

; Composite Accessibility
COM_ACC = ZI.5.COMP_ACC

; Very low income households percentage
INC_TOT[I]=HHINCOME_LOOKUP(1,I)+HHINCOME_LOOKUP(2,I)+HHINCOME_LOOKUP(3,I)+HHINCOME_LOOKUP(4,I)+HHINCOME_LOOKUP(5,I)

IF(INC_TOT[I]>0)
  VLOW_INC[I]=HHINCOME_LOOKUP(1,I)/INC_TOT[I]
ELSE
  VLOW_INC[I]=0
ENDIF

; Compute auto availability utilities for each household class, as defined by
; the income group, number of workers, household size, and type of dwelling unit

LOOP _ii=1,4

    LOOP _ss=1,4
 
        LOOP _ww=1,4
 
         ; Initialize households for each trip generation class
         CLASS_HH[1] = 0.0
         CLASS_HH[2] = 0.0
         CLASS_HH[3] = 0.0
         CLASS_HH[4] = 0.0
         ;CLASS_HH[5] = 0.0
                    
            LOOP _dd=1,2

            ; Household classification lookup function index (Income/Persons/Workers/DUType);
                
            IPWD=1000*_ii+100*_ss+10*_ww+_dd
            _recid = IPWD*10000+ZN

            FRAC_HH=HHFRAC(1,_recid)                  ; fraction of households in this inc/size/wrk/du class

            ; Compute utility for each auto choice
    
           LOOP _a = 1,4 
        
               UTIL[_a] = K[_a]                  + 
                          CINC[_a][_ii]          +
                          CSIZ[_a][_ss]          + 
                          CWRK[_a][_ww]          +
                          CDUT[_a][_dd]          +
                          CMXD[_a] * MIXDEN      +
                          CACC[_a] * COMP_ACC    +
                          CINC15K[_a] * VLOW_INC[I]

               EXPUTIL[_a] = EXP(UTIL[_a])
        
               SUMEXPUTIL = SUMEXPUTIL + EXPUTIL[_a]
        
               ENDLOOP
         
               ; Choice probabilities
                    
               PRB_AUTO[1] =  EXPUTIL[1]/SUMEXPUTIL
               PRB_AUTO[2] =  EXPUTIL[2]/SUMEXPUTIL
               PRB_AUTO[3] =  EXPUTIL[3]/SUMEXPUTIL
               PRB_AUTO[4] =  1.0 - (PRB_AUTO[1] + PRB_AUTO[2] + PRB_AUTO[3])
               SUMEXPUTIL = 0.0

               ; Households by auto choice in each inc/size/wrk/du class
               HHSHARE[1]  =  PRB_AUTO[1] * TOTHHLDS * FRAC_HH   
               HHSHARE[2]  =  PRB_AUTO[2] * TOTHHLDS * FRAC_HH   
               HHSHARE[3]  =  PRB_AUTO[3] * TOTHHLDS * FRAC_HH   
               HHSHARE[4]  =  PRB_AUTO[4] * TOTHHLDS * FRAC_HH    

               ; Household auto choice aggregate statistics

               CLASS_HH[1] = CLASS_HH[1] + HHSHARE[1]
               CLASS_HH[2] = CLASS_HH[2] + HHSHARE[2]
               CLASS_HH[3] = CLASS_HH[3] + HHSHARE[3]
               CLASS_HH[4] = CLASS_HH[4] + HHSHARE[4]
          
               TOT_HH[1][_cnty] = TOT_HH[1][_cnty] + HHSHARE[1]
               TOT_HH[2][_cnty] = TOT_HH[2][_cnty] + HHSHARE[2]
               TOT_HH[3][_cnty] = TOT_HH[3][_cnty] + HHSHARE[3]
               TOT_HH[4][_cnty] = TOT_HH[4][_cnty] + HHSHARE[4]
                    
               TOT_HH[1][7] = TOT_HH[1][7] + HHSHARE[1]
               TOT_HH[2][7] = TOT_HH[2][7] + HHSHARE[2]
               TOT_HH[3][7] = TOT_HH[3][7] + HHSHARE[3]
               TOT_HH[4][7] = TOT_HH[4][7] + HHSHARE[4]
               TOT_HH[5][7] = TOT_HH[5][7] + HHSHARE[1] + HHSHARE[2] + HHSHARE[3] + HHSHARE[4] 

               ; Now some debugging
               IF (ZN == {SelOrigin}) 
          
                 IF(_ii==1 && _ss==1 && _ww==1 && _dd==1)
                 PRINT LIST="\n\nLOGIT MODEL RESULTS--AUTO OWNERSHIP CHOICE PROBABILITIES", PRINTO=1
                 PRINT LIST="\n\nSelect Zone                =      ", I(5.0), PRINTO=1
                 PRINT LIST='Total households this zone = ', TOTHHLDS(10.2), PRINTO=1
                 PRINT LIST='Mixed density              = ', MIXDEN(10.4), PRINTO=1
                 PRINT LIST='Composite accessibility         = ', COMP_ACC(10.4), PRINTO=1
                 ENDIF
                 PRINT LIST="\n\nHHInc=",_ii(1.0),"   HHSize=",_ss(1.0),"   HHWrkrs=",_ww(1.0),"   DUType=",_dd(1.0), PRINTO=1
                 PRINT LIST='Fraction of zonal households = ', FRAC_HH(10.8), PRINTO=1
                 PRINT LIST="UTIL A0 = ", UTIL[1](10.4), "    PRB A0 = ", PRB_AUTO[1]*100(10.2),"%", "    HHLDS A0 = ", HHSHARE[1](10.4), PRINTO=1
                 PRINT LIST="UTIL A1 = ", UTIL[2](10.4), "    PRB A1 = ", PRB_AUTO[2]*100(10.2),"%", "    HHLDS A1 = ", HHSHARE[2](10.4), PRINTO=1
                 PRINT LIST="UTIL A2 = ", UTIL[3](10.4), "    PRB A2 = ", PRB_AUTO[3]*100(10.2),"%", "    HHLDS A2 = ", HHSHARE[3](10.4), PRINTO=1
                 PRINT LIST="UTIL A3 = ", UTIL[4](10.4), "    PRB A3 = ", PRB_AUTO[4]*100(10.2),"%", "    HHLDS A3 = ", HHSHARE[4](10.4), PRINTO=1

               ENDIF

              ; Write out at the end of each dwelling unit loop to report households
              ; by the classes required in trip generation (inc/aut/wrk/hhs)
          
              LOOP _aa = 1,4
              RO.TAZ  = ZN
              RO.INC  = _ii
       RO.AUT  = _aa
       RO.WRK  = _ww
       RO.SIZE = _ss
       RO.RECIDX = (_ii*1000 + _aa*100 + _ww*10 + _ss)*10000 + ZN
              RO.HHLDS = CLASS_HH[_aa]
              IF(_dd == 2) WRITE RECO=1
              ENDLOOP
     
          ENDLOOP    ; end dwelling unit loop
        ENDLOOP     ; end of workers loop
    ENDLOOP   ; end of hh size loop
ENDLOOP   ; end of income loop


; Report aggregate model results

IF(I == ZONES)

   PRINT LIST = "AUTO OWNERSHIP MODEL RESULTS", PRINTO=2
  
   LOOP _xx = 1,7
  
   IF(_xx < 7) PRINT LIST = "\n\n County:  ", CntyName[_xx], PRINTO=2
   IF(_xx == 7) PRINT LIST = "\n\n Region Total", PRINTO=2
   
    LOOP _yy = 0,4
   
     IF(_yy < 4) PRINT LIST = "   Households,  ", _yy(1.0), " Autos =", TOT_HH[_yy+1][_xx](10.2),  PRINTO=2
     IF(_yy == 4) PRINT LIST = "   Households ", "All Autos =", TOT_HH[5][_xx](10.2),  PRINTO=2
   
   ENDLOOP

  ENDLOOP

ENDIF

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TRIPGEN\TGMAT00N.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{CATALOG_DIR}\APPLICATIONS\TGMAT00N.PRN" MSG='New TMU Trip Generation'
FILEI LOOKUPI[4] = "{Scenario_Dir}\INPUT\TripGEN\HBW_ARates.csv"
FILEI LOOKUPI[3] = "{Scenario_Dir}\Input\TRIPGEN\jaxemp_taz_level.dbf"
FILEI LOOKUPI[1] = "{Scenario_Dir}\Input\TRIPGEN\Work_Prates.csv"
FILEI LOOKUPI[2] = "{Scenario_Dir}\Input\TRIPGEN\NonWork_PRates.csv"
; header "IAP_CLASS	IAP	INCOME	AUTO	PERSON	HBSH_PRATE	HBSR_PRATE	HBO_PRATE	NHB_PRATE	HBCU_PRATE	HBSC_PRATE"
FILEI LOOKUPI[5] = "{SCENARIO_DIR}\OUTPUT\AUTOOWN_MODEL.DBF"
FILEI LOOKUPI[6] = "{Scenario_Dir}\Input\TRIPGEN\OBO_ARates.csv"
; header #1 Purpose, #2 PurposeNo, #3 Retail Trade, #4 Arts, Entertainment, and Recreation, #5 Accommodation and Food Services, #6 Educational Services, #7	Health Care and Social Assistance, #8	enrlsc - enrollment pk-12, #9	enrluniv - university, #10 TotalHH

FILEI LOOKUPI[7] = "{Scenario_Dir}\Input\TRIPGEN\school_enroll.dbf"
FILEI ZDATI[1] = "{Scenario_Dir}\Input\TRIPGEN\ZDATA_10A.dbf"
FILEO PRINTO[2] = "{SCENARIO_DIR}\OUTPUT\TG_REPORT.TXT"
FILEO PRINTO[1] = "{SCENARIO_DIR}\OUTPUT\TRIPGEN_DEBUG.TXT"

FILEO RECO[1] = "{SCENARIO_DIR}\OUTPUT\PANDA_{ALT}{Year}.DBF",
    FIELDS = TAZ(4.0), 
  HBWP1(10.3), HBWP2(10.3), HBWP3(10.3), HBWP4(10.3), HBWP5(10.3),  
  HBSHP1(10.3), HBSHP2(10.3), HBSHP3(10.3), HBSHP4(10.3), HBSHP5(10.3), 
    HBSRP1(10.3), HBSRP2(10.3), HBSRP3(10.3), HBSRP4(10.3), HBSRP5(10.3),  
    HBOP1(10.3), HBOP2(10.3), HBOP3(10.3), HBOP4(10.3), HBOP5(10.3), 
    HBSCP1(10.3), HBSCP2(10.3), HBSCP3(10.3), HBSCP4(10.3),
    HBCUP1(10.3), HBCUP2(10.3), HBCUP3(10.3), HBCUP4(10.3),  
  NHBWP(10.3), NHBOP(10.3), 
    HBWA1(10.3), HBWA2(10.3), HBWA3(10.3), HBWA4(10.3), HBWA5(10.3), 
  HBSHA(10.3), HBSRA(10.3), HBOA(10.3),  HBSCA(10.3), HBCUA(10.3),  
    NHBWA(10.3), NHBOA(10.3)
 
PAR ZONES={zonesa}, ZONEMSG=100


; Read in lookup Work Production Rates
LOOKUP LOOKUPI=1,
       NAME=Work_PRates,
         LOOKUP[1]=1, RESULT=6,    ; Home-Based Work
         LOOKUP[2]=1, RESULT=7,    ; Non-Home-Based Work
       FAIL=0,0,0,INTERPOLATE=N


; Read in lookup Non-Work Production Rates
LOOKUP LOOKUPI=2,
       NAME=NonWork_PRates,
         LOOKUP[1]=1, RESULT=6,    ; Home-Based Shopping
         LOOKUP[2]=1, RESULT=7,    ; Home-Based Social/Recreation
         LOOKUP[3]=1, RESULT=8,    ; Home-Based Other
         LOOKUP[4]=1, RESULT=9,    ; Non-Home-Based
         LOOKUP[5]=1, RESULT=10,   ; Home-Based College/University
         LOOKUP[6]=1, RESULT=11,   ; Home-Based School
       FAIL=0,0,0,INTERPOLATE=N

; Read in lookup for employment at TAZ level
LOOKUP LOOKUPI=3,
       NAME=TAZ_Emp,
         LOOKUP[1]=TAZ, RESULT=ACCOMMODAT,
         LOOKUP[2]=TAZ, RESULT=ADMINISTRA,
         LOOKUP[3]=TAZ, RESULT=AGRICULTUR,
         LOOKUP[4]=TAZ, RESULT=ARTS,
         LOOKUP[5]=TAZ, RESULT=CONSTRUCTI,
         LOOKUP[6]=TAZ, RESULT=EDUCATIONA,
         LOOKUP[7]=TAZ, RESULT=FINANCE_AN,
         LOOKUP[8]=TAZ, RESULT=HEALTH_CAR,
         LOOKUP[9]=TAZ, RESULT=INFORMATIO,
         LOOKUP[10]=TAZ, RESULT=MANAGEMENT,
         LOOKUP[11]=TAZ, RESULT=MANUFACTUR,
         LOOKUP[12]=TAZ, RESULT=MINING,
         LOOKUP[13]=TAZ, RESULT=OTHER_SERV,
         LOOKUP[14]=TAZ, RESULT=PROFESSION,
         LOOKUP[15]=TAZ, RESULT=PUBLIC_ADM,
         LOOKUP[16]=TAZ, RESULT=REAL_ESTAT,
         LOOKUP[17]=TAZ, RESULT=RETAIL_TRA,
         LOOKUP[18]=TAZ, RESULT=TRANSPORTA,
         LOOKUP[19]=TAZ, RESULT=UTILITIES,
         LOOKUP[20]=TAZ, RESULT=WHOLESALE_,
        FAIL=0,0,0,INTERPOLATE=N


LOOKUP LOOKUPI=4,
       NAME=HBW_ARates,                 ; Home-based work trip attraction rates
         LOOKUP[1]=1, RESULT=2,         ; Accommodation and Food Services
         LOOKUP[2]=1, RESULT=3,         ; Administrative and Support and Waste Management and Remediation Services
         LOOKUP[3]=1, RESULT=4,         ; Agriculture, Forestry, Fishing and Hunting
         LOOKUP[4]=1, RESULT=5,         ; Arts, Entertainment, and Recreation
         LOOKUP[5]=1, RESULT=6,         ; Construction
         LOOKUP[6]=1, RESULT=7,         ; Educational Services
         LOOKUP[7]=1, RESULT=8,         ; Finance and Insurance
         LOOKUP[8]=1, RESULT=10,        ; Health Care and Social Assistance
         LOOKUP[9]=1, RESULT=11,        ; Information
         LOOKUP[10]=1, RESULT=12,       ; Management of Companies and Enterprises
         LOOKUP[11]=1, RESULT=9,        ; Food Manufacturing
         LOOKUP[12]=1, RESULT=13,       ; Mining, Quarrying, and Oil and Gas Extraction
         LOOKUP[13]=1, RESULT=14,       ; Other Services (except Public Administration)
         LOOKUP[14]=1, RESULT=17,       ; Professional, Scientific, and Technical Services
         LOOKUP[15]=1, RESULT=18,       ; Public Administration
         LOOKUP[16]=1, RESULT=19,       ; Real Estate and Rental and Leasing
         LOOKUP[17]=1, RESULT=20,       ; Retail Trade
         LOOKUP[18]=1, RESULT=22,       ; Transportation and Warehousing
         LOOKUP[19]=1, RESULT=23,       ; Utilities
         LOOKUP[20]=1, RESULT=24,       ; Wholesale Trade
        FAIL=0,0,0,INTERPOLATE=N
        
LOOKUP, NAME = RETAILA, LOOKUP[1]=2, RESULT=3, INTERPOLATE=N, LIST=Y, LOOKUPI=6
LOOKUP, NAME = ARTSA, LOOKUP[1]=2, RESULT=4, INTERPOLATE=N, LIST=Y, LOOKUPI=6
LOOKUP, NAME = ACCOMA, LOOKUP[1]=2, RESULT=5, INTERPOLATE=N, LIST=Y, LOOKUPI=6
LOOKUP, NAME = EDUA, LOOKUP[1]=2, RESULT=6, INTERPOLATE=N, LIST=Y, LOOKUPI=6
LOOKUP, NAME = HEALTHA, LOOKUP[1]=2, RESULT=7, INTERPOLATE=N, LIST=Y, LOOKUPI=6
LOOKUP, NAME = ENRLSCA, LOOKUP[1]=2, RESULT=8, INTERPOLATE=N, LIST=Y, LOOKUPI=6
LOOKUP, NAME = ENRLUNIVA, LOOKUP[1]=2, RESULT=9, INTERPOLATE=N, LIST=Y, LOOKUPI=6
LOOKUP, NAME = TOTALHHA, LOOKUP[1]=2, RESULT=10, INTERPOLATE=N, LIST=Y, LOOKUPI=6

HBSHA[1] = RETAILA(1,1)
HBSHA[2] = ARTSA(1,1)
HBSHA[3] = ACCOMA(1,1)
HBSHA[4] = EDUA(1,1)
HBSHA[5] = HEALTHA(1,1)
HBSHA[6] = ENRLSCA(1,1)
HBSHA[7] = ENRLUNIVA(1,1)
HBSHA[8] = TOTALHHA(1,1)

HBSRA[1] = RETAILA(1,2)
HBSRA[2] = ARTSA(1,2)
HBSRA[3] = ACCOMA(1,2)
HBSRA[4] = EDUA(1,2)
HBSRA[5] = HEALTHA(1,2)
HBSRA[6] = ENRLSCA(1,2)
HBSRA[7] = ENRLUNIVA(1,2)
HBSRA[8] = TOTALHHA(1,2)

HBSCA[1] = RETAILA(1,3)
HBSCA[2] = ARTSA(1,3)
HBSCA[3] = ACCOMA(1,3)
HBSCA[4] = EDUA(1,3)
HBSCA[5] = HEALTHA(1,3)
HBSCA[6] = ENRLSCA(1,3)
HBSCA[7] = ENRLUNIVA(1,3)
HBSCA[8] = TOTALHHA(1,3)

HBCUA[1] = RETAILA(1,4)
HBCUA[2] = ARTSA(1,4)
HBCUA[3] = ACCOMA(1,4)
HBCUA[4] = EDUA(1,4)
HBCUA[5] = HEALTHA(1,4)
HBCUA[6] = ENRLSCA(1,4)
HBCUA[7] = ENRLUNIVA(1,4)
HBCUA[8] = TOTALHHA(1,4)

HBOA[1] = RETAILA(1,5)
HBOA[2] = ARTSA(1,5)
HBOA[3] = ACCOMA(1,5)
HBOA[4] = EDUA(1,5)
HBOA[5] = HEALTHA(1,5)
HBOA[6] = ENRLSCA(1,5)
HBOA[7] = ENRLUNIVA(1,5)
HBOA[8] = TOTALHHA(1,5)

NHBWA[1] = RETAILA(1,6)
NHBWA[2] = ARTSA(1,6)
NHBWA[3] = ACCOMA(1,6)
NHBWA[4] = EDUA(1,6)
NHBWA[5] = HEALTHA(1,6)
NHBWA[6] = ENRLSCA(1,6)
NHBWA[7] = ENRLUNIVA(1,6)
NHBWA[8] = TOTALHHA(1,6)

NHBOA[1] = RETAILA(1,7)
NHBOA[2] = ARTSA(1,7)
NHBOA[3] = ACCOMA(1,7)
NHBOA[4] = EDUA(1,7)
NHBOA[5] = HEALTHA(1,7)
NHBOA[6] = ENRLSCA(1,7)
NHBOA[7] = ENRLUNIVA(1,7)
NHBOA[8] = TOTALHHA(1,7)

; Read in household classification

LOOKUP LOOKUPI=5, NAME=HHCLASS, LOOKUP[1]=1, RESULT=7, 
       FAIL=0,0,0,INTERPOLATE=N, LIST=N

; Read in School Enrollment

LOOKUP LOOKUPI=7, NAME=SCHOOL_ENROLL, LOOKUP[1]=TAZ, RESULT=SCHOOL,
                                      LOOKUP[2]=TAZ, RESULT=UNIVERSITY,
       FAIL=0,0,0, INTERPOLATE=N

; Define arrays

ARRAY TYPE=D HHLDS=ZONES
ARRAY TYPE=D HBWP_SPM=ZONES, HBSHP_SPM=ZONES, HBSRP_SPM=ZONES, HBOP_SPM=ZONES, NHBOP_SPM=ZONES
ARRAY TYPE=D HBWA_SPM=ZONES, HBSHA=ZONES, HBSRA=ZONES, HBSCA=ZONES, HBCUA=ZONES, HBOA=ZONES, NHBOA=ZONES,NHBWA=ZONES
ARRAY TYPE=D HBWTRIPS=ZONES,4,4,4
ARRAY TYPE=D HBSHTRIPS=ZONES,4,4,4
ARRAY TYPE=D HBSRTRIPS=ZONES,4,4,4
ARRAY TYPE=D HBOTRIPS=ZONES,4,4,4

ARRAY TYPE=D HBWPRODS=ZONES,5
ARRAY TYPE=D HBSHPRODS=ZONES,5
ARRAY TYPE=D HBSRPRODS=ZONES,5
ARRAY TYPE=D HBOPRODS=ZONES,5
ARRAY TYPE=D NHBWPRODS=ZONES
ARRAY TYPE=D NHBOPRODS=ZONES
ARRAY TYPE=D HBSCPRODS=ZONES,4
ARRAY TYPE=D HBCUPRODS=ZONES,4

ARRAY TYPE=D HBWATTS=ZONES,5
ARRAY TYPE=D HBSHATTS=ZONES
ARRAY TYPE=D HBSRATTS=ZONES
ARRAY TYPE=D HBOATTS=ZONES
ARRAY TYPE=D NHBWATTS=ZONES
ARRAY TYPE=D NHBOATTS=ZONES
ARRAY TYPE=D HBSCATTS=ZONES
ARRAY TYPE=D HBCUATTS=ZONES

ARRAY TYPE=D TOTHBWP=6, TOTHBSHP=5, TOTHBSRP=5, TOTHBOP=5, TOTHBSCP=5, TOTHBCUP=5, TOTHBWA=6


; Read Zonal data
  
    HHLDS[I]    = ZI.1.RESDHHLD


; Description of household markets
    ;  HBW
        ; 1 - C0               ;Zero Cars available in household
        ; 2 - CLWLI            ;Cars less than workers (Low Income Household)
        ; 3 - CLWHI            ;Cars less than workers (High Income Household)
        ; 4 - CGWLI            ;Cars greater than or equal to workers (Low Income Household)
        ; 5 - CGWHI            ;Cars greater than or equal to workers (High Income Household)
        
    ;  HBNW except HBCU and HBSC
        ; 1 - C0               ;Zero Cars available in household
        ; 2 - CLPLI            ;Two person, one car households (Low Income)
        ; 3 - CLPHI            ;Two person, one car households (High Income)
        ; 4 - CGPLI            ;One person one car, or two+ car household (Low Income)
        ; 5 - CGPHI            ;One person one car, or two+ car household  (High Income Household) 
        
    ;  HBCU and HBSC 
        ; 1                ; 1 Person household
        ; 2                ; 2 Person household
        ; 3                ; 3 Person household
        ; 4                ; 4+ Person household

  ;  NHBW  -- productions based on same markets as HBW
  ;  NHB   -- productions based on same markets as HBO

  ; Notes on Household Income   
    ; Low Income Household     = Income category 1, 2
    ; High Income Household    = Income category 3, 4

    

IF (I == ZONES)   ;  Start calculations at end of MATRIX implicit IZONE loop
    
   LOOP ZN=1,ZONES  
       
     ; Compute trip productions for each household class 
    
   LOOP _ii = 1,4
   
    LOOP _aa = 1,4
      
     LOOP _ww = 1,4

     IAW = (100*_ii) + (10*_aa) + _ww                ; index for work trip rate lookup functions
          
     LOOP _ss = 1,4
          
     IAP = (100*_ii) + (10*_aa) + _ss              ; index for non-work trip rate lookup functions
                    
     _recid = (_ii*1000 + _aa*100 + _ww*10 + _ss)*10000 + ZN  ; index for household classification lookup
          
     HHS = HHCLASS(1,_recid)                                  ; total households for this class
            
     HBWTRIPS[ZN][_ii][_aa][_ww]  = HBWTRIPS[ZN][_ii][_aa][_ww]  + Work_PRates(1,IAW) * HHS

     HBSHTRIPS[ZN][_ii][_aa][_ss] = HBSHTRIPS[ZN][_ii][_aa][_ss] + NonWork_PRates(1,IAP) * HHS
     HBSRTRIPS[ZN][_ii][_aa][_ss] = HBSRTRIPS[ZN][_ii][_aa][_ss] + NonWork_PRates(2,IAP) * HHS
     HBOTRIPS[ZN][_ii][_aa][_ss]  = HBOTRIPS[ZN][_ii][_aa][_ss]  + NonWork_PRates(3,IAP) * HHS

     NHBWPRODS[ZN]                = NHBWPRODS[ZN] + Work_PRates(2,IAW) * HHS
     NHBOPRODS[ZN]                = NHBOPRODS[ZN] + NonWork_PRates(4,IAP) * HHS

     HBSCPRODS[ZN][_ss] = HBSCPRODS[ZN][_ss] + NonWork_PRates(6,IAP) * HHS
     HBCUPRODS[ZN][_ss] = HBCUPRODS[ZN][_ss] + NonWork_PRates(5,IAP) * HHS
          
     ; Aggregate into the household markets used in destination and mode choice (see list above);
          
          ; First for HBW
          
          IF(_aa == 1) 
              _mm = 1                                    ; zero car households
          ELSEIF(_ww > _aa)
             _mm = 1 + MIN(_ii,2)                        ; car insufficient households, by 3 income levels
          ELSE
             _mm = 3 + MIN(_ii,2)                        ; car sufficient households, by 3 income levels
          ENDIF
                    
          HBWPRODS[ZN][_mm] = HBWPRODS[ZN][_mm] + Work_PRates(1,IAW) * HHS
          
          ; Then for HBNW
          
          IF(_aa == 1) 
            _mm = 1                                     ; zero car households
          ELSEIF(_ss == 2 && _aa == 2)
             _mm = 1 + MIN(_ii,2)                        ; car insufficient households, by 3 income levels
          ELSE
              _mm = 3 + MIN(_ii,2)                        ; car sufficient households, by 3 income levels
          ENDIF

          HBSHPRODS[ZN][_mm] = HBSHPRODS[ZN][_mm] + NonWork_PRates(1,IAP) * HHS
          HBSRPRODS[ZN][_mm] = HBSRPRODS[ZN][_mm] + NonWork_PRates(2,IAP) * HHS
          HBOPRODS[ZN][_mm]  = HBOPRODS[ZN][_mm]  + NonWork_PRates(3,IAP) * HHS
          
          
          ; Now some debugging
            
          IF(ZN == {SelOrigin})
            
           IF(_ii == 1 && _ww == 1 && _aa == 1 && _ss == 1)
           PRINT LIST = "TRIP PRODUCTIONS FOR ZONE = ", ZN(5), PRINTO=1
           PRINT LIST = "------------------------------------------------------", PRINTO=1
           PRINT LIST = "INC     AUT     WRK     SIZ      HBWTRIPS  HBSHTRIPS  HBSRTRIPS   HBOTRIPS", PRINTO=1
           ENDIF
           IF(_ss == 4) PRINT LIST = " ",_ii(2), "      ", _aa(2), "      ", _ww(2), "      ",   " -", "    ", HBWTRIPS[ZN][_ii][_aa][_ww](10.4), PRINTO=1
           IF(_ww == 4) PRINT LIST = " ",_ii(2), "      ", _aa(2), "      ", " -"  , "      ", _ss(2), "    ", "           ", 
                                     HBSHTRIPS[ZN][_ii][_aa][_ss](10.4), " ", HBSRTRIPS[ZN][_ii][_aa][_ss](10.4), " ", HBOTRIPS[ZN][_ii][_aa][_ss](10.4), PRINTO=1

          ENDIF

                   ENDLOOP ; PERSONS
                ENDLOOP ; WORKERS
            ENDLOOP ;AUTOS
        ENDLOOP ; INCM  

    ; Report total productions by household market for select zone
    
    IF(ZN == {SelOrigin})

      PRINT LIST = "\n\nSUMMARY OF TRIP PRODUCTIONS FOR ZONE = ", ZN(5), PRINTO=1
      PRINT LIST = "------------------------------------------------------", PRINTO=1
      PRINT LIST = "HHLD MARKET    HBW       HBSH      HBSR       HBO      HBSC      HBCU      NHBW      NHB", PRINTO=1
        LOOP _mm = 1, 5
     IF(_mm == 1) 
     PRINT LIST = "    ",_mm(2), "    ", HBWPRODS[ZN][_mm](10.4), HBSHPRODS[ZN][_mm](10.4), HBSRPRODS[ZN][_mm](10.4),
                          HBOPRODS[ZN][_mm](10.4), HBSCPRODS[ZN][_mm](10.4), HBCUPRODS[ZN][_mm](10.4),
                          NHBWPRODS[ZN](10.4), NHBOPRODS[ZN](10.4), PRINTO=1
     ELSEIF(_mm < 4)
     PRINT LIST = "    ",_mm(2), "    ", HBWPRODS[ZN][_mm](10.4), HBSHPRODS[ZN][_mm](10.4), HBSRPRODS[ZN][_mm](10.4),
                          HBOPRODS[ZN][_mm](10.4), HBSCPRODS[ZN][_mm](10.4), HBCUPRODS[ZN][_mm](10.4),
                          PRINTO=1
     ELSE
     PRINT LIST = "    ",_mm(2), "    ", HBWPRODS[ZN][_mm](10.4), HBSHPRODS[ZN][_mm](10.4), HBSRPRODS[ZN][_mm](10.4),
                          HBOPRODS[ZN][_mm](10.4), PRINTO=1
     ENDIF
        ENDLOOP
     
    ENDIF
  
  ; DONE CALCULATING RESIDENT TRIP PRODUCTIONS
  
    
        
  ; CALCULATE TRIP ATTRACTIONS
    
        LOOP _empc = 1,20
          HBWATTS[ZN][1] = HBWATTS[ZN][1] + TAZ_Emp(_empc,ZN)*HBW_ARates(_empc,1)
          HBWATTS[ZN][2] = HBWATTS[ZN][2] + TAZ_Emp(_empc,ZN)*HBW_ARates(_empc,2)
          HBWATTS[ZN][3] = HBWATTS[ZN][3] + TAZ_Emp(_empc,ZN)*HBW_ARates(_empc,3)
          HBWATTS[ZN][4] = HBWATTS[ZN][4] + TAZ_Emp(_empc,ZN)*HBW_ARates(_empc,4)
          HBWATTS[ZN][5] = HBWATTS[ZN][5] + TAZ_Emp(_empc,ZN)*HBW_ARates(_empc,5)
        ENDLOOP
        

          HBSHATTS[ZN] = HBSHATTS[ZN]+ TAZ_Emp(17,ZN)* HBSHA[1]+ TAZ_Emp(4,ZN)* HBSHA[2] + TAZ_Emp(1,ZN)* HBSHA[3]+ TAZ_Emp(6,ZN)* HBSHA[4]+ TAZ_Emp(8,ZN)* HBSHA[5]+ School_Enroll(1,ZN)* HBSHA[6]+ School_Enroll(2,ZN)* HBSHA[7] + HHLDS[ZN]* HBSHA[8]
          HBSRATTS[ZN] = HBSRATTS[ZN]+ TAZ_Emp(17,ZN)* HBSRA[1]+ TAZ_Emp(4,ZN)* HBSRA[2] + TAZ_Emp(1,ZN)* HBSRA[3]+ TAZ_Emp(6,ZN)* HBSRA[4]+ TAZ_Emp(8,ZN)* HBSRA[5]+ School_Enroll(1,ZN)* HBSRA[6]+ School_Enroll(2,ZN)* HBSRA[7] + HHLDS[ZN]* HBSRA[8]
          HBOATTS[ZN]  = HBOATTS[ZN] + TAZ_Emp(17,ZN)* HBOA[1]+ TAZ_Emp(4,ZN)* HBOA[2] + TAZ_Emp(1,ZN)* HBOA[3]+ TAZ_Emp(6,ZN)* HBOA[4]+ TAZ_Emp(8,ZN)* HBOA[5] + School_Enroll(1,ZN)* HBOA[6]+ School_Enroll(2,ZN)* HBOA[7] + HHLDS[ZN]* HBOA[8]
          HBCUATTS[ZN] = HBCUATTS[ZN]+ TAZ_Emp(17,ZN)* HBCUA[1]+ TAZ_Emp(4,ZN)* HBCUA[2] + TAZ_Emp(1,ZN)* HBCUA[3]+ TAZ_Emp(6,ZN)* HBCUA[4]+ TAZ_Emp(8,ZN)* HBCUA[5]+ School_Enroll(1,ZN)* HBCUA[6]+ School_Enroll(2,ZN)* HBCUA[7] + HHLDS[ZN]* HBCUA[8]
          HBSCATTS[ZN] = HBSCATTS[ZN]+ TAZ_Emp(17,ZN)* HBSCA[1]+ TAZ_Emp(4,ZN)* HBSCA[2] + TAZ_Emp(1,ZN)* HBSCA[3]+ TAZ_Emp(6,ZN)* HBSCA[4]+ TAZ_Emp(8,ZN)* HBSCA[5] + School_Enroll(1,ZN)* HBSCA[6]+ School_Enroll(2,ZN)* HBSCA[7] + HHLDS[ZN]* HBSCA[8]
          NHBWATTS[ZN] = NHBWATTS[ZN]+ TAZ_Emp(17,ZN)* NHBWA[1]+ TAZ_Emp(4,ZN)* NHBWA[2] + TAZ_Emp(1,ZN)* NHBWA[3]+ TAZ_Emp(6,ZN)* NHBWA[4]+ TAZ_Emp(8,ZN)* NHBWA[5] + School_Enroll(1,ZN)* NHBWA[6]+ School_Enroll(2,ZN)* NHBWA[7] + HHLDS[ZN]* NHBWA[8] 
          NHBOATTS[ZN] = NHBOATTS[ZN] + TAZ_Emp(17,ZN)* NHBOA[1]+ TAZ_Emp(4,ZN)* NHBOA[2] + TAZ_Emp(1,ZN)* NHBOA[3]+ TAZ_Emp(6,ZN)* NHBOA[4]+ TAZ_Emp(8,ZN)* NHBOA[5]+ School_Enroll(1,ZN)* NHBOA[6]+ School_Enroll(2,ZN)* NHBOA[7] + HHLDS[ZN]* NHBOA[8]


        

    ; COMPUTE TOTAL PRODUCTIONS AND ATTRACTIONS BY PURPOSE/MARKET
    
    LOOP _mm = 1,5
    
     TOTHBWP[_mm]  = TOTHBWP[_mm]  + HBWPRODS[ZN][_mm]
     TOTHBWP[6]    = TOTHBWP[6]    + HBWPRODS[ZN][_mm]    ; sum productions over all markets 
     TOTHBSHP[_mm] = TOTHBSHP[_mm] + HBSHPRODS[ZN][_mm]
     TOTHBSRP[_mm] = TOTHBSRP[_mm] + HBSRPRODS[ZN][_mm]
     TOTHBOP[_mm]  = TOTHBOP[_mm]  + HBOPRODS[ZN][_mm]
     TOTHBWA[_mm]  = TOTHBWA[_mm]  + HBWATTS[ZN][_mm]
     TOTHBWA[6]    = TOTHBWA[6]    + HBWATTS[ZN][_mm]     ; sum attractions over all markets
     
     IF(_mm < 5)
     TOTHBSCP[_mm] = TOTHBSCP[_mm] + HBSCPRODS[ZN][_mm]
     TOTHBSCP[5]   = TOTHBSCP[5]   + HBSCPRODS[ZN][_mm]   ; sum productions over all markets
     TOTHBCUP[_mm] = TOTHBCUP[_mm] + HBCUPRODS[ZN][_mm]
     TOTHBCUP[5]   = TOTHBCUP[5]   + HBCUPRODS[ZN][_mm]   ; sum productions over all markets
     ENDIF
     
     IF(_mm == 1)
     TOTNHBWP  = TOTNHBWP  + NHBWPRODS[ZN]
     TOTNHBOP   = TOTNHBOP   + NHBOPRODS[ZN]
     TOTHBSHA  = TOTHBSHA  + HBSHATTS[ZN]
     TOTHBSRA  = TOTHBSRA  + HBSRATTS[ZN]
     TOTHBOA   = TOTHBOA   + HBOATTS[ZN]
     TOTHBSCA  = TOTHBSCA  + HBSCATTS[ZN]
     TOTHBCUA  = TOTHBCUA  + HBCUATTS[ZN]
     TOTNHBWA  = TOTNHBWA  + NHBWATTS[ZN]
     TOTNHBOA  = TOTNHBOA  + NHBOATTS[ZN]

     ENDIF
     
    ENDLOOP
    
    ENDLOOP   ; (ZN=1,ZONES,  loop on zones)
  

  ; REPORT PRODUCTIONS AND ATTRACTIONS PRIOR TO TRIP BALANCING
    
  PRINT LIST = "TRIP GENERATION REPORT", PRINTO=2
  PRINT LIST = "\n\nREGIONAL TRIP PRODUCTION TOTALS PRIOR TO BALANCING", PRINTO=2
  PRINT LIST = "\n\n HHLD MKT     HBWP     HBSHP     HBSRP      HBOP     HBSCP     HBCUP     NHBWP     NHBOP", PRINTO=2
  LOOP _mm = 1, 5
    IF(_mm == 1)
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWP[_mm](10.0), TOTHBSHP[_mm](10.0), TOTHBSRP[_mm](10.0), TOTHBOP[_mm](10.0), TOTHBSCP[_mm](10.0), 
                    TOTHBCUP[_mm](10.0), TOTNHBWP(10.0), TOTNHBOP(10.0), PRINTO=2
    ELSEIF(_mm < 4)
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWP[_mm](10.0), TOTHBSHP[_mm](10.0), TOTHBSRP[_mm](10.0), TOTHBOP[_mm](10.0), TOTHBSCP[_mm](10.0), 
                    TOTHBCUP[_mm](10.0), PRINTO=2
  ELSE
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWP[_mm](10.0), TOTHBSHP[_mm](10.0), TOTHBSRP[_mm](10.0), TOTHBOP[_mm](10.0), PRINTO=2
  ENDIF
  ENDLOOP

  PRINT LIST = "\n\nREGIONAL TRIP ATTRACTION TOTALS PRIOR TO BALANCING", PRINTO=2
  PRINT LIST = "\n\n HHLD MKT     HBWA     HBSHA     HBSRA      HBOA     HBSCA     HBCUA     NHBWA     NHBOA", PRINTO=2
  LOOP _mm = 1, 5
    IF(_mm == 1)
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWA[_mm](10.0), TOTHBSHA(10.0), TOTHBSRA(10.0), TOTHBOA(10.0), TOTHBSCA(10.0), 
                    TOTHBCUA(10.0), TOTNHBWA(10.0), TOTNHBOA(10.0), PRINTO=2
  ELSE
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWA[_mm](10.0), PRINTO=2
  ENDIF
  ENDLOOP

 
 ; TRIP BALANCING
 
 ; Here we balance school to attractions, and HBW, IE, and truck trips to productions
 ; Note balancing is not required when applying destination choice models, but it helps to
 ; speed convergence of the shadow price used for doubly-constraining the HBW models
 
 
 ; Calculate trip balancing factors
  
 HBWR  = TOTHBWP[6] / TOTHBWA[6]
 HBSCR = TOTHBSCA / TOTHBSCP[5]
 HBCUR = TOTHBCUA / TOTHBCUP[5]
  
 ; Apply trip balancing factors and recalculate regional totals
 
 ; first initialize region totals to zero

 LOOP _mm = 1,5
  TOTHBWA[_mm] = 0.0
  IF(_mm < 5)
   TOTHBSCP[_mm] = 0.0
   TOTHBCUP[_mm] = 0.0
  ENDIF
 ENDLOOP
 
 
 LOOP ZN = 1,ZONES

  ; Now apply and compute totals

  LOOP _mm = 1,5
  
   HBWATTS[ZN][_mm] = HBWATTS[ZN][_mm] * HBWR
   TOTHBWA[_mm] = TOTHBWA[_mm] + HBWATTS[ZN][_mm]
   
   IF(_mm < 5) 
   HBSCPRODS[ZN][_mm] = HBSCPRODS[ZN][_mm] * HBSCR
   TOTHBSCP[_mm] = TOTHBSCP[_mm] + HBSCPRODS[ZN][_mm]
   HBCUPRODS[ZN][_mm] = HBCUPRODS[ZN][_mm] * HBCUR
   TOTHBCUP[_mm] = TOTHBCUP[_mm] + HBCUPRODS[ZN][_mm]
   ENDIF
   
  ENDLOOP
  
  /*PRINT LIST = "DEBUG", PRINTO=2
  PRINT LIST = "\n\n MARKET  HBSCPRODS  HBSR  TOTHBSCA  TOTHBSCP[5] ", PRINTO=2
  LOOP _mm = 1, 3
  PRINT LIST = "    ", _mm(1), HBSCPRODS[1][_mm](10.0), HBSCR(10.0), TOTHBSCA(10.0), TOTHBSCP[5](10.0), PRINTO=2
  ENDLOOP */
  
  ; Write out the daily P&A file
  
  RO.TAZ    = ZN
  RO.HBWP1  = HBWPRODS[ZN][1]
  RO.HBWP2  = HBWPRODS[ZN][2]
  RO.HBWP3  = HBWPRODS[ZN][3]
  RO.HBWP4  = HBWPRODS[ZN][4]
  RO.HBWP5  = HBWPRODS[ZN][5]
  RO.HBSHP1 = HBSHPRODS[ZN][1]
  RO.HBSHP2 = HBSHPRODS[ZN][2]
  RO.HBSHP3 = HBSHPRODS[ZN][3]
  RO.HBSHP4 = HBSHPRODS[ZN][4]
  RO.HBSHP5 = HBSHPRODS[ZN][5]
  RO.HBSRP1 = HBSRPRODS[ZN][1]
  RO.HBSRP2 = HBSRPRODS[ZN][2]
  RO.HBSRP3 = HBSRPRODS[ZN][3]
  RO.HBSRP4 = HBSRPRODS[ZN][4]
  RO.HBSRP5 = HBSRPRODS[ZN][5]
  RO.HBOP1  = HBOPRODS[ZN][1]
  RO.HBOP2  = HBOPRODS[ZN][2]
  RO.HBOP3  = HBOPRODS[ZN][3]
  RO.HBOP4  = HBOPRODS[ZN][4]
  RO.HBOP5  = HBOPRODS[ZN][5]
  RO.HBSCP1 = HBSCPRODS[ZN][1]
  RO.HBSCP2 = HBSCPRODS[ZN][2]
  RO.HBSCP3 = HBSCPRODS[ZN][3]
  RO.HBSCP4 = HBSCPRODS[ZN][4]
  RO.HBCUP1 = HBCUPRODS[ZN][1]
  RO.HBCUP2 = HBCUPRODS[ZN][2]
  RO.HBCUP3 = HBCUPRODS[ZN][3]
  RO.HBCUP4 = HBCUPRODS[ZN][4]
  RO.NHBWP  = NHBWPRODS[ZN]
  RO.NHBOP  = NHBOPRODS[ZN]
  RO.HBWA1  = HBWATTS[ZN][1]
  RO.HBWA2  = HBWATTS[ZN][2]
  RO.HBWA3  = HBWATTS[ZN][3]
  RO.HBWA4  = HBWATTS[ZN][4]
  RO.HBWA5  = HBWATTS[ZN][5]
  RO.HBSHA  = HBSHATTS[ZN]
  RO.HBSRA  = HBSRATTS[ZN]
  RO.HBOA   = HBOATTS[ZN]
  RO.HBSCA  = HBSCATTS[ZN]
  RO.HBCUA  = HBCUATTS[ZN]
  RO.NHBWA  = NHBWATTS[ZN]
  RO.NHBOA  = NHBOATTS[ZN]
  WRITE RECO=1
 ENDLOOP         ; end ZN loop

  ; REPORT PRODUCTIONS AND ATTRACTIONS AFTER TRIP BALANCING
    
  PRINT LIST = "\n\n\nREGIONAL TRIP PRODUCTION TOTALS AFTER BALANCING", PRINTO=2
  PRINT LIST = "\n\n HHLD MKT     HBWP     HBSHP     HBSRP      HBOP     HBSCP     HBCUP     NHBWP     NHBOP", PRINTO=2
  LOOP _mm = 1, 5
    IF(_mm == 1)
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWP[_mm](10.0), TOTHBSHP[_mm](10.0), TOTHBSRP[_mm](10.0), TOTHBOP[_mm](10.0), TOTHBSCP[_mm](10.0), 
                    TOTHBCUP[_mm](10.0), TOTNHBWP(10.0), TOTNHBOP(10.0), PRINTO=2
    ELSEIF(_mm < 5)
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWP[_mm](10.0), TOTHBSHP[_mm](10.0), TOTHBSRP[_mm](10.0), TOTHBOP[_mm](10.0), TOTHBSCP[_mm](10.0), TOTHBCUP[_mm](10.0), PRINTO=2
  ELSE
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWP[_mm](10.0), TOTHBSHP[_mm](10.0), TOTHBSRP[_mm](10.0), TOTHBOP[_mm](10.0), PRINTO=2
  ENDIF
  ENDLOOP

  PRINT LIST = "\n\nREGIONAL TRIP ATTRACTION TOTALS AFTER BALANCING", PRINTO=2
  PRINT LIST = "\n\n HHLD MKT     HBWA     HBSHA     HBSRA      HBOA     HBSCA     HBCUA     NHBWA     NHBOA", PRINTO=2
  LOOP _mm = 1, 5
    IF(_mm == 1)
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWA[_mm](10.0), TOTHBSHA(10.0), TOTHBSRA(10.0), TOTHBOA(10.0), TOTHBSCA(10.0), 
                    TOTHBCUA(10.0), TOTNHBWA(10.0), TOTNHBOA(10.0), PRINTO=2
  ELSE
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWA[_mm](10.0), PRINTO=2
  ENDIF
  ENDLOOP
 
ENDIF   ;(i=zones) 

ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*echo  Trip Generation Complete          = %date%  %time% >>{SCENARIO_DIR}\Output\runtime.prn
PRINT LIST="Trip Generation Complete", PRINTO=0
SLEEP TIME = 5
; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\PEAKINGFACTORS\PFMAT00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{CATALOG_DIR}\APPLICATIONS\PFMAT00A.PRN" MSG='Create PK-OP PA Tables'
FILEI ZDATI[1] = "{SCENARIO_DIR}\OUTPUT\PANDA_{ALT}{Year}.DBF"
FILEI LOOKUPI[1] = "{CATALOG_DIR}\Parameters\PeakFac.dbf"

FILEO PRINTO[1] = "{SCENARIO_DIR}\OUTPUT\PEAKFAC_REPORT.TXT"
FILEO RECO[1] = "{SCENARIO_DIR}\OUTPUT\PANDA_{ALT}{Year}_PK.DBF",
    FIELDS=TAZ(4.0), 
  HBWP1(10.3), HBWP2(10.3), HBWP3(10.3), HBWP4(10.3), HBWP5(10.3), 
  HBSHP1(10.3), HBSHP2(10.3), HBSHP3(10.3), HBSHP4(10.3), HBSHP5(10.3),
    HBSRP1(10.3), HBSRP2(10.3), HBSRP3(10.3), HBSRP4(10.3), HBSRP5(10.3), 
    HBOP1(10.3), HBOP2(10.3), HBOP3(10.3), HBOP4(10.3), HBOP5(10.3),
    HBSCP1(10.3), HBSCP2(10.3), HBSCP3(10.3), HBSCP4(10.3),
    HBCUP1(10.3), HBCUP2(10.3), HBCUP3(10.3), HBCUP4(10.3),  
  NHBWP(10.3), NHBOP(10.3), 
    HBWA1(10.3), HBWA2(10.3), HBWA3(10.3), HBWA4(10.3), HBWA5(10.3), HBWA6(10.3), HBWA7(10.3),
  HBSHA(10.3), HBSRA(10.3), HBOA(10.3),  HBSCA(10.3), HBCUA(10.3),  
    NHBWA(10.3), NHBOA(10.3)

FILEO RECO[2] = "{SCENARIO_DIR}\OUTPUT\PANDA_{ALT}{Year}_OP.DBF",
    FIELDS=TAZ(4.0), 
  HBWP1(10.3), HBWP2(10.3), HBWP3(10.3), HBWP4(10.3), HBWP5(10.3), 
  HBSHP1(10.3), HBSHP2(10.3), HBSHP3(10.3), HBSHP4(10.3), HBSHP5(10.3), 
    HBSRP1(10.3), HBSRP2(10.3), HBSRP3(10.3), HBSRP4(10.3), HBSRP5(10.3), 
    HBOP1(10.3), HBOP2(10.3), HBOP3(10.3), HBOP4(10.3), HBOP5(10.3),
    HBSCP1(10.3), HBSCP2(10.3), HBSCP3(10.3), HBSCP4(10.3),
    HBCUP1(10.3), HBCUP2(10.3), HBCUP3(10.3), HBCUP4(10.3),  
  NHBWP(10.3), NHBOP(10.3), 
    HBWA1(10.3), HBWA2(10.3), HBWA3(10.3), HBWA4(10.3), HBWA5(10.3), 
  HBSHA(10.3), HBSRA(10.3), HBOA(10.3),  HBSCA(10.3), HBCUA(10.3),  
    NHBWA(10.3), NHBOA(10.3)

PAR ZONES={ZONESA} ZONEMSG=100

LOOKUP LOOKUPI=1,
       NAME=PeakFac,
         LOOKUP[1]=PID, RESULT=HBW,
         LOOKUP[2]=PID, RESULT=HBU,
         LOOKUP[3]=PID, RESULT=HBSC,
         LOOKUP[4]=PID, RESULT=HBSH,
         LOOKUP[5]=PID, RESULT=HBSR,
         LOOKUP[6]=PID, RESULT=HBO,
         LOOKUP[7]=PID, RESULT=NHBW,
         LOOKUP[8]=PID, RESULT=NHBO,
       FAIL=0,0,0,INTERPOLATE=N
; example of use: v=PeakFac(8,2)
; look for 2 in the PID field and returns the NHB value

ARRAY TYPE=D TOTHBWP  = 5,2
ARRAY TYPE=D TOTHBSHP = 5,2
ARRAY TYPE=D TOTHBSRP = 5,2
ARRAY TYPE=D TOTHBOP  = 5,2
ARRAY TYPE=D TOTHBSCP = 4,2
ARRAY TYPE=D TOTHBCUP = 4,2
ARRAY TYPE=D TOTNHBWP = 2
ARRAY TYPE=D TOTNHBOP = 2

ARRAY TYPE=D TOTHBWA  = 5,2
ARRAY TYPE=D TOTHBSHA = 2
ARRAY TYPE=D TOTHBSRA = 2
ARRAY TYPE=D TOTHBOA  = 2
ARRAY TYPE=D TOTHBSCA = 2
ARRAY TYPE=D TOTHBCUA = 2
ARRAY TYPE=D TOTNHBWA = 2
ARRAY TYPE=D TOTNHBOA = 2

ARRAY TYPE=C8 PERIOD=2
PERIOD[1] = 'PEAK'
PERIOD[2] = 'OFF-PEAK'

; Split daily productions and attractions into peak/off-peak Ps and As

 RO.TAZ=ZI.1.TAZ
  
 LOOP _tt = 1,2                           ; loop over two time periods (1=PK, 2=OP)

      ; Set output record values
   
      RO.HBWP1 = ZI.1.HBWP1 * PeakFac(1,_tt)
      RO.HBWP2 = ZI.1.HBWP2 * PeakFac(1,_tt)
      RO.HBWP3 = ZI.1.HBWP3 * PeakFac(1,_tt)
      RO.HBWP4 = ZI.1.HBWP4 * PeakFac(1,_tt)
      RO.HBWP5 = ZI.1.HBWP5 * PeakFac(1,_tt)
   
      RO.HBSHP1 = ZI.1.HBSHP1 * PeakFac(4,_tt)
      RO.HBSHP2 = ZI.1.HBSHP2 * PeakFac(4,_tt)
      RO.HBSHP3 = ZI.1.HBSHP3 * PeakFac(4,_tt)
      RO.HBSHP4 = ZI.1.HBSHP4 * PeakFac(4,_tt)
      RO.HBSHP5 = ZI.1.HBSHP5 * PeakFac(4,_tt)

      RO.HBSRP1 = ZI.1.HBSRP1 * PeakFac(5,_tt)
      RO.HBSRP2 = ZI.1.HBSRP2 * PeakFac(5,_tt)
      RO.HBSRP3 = ZI.1.HBSRP3 * PeakFac(5,_tt)
      RO.HBSRP4 = ZI.1.HBSRP4 * PeakFac(5,_tt)
      RO.HBSRP5 = ZI.1.HBSRP5 * PeakFac(5,_tt)

      RO.HBOP1 = ZI.1.HBOP1 * PeakFac(6,_tt)
      RO.HBOP2 = ZI.1.HBOP2 * PeakFac(6,_tt)
      RO.HBOP3 = ZI.1.HBOP3 * PeakFac(6,_tt)
      RO.HBOP4 = ZI.1.HBOP4 * PeakFac(6,_tt)
      RO.HBOP5 = ZI.1.HBOP5 * PeakFac(6,_tt)

      RO.HBSCP1 = ZI.1.HBSCP1 * PeakFac(3,_tt)
      RO.HBSCP2 = ZI.1.HBSCP2 * PeakFac(3,_tt)
      RO.HBSCP3 = ZI.1.HBSCP3 * PeakFac(3,_tt)
      RO.HBSCP4 = ZI.1.HBSCP4 * PeakFac(3,_tt)

      RO.HBCUP1 = ZI.1.HBCUP1 * PeakFac(2,_tt)
      RO.HBCUP2 = ZI.1.HBCUP2 * PeakFac(2,_tt)
      RO.HBCUP3 = ZI.1.HBCUP3 * PeakFac(2,_tt)
      RO.HBCUP4 = ZI.1.HBCUP4 * PeakFac(2,_tt)

      RO.NHBWP  = ZI.1.NHBWP * PeakFac(7,_tt)
      RO.NHBOP  = ZI.1.NHBOP * PeakFac(8,_tt)

      RO.HBWA1 = ZI.1.HBWA1 * PeakFac(1,_tt)
      RO.HBWA2 = ZI.1.HBWA2 * PeakFac(1,_tt)
      RO.HBWA3 = ZI.1.HBWA3 * PeakFac(1,_tt)
      RO.HBWA4 = ZI.1.HBWA4 * PeakFac(1,_tt)
      RO.HBWA5 = ZI.1.HBWA5 * PeakFac(1,_tt)

      RO.HBSHA = ZI.1.HBSHA * PeakFac(4,_tt)
      RO.HBSRA = ZI.1.HBSRA * PeakFac(5,_tt)
      RO.HBOA  = ZI.1.HBOA  * PeakFac(6,_tt)
      RO.NHBWA = ZI.1.NHBWA * PeakFac(7,_tt)
      RO.NHBOA = ZI.1.NHBOA * PeakFac(8,_tt)
      RO.HBCUA = ZI.1.HBCUA * PeakFac(2,_tt)
      RO.HBSCA = ZI.1.HBSCA * PeakFac(3,_tt)
   
   ; Track totals for reporting

   TOTHBWP[1][_tt] = TOTHBWP[1][_tt] +  ZI.1.HBWP1 * PeakFac(1,_tt)
   TOTHBWP[2][_tt] = TOTHBWP[2][_tt] +  ZI.1.HBWP2 * PeakFac(1,_tt)
   TOTHBWP[3][_tt] = TOTHBWP[3][_tt] +  ZI.1.HBWP3 * PeakFac(1,_tt)
   TOTHBWP[4][_tt] = TOTHBWP[4][_tt] +  ZI.1.HBWP4 * PeakFac(1,_tt)
   TOTHBWP[5][_tt] = TOTHBWP[5][_tt] +  ZI.1.HBWP5 * PeakFac(1,_tt)

   TOTHBSHP[1][_tt] = TOTHBSHP[1][_tt] +  ZI.1.HBSHP1 * PeakFac(4,_tt)
   TOTHBSHP[2][_tt] = TOTHBSHP[2][_tt] +  ZI.1.HBSHP2 * PeakFac(4,_tt)
   TOTHBSHP[3][_tt] = TOTHBSHP[3][_tt] +  ZI.1.HBSHP3 * PeakFac(4,_tt)
   TOTHBSHP[4][_tt] = TOTHBSHP[4][_tt] +  ZI.1.HBSHP4 * PeakFac(4,_tt)
   TOTHBSHP[5][_tt] = TOTHBSHP[5][_tt] +  ZI.1.HBSHP5 * PeakFac(4,_tt)

   TOTHBSRP[1][_tt] = TOTHBSRP[1][_tt] +  ZI.1.HBSRP1 * PeakFac(5,_tt)
   TOTHBSRP[2][_tt] = TOTHBSRP[2][_tt] +  ZI.1.HBSRP2 * PeakFac(5,_tt)
   TOTHBSRP[3][_tt] = TOTHBSRP[3][_tt] +  ZI.1.HBSRP3 * PeakFac(5,_tt)
   TOTHBSRP[4][_tt] = TOTHBSRP[4][_tt] +  ZI.1.HBSRP4 * PeakFac(5,_tt)
   TOTHBSRP[5][_tt] = TOTHBSRP[5][_tt] +  ZI.1.HBSRP5 * PeakFac(5,_tt)

   TOTHBOP[1][_tt] = TOTHBOP[1][_tt] +  ZI.1.HBOP1 * PeakFac(6,_tt)
   TOTHBOP[2][_tt] = TOTHBOP[2][_tt] +  ZI.1.HBOP2 * PeakFac(6,_tt)
   TOTHBOP[3][_tt] = TOTHBOP[3][_tt] +  ZI.1.HBOP3 * PeakFac(6,_tt)
   TOTHBOP[4][_tt] = TOTHBOP[4][_tt] +  ZI.1.HBOP4 * PeakFac(6,_tt)
   TOTHBOP[5][_tt] = TOTHBOP[5][_tt] +  ZI.1.HBOP5 * PeakFac(6,_tt)

   TOTHBSCP[1][_tt] = TOTHBSCP[1][_tt] +  ZI.1.HBSCP1 * PeakFac(3,_tt)
   TOTHBSCP[2][_tt] = TOTHBSCP[2][_tt] +  ZI.1.HBSCP2 * PeakFac(3,_tt)
   TOTHBSCP[3][_tt] = TOTHBSCP[3][_tt] +  ZI.1.HBSCP3 * PeakFac(3,_tt)
   TOTHBSCP[4][_tt] = TOTHBSCP[4][_tt] +  ZI.1.HBSCP4 * PeakFac(3,_tt)

   TOTHBCUP[1][_tt] = TOTHBCUP[1][_tt] +  ZI.1.HBCUP1 * PeakFac(2,_tt)
   TOTHBCUP[2][_tt] = TOTHBCUP[2][_tt] +  ZI.1.HBCUP2 * PeakFac(2,_tt)
   TOTHBCUP[3][_tt] = TOTHBCUP[3][_tt] +  ZI.1.HBCUP3 * PeakFac(2,_tt)
   TOTHBCUP[4][_tt] = TOTHBCUP[4][_tt] +  ZI.1.HBCUP4 * PeakFac(2,_tt)

   TOTNHBWP[_tt] = TOTNHBWP[_tt] +  ZI.1.NHBWP * PeakFac(7,_tt)
   TOTNHBOP[_tt] = TOTNHBOP[_tt]  +  ZI.1.NHBOP  * PeakFac(8,_tt)

   TOTHBWA[1][_tt] = TOTHBWA[1][_tt] +  ZI.1.HBWA1 * PeakFac(1,_tt)
   TOTHBWA[2][_tt] = TOTHBWA[2][_tt] +  ZI.1.HBWA2 * PeakFac(1,_tt)
   TOTHBWA[3][_tt] = TOTHBWA[3][_tt] +  ZI.1.HBWA3 * PeakFac(1,_tt)
   TOTHBWA[4][_tt] = TOTHBWA[4][_tt] +  ZI.1.HBWA4 * PeakFac(1,_tt)
   TOTHBWA[5][_tt] = TOTHBWA[5][_tt] +  ZI.1.HBWA5 * PeakFac(1,_tt)

   TOTHBSHA[_tt] = TOTHBSHA[_tt] +  ZI.1.HBSHA * PeakFac(4,_tt)
   TOTHBSRA[_tt] = TOTHBSRA[_tt] +  ZI.1.HBSRA * PeakFac(5,_tt)
   TOTHBOA[_tt]  = TOTHBOA[_tt]  +  ZI.1.HBOA  * PeakFac(6,_tt)
   TOTHBSCA[_tt] = TOTHBSCA[_tt] +  ZI.1.HBSCA * PeakFac(3,_tt)
   TOTHBCUA[_tt] = TOTHBCUA[_tt] +  ZI.1.HBCUA * PeakFac(2,_tt)
   TOTNHBWA[_tt] = TOTNHBWA[_tt] +  ZI.1.NHBWA * PeakFac(7,_tt)
   TOTNHBOA[_tt] = TOTNHBOA[_tt] +  ZI.1.NHBOA * PeakFac(8,_tt)
   
   
/*      RO.HBSHC0P=ZI.1.HBSHC0P*PeakFac(4_tt)
      RO.HBSHCLPLIP=ZI.1.HBSHCLPLIP*PeakFac(4_tt)
      RO.HBSHCLPMIP=ZI.1.HBSHCLPMIP*PeakFac(4_tt)
      RO.HBSHCLPHIP=ZI.1.HBSHCLPHIP*PeakFac(4_tt)
      RO.HBSHCGPLIP=ZI.1.HBSHCGPLIP*PeakFac(4_tt)
      RO.HBSHCGPMIP=ZI.1.HBSHCGPMIP*PeakFac(4_tt)
      RO.HBSHCGPHIP=ZI.1.HBSHCGPHIP*PeakFac(4_tt)
      RO.HBSRC0P=ZI.1.HBSRC0P*PeakFac(5_tt)
      RO.HBSRCLPLIP=ZI.1.HBSRCLPLIP*PeakFac(5_tt)
      RO.HBSRCLPMIP=ZI.1.HBSRCLPMIP*PeakFac(5_tt)
      RO.HBSRCLPHIP=ZI.1.HBSRCLPHIP*PeakFac(5_tt)
      RO.HBSRCGPLIP=ZI.1.HBSRCGPLIP*PeakFac(5_tt)
      RO.HBSRCGPMIP=ZI.1.HBSRCGPMIP*PeakFac(5_tt)
      RO.HBSRCGPHIP=ZI.1.HBSRCGPHIP*PeakFac(5_tt)
      RO.HBOC0P=ZI.1.HBOC0P*PeakFac(6_tt)
      RO.HBOCLPLIP=ZI.1.HBOCLPLIP*PeakFac(6_tt)
      RO.HBOCLPMIP=ZI.1.HBOCLPMIP*PeakFac(6_tt)
      RO.HBOCLPHIP=ZI.1.HBOCLPHIP*PeakFac(6_tt)
      RO.HBOCGPLIP=ZI.1.HBOCGPLIP*PeakFac(6_tt)
      RO.HBOCGPMIP=ZI.1.HBOCGPMIP*PeakFac(6_tt)
      RO.HBOCGPHIP=ZI.1.HBOCGPHIP*PeakFac(6_tt)
      RO.NHBOC0P=ZI.1.NHBOC0P*PeakFac(8_tt)
      RO.NHBOCLPLIP=ZI.1.NHBOCLPLIP*PeakFac(8_tt)
      RO.NHBOCLPMIP=ZI.1.NHBOCLPMIP*PeakFac(8_tt)
      RO.NHBOCLPHIP=ZI.1.NHBOCLPHIP*PeakFac(8_tt)
      RO.NHBOCGPLIP=ZI.1.NHBOCGPLIP*PeakFac(8_tt)
      RO.NHBOCGPMIP=ZI.1.NHBOCGPMIP*PeakFac(8_tt)
      RO.NHBOCGPHIP=ZI.1.NHBOCGPHIP*PeakFac(8_tt)
      RO.HBCUP1P=ZI.1.HBCUP1P*PeakFac(2_tt)
      RO.HBCUP2P=ZI.1.HBCUP2P*PeakFac(2_tt)
      RO.HBCUP3P=ZI.1.HBCUP3P*PeakFac(2_tt)
      RO.HBCUP4P=ZI.1.HBCUP4P*PeakFac(2_tt)
      RO.HBSCP1P=ZI.1.HBSCP1P*PeakFac(3_tt)
      RO.HBSCP2P=ZI.1.HBSCP2P*PeakFac(3_tt)
      RO.HBSCP3P=ZI.1.HBSCP3P*PeakFac(3_tt)
      RO.HBSCP4P=ZI.1.HBSCP4P*PeakFac(3_tt)
      RO.TRKTAXIP=ZI.1.TRKTAXIP*PeakFac(8_tt)
      RO.IEP=ZI.1.IEP*PeakFac(8_tt)
      
      RO.HBWI1A=ZI.1.HBWI1A*PeakFac(1_tt)
      RO.HBWI2A=ZI.1.HBWI2A*PeakFac(1_tt)
      RO.HBWI3A=ZI.1.HBWI3A*PeakFac(1_tt)
      RO.HBWI4A=ZI.1.HBWI4A*PeakFac(1_tt)
      RO.NHBWA=ZI.1.NHBWA*PeakFac(7_tt)
      RO.HBSHA=ZI.1.HBSHA*PeakFac(4_tt)
      RO.HBSRA=ZI.1.HBSRA*PeakFac(5_tt)
      RO.HBOA=ZI.1.HBOA*PeakFac(6_tt)
      RO.NHBOA=ZI.1.NHBOA*PeakFac(8_tt)
      RO.HBCUA=ZI.1.HBCUA*PeakFac(2_tt)
      RO.HBSCA=ZI.1.HBSCA*PeakFac(3_tt)
      RO.TRKTAXIA=ZI.1.TRKTAXIA*PeakFac(8_tt)
      RO.IEA=ZI.1.IEA*PeakFac(8_tt)
  */    
   IF(_tt == 1) WRITE RECO=1
   IF(_tt == 2) WRITE RECO=2

 ENDLOOP

 ; Report regional peak and off-peak trips by purpose and household market

 
 IF(I==ZONES)  ; end of record processing

  PRINT LIST = "PEAK FACTORING REPORT", PRINTO=1
 
 LOOP _tt = 1,2

  PRINT LIST = "\n\nREGIONAL ", PERIOD[_tt], " TRIP PRODUCTIONS", PRINTO=1
  PRINT LIST = "\n\n HHLD MKT     HBWP     HBSHP     HBSRP      HBOP     HBSCP     HBCUP     NHBWP     NHBOP", PRINTO=1
  LOOP _mm = 1, 5
    IF(_mm == 1)
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWP[_mm][_tt](10.0), TOTHBSHP[_mm][_tt](10.0), TOTHBSRP[_mm][_tt](10.0), TOTHBOP[_mm][_tt](10.0), TOTHBSCP[_mm][_tt](10.0), 
                    TOTHBCUP[_mm][_tt](10.0), TOTNHBWP[_tt](10.0), TOTNHBP[_tt](10.0),  PRINTO=1
    ELSEIF(_mm < 5)
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWP[_mm][_tt](10.0), TOTHBSHP[_mm][_tt](10.0), TOTHBSRP[_mm][_tt](10.0), TOTHBOP[_mm][_tt](10.0), TOTHBSCP[_mm][_tt](10.0), 
                    TOTHBCUP[_mm][_tt](10.0), PRINTO=1
  ELSE
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWP[_mm][_tt](10.0), TOTHBSHP[_mm][_tt](10.0), TOTHBSRP[_mm][_tt](10.0), TOTHBOP[_mm][_tt](10.0), PRINTO=1
  ENDIF
  ENDLOOP    ; end hhld market loop

  PRINT LIST = "\n\nREGIONAL ", PERIOD[_tt], " TRIP ATTRACTIONS", PRINTO=1
  PRINT LIST = "\n\n HHLD MKT     HBWA     HBSHA     HBSRA      HBOA     HBSCA     HBCUA     NHBWA     NHBOA", PRINTO=1
  LOOP _mm = 1, 5
    IF(_mm == 1)
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWA[_mm][_tt](10.0), TOTHBSHA[_tt](10.0), TOTHBSRA[_tt](10.0), TOTHBOA[_tt](10.0), TOTHBSCA[_tt](10.0), 
                    TOTHBCUA[_tt](10.0), TOTNHBWA[_tt](10.0), TOTNHBA[_tt](10.0), PRINTO=1
  ELSE
  PRINT LIST = "    ", _mm(1), "   ", TOTHBWA[_mm][_tt](10.0), PRINTO=1
  ENDIF
  ENDLOOP    ; end hhld market loop

 ENDLOOP   ; end time period loop

 ENDIF

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\PEAKINGFACTORS\PFMAT00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{CATALOG_DIR}\APPLICATIONS\PFMAT00B.PRN" MSG='Create PK-OP  EE Tables'
FILEI MATI[1] = "{SCENARIO_DIR}\INPUT\EETrips.dbf",
    PATTERN=IJ:V, FIELDS=ORZ,DSZ,TRIPS
FILEI LOOKUPI[1] = "{CATALOG_DIR}\Parameters\PeakFac.dbf"
FILEO MATO[1] = "{SCENARIO_DIR}\OUTPUT\EETRIPS_{ALT}{Year}_PK_OP.MAT",
  MO=1-2, DEC=2*S  NAME=EE_PK,EE_OP
LOOKUP LOOKUPI=1,
       NAME=Peaking_Fac,
         LOOKUP[1]=PID, RESULT=HBW,
         LOOKUP[2]=PID, RESULT=HBU,
         LOOKUP[3]=PID, RESULT=HBSC,
         LOOKUP[4]=PID, RESULT=HBSH,
         LOOKUP[5]=PID, RESULT=HBSR,
         LOOKUP[6]=PID, RESULT=HBO,
         LOOKUP[7]=PID, RESULT=NHBW,
         LOOKUP[8]=PID, RESULT=NHBO,
       FAIL[3]=0
; example of use: v=Peaking_Fac(8,25)
; look for 25 in the PID field and returns the NHBO value

PARAMETERS ZONES={ZONESA} ZONEMSG=100

; Factor EE trips (Using NHBO peaking factors.  This will be updaeted when peaking faactors for EE trips are developed)
MW[1]=MI.1.1*Peaking_Fac(8,1)    ; Peak
MW[2]=MI.1.1*Peaking_Fac(8,2)    ; Off-Peak

; The MATRIX module does not have any explicit phases.  The module does run within an implied ILOOP
; where I is the origin zones.  All user statements in the module are processed once for each origin.
; Matrix computation (MW[#]=) are solved for all values of J for each I.  Thus for a given origin zone I
; the values for all destination zones J are automatically computed.  The user can control the computations
; at each J by using a JLOOP.

ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*echo  Peaking Factors Applied           = %date%  %time% >>{SCENARIO_DIR}\Output\runtime.prn
PRINT LIST="Peaking Factors Applied", PRINTO=0
SLEEP TIME = 5
; End of PILOT Script

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*Cluster NERPM 1-16 Start Exit

; *Cluster NERPM 1-%NUMBER_OF_PROCESSORS% Start Exit
; End of PILOT Script

LOOP PURPOSE = 1, 12, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


Distribute MULTISTEP=1       

    IF (PURPOSE=1) ; HBW PK purpose
    PERIOD='PK'
    PURP='HBW'
    PURPNO=2
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS1'
    OCC3=3.37 
    RUNDATE='@DATE.RUNDATE@'
    RUNTIME=@TIME.RUNTIME@
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 1 of 16 HBW PK", printo=0
    
    ELSEIF (PURPOSE=2) ; HBO PK purpose 
    PERIOD='PK'
    PURP='HBO'
    PURPNO=3
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 2 of 16 HBO PK", printo=0
    
    ELSEIF (PURPOSE=3) ; HBSH PK purpose 
    PERIOD='PK'
    PURP='HBSH'
    PURPNO=4
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 3 of 16 HBSH PK", printo=0
    
    ELSEIF (PURPOSE=4) ; HBSR PK purpose 
    PERIOD='PK'
    PURP='HBSR'
    PURPNO=5
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 4 of 16 HBSR PK", printo=0
    
    ; HBSC PK purpose 
    ELSEIF (PURPOSE=5) 
    PERIOD='PK'
    PURP='HBSC'
    PURPNO=6
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =5 of 16 HBSC PK", printo=0  
    
    ; HBCU
    ELSEIF (PURPOSE=6) ; HBCU PK purpose 
    PERIOD='PK'
    PURP='HBCU'
    PURPNO=7
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =6 of 16 HBCU PK", printo=0
    
    
    ; HBW OP purpose        
    ELSEIF (PURPOSE=7) 
    PERIOD='OP'
    PURP='HBW'
    PURPNO=2
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS1'
    OCC3=3.37 
    RUNDATE='@DATE.RUNDATE@'
    RUNTIME=@TIME.RUNTIME@
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 7 of 16 HBW OP", printo=0
    
    ; HBO OP purpose
    ELSEIF (PURPOSE=8)  
    PERIOD='OP'
    PURP='HBO'
    PURPNO=3
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number =8 of 16 HBO OP", printo=0
    
    ; HBSH OP purpose
    ELSEIF (PURPOSE=9)  
    PERIOD='OP'
    PURP='HBSH'
    PURPNO=4
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 9 of 16 HBSH OP", printo=0
    
    ; HBSR OP purpose
    ELSEIF (PURPOSE=10)  
    PERIOD='OP'
    PURP='HBSR'
    PURPNO=5
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number =10 of 16 HBSR OP", printo=0

    ; HBSC OP purpose 
    ELSEIF (PURPOSE=11) 
    PERIOD='OP'
    PURP='HBSC'
    PURPNO=6
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =11 of 16 HBSC OP", printo=0
    
    ; HBCU OP purpose
    ELSEIF (PURPOSE=12)  
    PERIOD='OP'
    PURP='HBCU'
    PURPNO=7
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =12 of 16 HBCU OP", printo=0
    ENDIF
; End of PILOT Script

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

DistributeMultiStep ProcessID="NERPM", ProcessNum=Purpose
; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\applications\MCMAT00C.S"
    
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\@purpose@_logsum.prn"

        ;===================================================================================================================================
        ; XCHOICE - Standard Output (MC trips and final logsums)
        ;===================================================================================================================================
FILEO MATO[1] = "{SCENARIO_DIR}\output\@PURP@@PERIOD@_MC1.MAT",
            MO=701-719,DEC=19*D,
            NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC
        
FILEO MATO[2] = "{SCENARIO_DIR}\output\@PURP@@PERIOD@_MC2.MAT",
           MO=721-739,DEC=19*D,
          NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC
    
FILEO MATO[3] = "{SCENARIO_DIR}\output\@PURP@@PERIOD@_MC3.MAT",
           MO=741-759,DEC=19*D,
          NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC
      
FILEO MATO[4] = "{SCENARIO_DIR}\output\@PURP@@PERIOD@_MC4.MAT",
            MO=761-779,DEC=19*D,
            NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC
       
FILEO MATO[5] = "{SCENARIO_DIR}\output\@PURP@@PERIOD@_MC5.MAT",
            MO=781-799,DEC=19*D,
            NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC

       ; Logsums by auto sufficiency (averaged across all access markets)
FILEO MATO[6] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MCLS_{Alt}{year}.MAT",
        MO=571-575,DEC=5*D,NAME=LSUM_M1,LSUM_M2,LSUM_M3,LSUM_M4,LSUM_M5

       
        ; Exp(AutoUtility) for user benefits
FILEO MATO[7] = "{SCENARIO_DIR}\output\@PURP@@PERIOD@_expautoutil.mat",
         MO=561-565,DEC=5*D,NAME=EXPA_M1,EXPA_M2,EXPA_M3,EXPA_M4,EXPA_M5

       
FILEO MATO[8] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MCLS_XCHOICE_{Alt}{year}.MAT",
          MO=528,536,544,552,560,DEC=5*D,NAME=LSUM_M1,LSUM_M2,LSUM_M3,LSUM_M4,LSUM_M5
            
        ; Zone and station data
FILEI ZDATI[1] = "{SCENARIO_DIR}\input\ZDATA_{Year}{alt}.DBF"
FILEI ZDATI[2] = "{SCENARIO_DIR}\output\STATDATA_A10.DBF"
    
        ; Modechoice coefficients and alternative specific constants
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\input\@PERIOD@_MC_CONSTANTS.CSV"
FILEI LOOKUPI[2] = "{SCENARIO_DIR}\input\@PERIOD@_TRN_COEFFICIENTS.CSV"
    
        ; Transit skim (1: Walk to Skyway)
FILEI MATI[1] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_SKYWAY_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (2: Walk to Local Bus)
FILEI MATI[2] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_LOCAL_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (3: Walk to Express Bus)
FILEI MATI[3] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (4: Walk to BRT-LRT)
FILEI MATI[4] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (5: Walk to Commuter Rail)
FILEI MATI[5] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (6: PNR to Express Bus)
FILEI MATI[6] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_PNR_{Alt}{year}.MAT"
    
        ; Transit skim (7: PNR to BRT-LRT Bus)
FILEI MATI[7] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_PNR_{Alt}{year}.MAT"
    
        ; Transit skim (8: PNR to Commuter Rail)
FILEI MATI[8] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_PNR_{Alt}{year}.MAT"
    
        ; Transit skim (9: KNR to Express Bus)
FILEI MATI[9] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_KNR_{Alt}{year}.MAT"
    
        ; Transit skim (10: KNR to BRT-LRT Bus)
FILEI MATI[10] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_KNR_{Alt}{year}.MAT"
    
        ; Transit skim (11: KNR to Commuter Rail)
FILEI MATI[11] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_KNR_{Alt}{year}.MAT"
    
        ; Highway skim (All Drive)
FILEI MATI[12] = "{SCENARIO_DIR}\output\@SKIMFILE@.MAT"
    
        ; Highway skim (Drive to Skyway) 
FILEI MATI[13] = "{SCENARIO_DIR}\output\@PERIOD@_DRV_SKYWAY.MAT"

        ; HOV time savings
        ; Table 1 - HOV time savings for peak period
        ; Table 2 - HOV time savings for off-peak period
    
        ; Person trips
    
        ; Progress Bar update for evey 100 zones
        zonemsg=100
    
        ; Declare arrays to hold alternative specific constants
        ARRAY PARK=2578
        ARRAY TYPE=F K_AUT=5, K_SR=5, K_SR3=5, K_TRN=5, K_TDRV=5, K_TKNR=5, K_NMOT=5, K_BIKE=5, K_TDRVE=5
        ARRAY TYPE=C30 MARKET_NAME=5
    
        ; Read alternative specific Constants
        LOOKUP, NAME=CONSTANTS, LOOKUP[1]=1, RESULT=@PURPNO@, INTERPOLATE=N, , LIST=Y, LOOKUPI=1
    
        ; Read mode choice coefficients
        LOOKUP, NAME=COEFF, LOOKUP[1]=1, RESULT=@PURPNO@, INTERPOLATE=N, LIST=Y, LOOKUPI=2
    
        ; Read coefficients and constants
        IF (i=FirstZone)
          ; Index _m identifies the market segment, as follows:
          ; All HB purposes except shcool, university and NNHB
          ; -------------------------------------------------------
          ;    _m = 1      zero-car households
          ;    _m = 2      low income, car insufficient hhlds
          ;    _m = 3      high income, car sufficient hhlds
          ;    _m = 4      low income, car sufficient hhlds
          ;    _m = 5      high income, car sufficient hhlds
    
          ; Household market stratified constants
          LOOP _m=1,@MARKETS@    
            K_AUT[_m]  = CONSTANTS(1,(_m-1)*10+1)            ; drive to skyway
            K_SR[_m]   = CONSTANTS(1,(_m-1)*10+2)            ; shared-ride 2 & 3+
            K_SR3[_m]  = CONSTANTS(1,(_m-1)*10+3)            ; shared ride 3+
            K_TRN[_m]  = CONSTANTS(1,(_m-1)*10+4)            ; transit
            K_TDRV[_m] = CONSTANTS(1,(_m-1)*10+5)            ; drive to local
            K_TKNR[_m] = CONSTANTS(1,(_m-1)*10+6)            ; knr to transit
            K_NMOT[_m] = CONSTANTS(1,(_m-1)*10+7)            ; non-motorized (walk & bike)
            K_BIKE[_m] = CONSTANTS(1,(_m-1)*10+8)            ; bike
            K_TDRVE[_m] = CONSTANTS(1,(_m-1)*10+9)           ; pnr to express
          ENDLOOP
    
          ; MARKETS=@MARKETS@
          MARKET_NAME[1] = '@Mkt1_Name@'
          MARKET_NAME[2] = '@Mkt2_Name@'
          MARKET_NAME[3] = '@Mkt3_Name@'
          MARKET_NAME[4] = '@Mkt4_Name@'
          MARKET_NAME[5] = '@Mkt5_Name@'
    
          ; Mode-specific constants -- same for all hhld markets
          K_SKY = CONSTANTS(1,51)                  ; Skyway
          K_EXP = CONSTANTS(1,52)                  ; express bus
          K_BRT = CONSTANTS(1,53)                  ; brt
          K_URL = CONSTANTS(1,54)                  ; urban rail
          K_CRL = CONSTANTS(1,55)                  ; commuter rail
          K_INFDA = CONSTANTS(1,56)                ; informal KNR-to-Localbus
          
          ; Define array to hold cost coefficients
          ARRAY TYPE=F COEFF_COST=5
          COEFF_COST[1]  = COEFF(1,5)
          COEFF_COST[2]  = COEFF(1,6)
          COEFF_COST[3]  = COEFF(1,7)
          COEFF_COST[4]  = COEFF(1,8)
          COEFF_COST[5]  = COEFF(1,9)
          
          ; Level of Service Coefficients
          COEFF_IVTT   = COEFF(1,1)                ; In-vehicle travel time coefficient
          COEFF_SWAIT  = COEFF(1,2)                ; Short wait(<5 minutes)
          COEFF_LWAIT  = COEFF(1,3)                ; Long wait (>5 minutes)
          COEFF_XWAIT  = COEFF(1,4)                ; Xfer wait
          COEFF_DRIVE  = COEFF(1,10)               ; Drive access
          COEFF_TERML  = COEFF(1,11)               ; Terminal time
          COEFF_WALK   = COEFF(1,12)               ; Walk access
          COEFF_WALK1  = COEFF(1,13)               ; Walk time < 1
          COEFF_WALK2  = COEFF(1,14)               ; Walk time > 1
          COEFF_BIKE1  = COEFF(1,15)               ; Bike time < 1
          COEFF_BIKE2  = COEFF(1,16)               ; Bike time > 1
          DWalkBIKE    = COEFF(1,17)               ; Walk and Bike threshold
 
          ; Nesting coefficients
          NC_1         = COEFF(1,18)               ; Level 1 - auto, trn, non-mot
          NC_2         = COEFF(1,19)               ; Level 2 - transit access mode choice
          NC_3         = COEFF(1,20)               ; Level 3 - transit access mode choice
          ; NCP = NC_1 * NC_2                      ; Product of nesting coefficients

          ; Calibration specific
          COEFF_CBD     = COEFF(1,21)              ; CBD dummy
          COEFF_NXFER   = COEFF(1,22)              ; number of xfers 
                    
        ENDIF
    
        ; Highway skims
        FILLMW MW[1]=MI.12.1,2,3,4,5,6,7,8 ;,9     ; highway skims
        FILLMW MW[241]=MI.13.1,2,3,4,5,6,7,8,9     ; drive to skyway best path
       ; FILLMW MW[11]=MI.14.HOVsave@PERIOD@        ; HOVsavePK for peak period and HOVsaveOP for off-peak period
       ; FILLMW MW[291]=MI.18.@STATION_TABLE@       ; 8 tables - PKStationTAZ_pnrb,PKParkCost_pnrb,termtimpnr,termtimknr,OPStationTAZ_pnrb,OPParkCost_pnrb,termtimpnr,termtimknr
    
        ; Transit (walk) skims
        FILLMW MW[21]=MI.1.1(15)                   ; walk to skyway
        FILLMW MW[41]=MI.2.1(15)                   ; walk to loc bus
        FILLMW MW[61]=MI.3.1(15)                   ; walk to exp bus
        FILLMW MW[81]=MI.4.1(15)                   ; walk to brt lrt
        FILLMW MW[101]=MI.5.1(15)                  ; walk to com rail
    
        ; Transit (PNR) skims
        FILLMW MW[121]=MI.6.1(15)                  ; pnr to exp bus
        FILLMW MW[141]=MI.7.1(15)                  ; pnr to brt lrt
        FILLMW MW[161]=MI.8.1(15)                  ; pnr to com rail
    
        ; Transit (KNR) skims
        FILLMW MW[181]=MI.9.1(15)                  ; knr to exp bus
        FILLMW MW[201]=MI.10.1(15)                 ; knr to brt lrt
        FILLMW MW[221]=MI.11.1(15)                 ; knr to com rail
    
        ; Walk and Bike
        ; distance portion that is 1 mile or less
        MW[12] = MIN(MW[2],1)
    
        ; Distance portion that is longer than 1 mile
        JLOOP
          IF (MW[2][J] > 1)
              MW[13] = MW[2][J] - 1
          ELSE
              MW[13] = 0
          ENDIF
        ENDJLOOP
    
        ; Person trips
        MW[251] = 1  ; Total Person Trips
    
        ;  Write out coefficients for debug and regular runs
        IF (I=1)  ; Write mode choice summary file                                                                                                
          ; DEBUG MODE CHOICE                                                                                                                   
          ;IF ({DebugMC}>0) 
             ; split this into two sections (1) DEBUG and (2) Regular 
            ; READ FILE = "WriteReport.S"
         ; ENDIF
        ENDIF
        
        ; ************************** PROCESS PERSON TRIPS INTO MARKETS ************************************
        ; Divide person trip table into different markets
        ;  MW[252]=MW[251] * ZI.1.PERCAUTO0[I]                        ; Zero car HHs
        ;  MW[253]=MW[251] * ZI.1.PERCAUTO1[I]                        ; Auto Insufficient Low Income HHs
        ;  MW[254]=MW[251] * ZI.1.PERCAUTO3[I]                        ; Auto Insufficient High Income HHs
        ;  MW[255]=MW[251] * ZI.1.PERCAUTO4[I]                        ; Auto Sufficient Low Income HHs
        ;  MW[256]=(MW[251] - MW[252] - MW[253] - MW[254] - MW[255])  ; Auto Sufficient High Income HHs
        
        MW[252]= 1    ; Zero car HHs                     
        MW[253]= 1    ; Auto Insufficient Low Income HHs 
        MW[254]= 1    ; Auto Insufficient High Income HHs
        MW[255]= 1    ; Auto Sufficient Low Income HHs   
        MW[256]= 1    ; Auto Sufficient High Income HHs   

        ; Overwrite the above if there is only one market
        IF (@MARKETS@=1)
           MW[252]=MW[251]
           MW[253]=0
           MW[254]=0
           MW[255]=0
           MW[256]=0
        ENDIF
    
        ; Zero car transit sub-markets (can walk, must drive and no access)
        MW[261] = MW[252] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[262] = MW[252] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[263] = MW[252] - MW[261] - MW[262]                                                                 ; No Access
    
        ; Auto Insufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[264] = MW[253] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[265] = MW[253] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[266] = MW[253] - MW[264] - MW[265]                                                                 ; No Access
    
        ; Auto Insufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[267] = MW[254] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[268] = MW[254] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[269] = MW[254] - MW[267] - MW[268]                                                                 ; No Access
    
        ; Auto Sufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[270] = MW[255] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[271] = MW[255] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[272] = MW[255] - MW[270] - MW[271]                                                                 ; No Access
    
        ; Auto Sufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[273] = MW[256] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[274] = MW[256] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[275] = MW[256] - MW[273] - MW[274]                                                                 ; No Access

    
        ; *******************************************  WALK ACCESS MARKETS  ************************************************
        ; ******************************************************************************************************************
    
        ; Loop by access modes
        LOOP ACC=1,3
        
            ;**********************  ADD HOUSEHOLD MARKET SPECIFIC TERMS **********************************
            LOOP _m=1,@MARKETS@
    
               ; Drive alone
               MW[301+20*(_m-1)] = (COEFF_TERML    * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +           ; Terminal time
                                    COEFF_IVTT     * MW[4]             +                               ; IVTT
                                    COEFF_CBD      * ZI.1.CBD_DUMMY[J] +                               ; CBD dummy
                                    COEFF_COST[_m] * MW[1]             +                               ; Toll
                                    COEFF_COST[_m] * ZI.1.@PRK@[J]     +                               ; Auto parking cost
                                    COEFF_COST[_m] *  MW[2] * 9.5)                                     ; Auto operating cost
               MW[401+20*(_m-1)] = MW[301+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility
              
               ; Shared Ride 2-person
               MW[302+20*(_m-1)] = (K_SR[_m]       +                                                   ; Constant(s)
                                    COEFF_TERML * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +              ; Terminal time
                                    COEFF_IVTT  * MW[8]             -                                  ; IVTT
                                  ;  COEFF_IVTT  * (MAX (MW[11], 0)) +                                  ; HOV time savings
                                    COEFF_CBD   * ZI.1.CBD_DUMMY[J] +                                  ; CBD dummy               
                                    COEFF_COST[_m] * (MW[5]/ 2 )    +                                  ; Toll
                                    COEFF_COST[_m] * MW[2] * 9.5)                                      ; Auto operating cost
               MW[402+20*(_m-1)] =  MW[302+20*(_m-1)] / NC_1 / NC_2 / NC_3                             ; Scaled Utility
               
               ; Shared Ride 3+ person
               MW[303+20*(_m-1)] = (K_SR[_m] + K_SR3[_m] +                                             ; Constant(s)
                                    COEFF_TERML * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +              ; Terminal time 
                                    COEFF_IVTT  * MW[8]             -                                  ; IVTT
                                  ;  COEFF_IVTT  * (MAX (MW[11], 0)) +                                  ; HOV time savings
                                    COEFF_CBD   * ZI.1.CBD_DUMMY[J] +                                  ; CBD dummy               
                                    COEFF_COST[_m] * (MW[5]/@OCC3@) +                                  ; Toll
                                    COEFF_COST[_m] * MW[2] * 9.5)                                      ; Auto operating cost
               MW[403+20*(_m-1)] =  MW[303+20*(_m-1)] / NC_1 / NC_2 / NC_3                             ; Scaled Utility
                                                     
               ; Drive to Skyway
               MW[304+20*(_m-1)] = (K_AUT[_m]                                  +                       ; Constant(s)
                                   ; COEFF_DRIVE    *  MW[243]                  +                      ; Drive Access Time
                                    COEFF_WALK     *  MW[244]                  +                       ; Walk Access Time to skyway (PNR lot to skyway & walk egress)
                                    COEFF_SWAIT    *  MIN(MW[247],5)           +                       ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[247] - MIN(MW[247],5))+                       ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[248]                  +                       ; Xfer Wait
                                    COEFF_IVTT     * (MW[243] + MW[245])       +                       ; IVTT (hwy time + skyway time)
                                    COEFF_COST[_m] *  MW[249]                  +                       ; Transit Fare
                                    COEFF_COST[_m] *  MW[241]                  +                       ; Toll
                                    COEFF_COST[_m] *  MW[242] * 9.5            +                       ; Auto operating cost
                                    COEFF_NXFER    *  MW[246]                  +                       ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[404+20*(_m-1)] = MW[304+20*(_m-1)] /NC_1 /NC_2                                       ; Scaled Utility

               ; Walk to Skyway
               MW[305+20*(_m-1)] = (K_TRN[_m]      +  K_SKY                    +                       ; Constant(s)
                                    COEFF_DRIVE    *  MW[22]                   +                       ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[21] + MW[23])         +                       ; Walk Access Time + Xfer Time   
                                    COEFF_SWAIT    *  MIN(MW[32],5)            +                       ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[32] - MIN(MW[32],5))  +                       ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[33]                   +                       ; Xfer Wait
                                    COEFF_IVTT     *  MW[24]                   +                       ; IVTT (skyway time)
                                    COEFF_COST[_m] *  MW[34]                   +                       ; Transit Fare
                                    COEFF_NXFER    *  MW[31]                   +                       ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[405+20*(_m-1)] = MW[305+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; Walk to Local Bus
               MW[306+20*(_m-1)] = (K_TRN[_m]                                   +                      ; Transit Constant
                                    COEFF_DRIVE    *  MW[42]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[41] + MW[43])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[52],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[53]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[44] + MW[45])          +                      ; IVTT (skyway + local bus time)
                                    COEFF_COST[_m] *  MW[54]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[51]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[406+20*(_m-1)] = MW[306+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; Walk to Express Bus
               MW[307+20*(_m-1)] = (K_TRN[_m] + K_EXP  +                                               ; Constant(s)
                                    COEFF_DRIVE    *  MW[62]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[61] + MW[63])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[72],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[72] - MIN(MW[72],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[73]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[64] + MW[65] + MW[66]) +                      ; IVTT (skyway + local + express bus time)
                                    COEFF_COST[_m] *  MW[74]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[71]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[407+20*(_m-1)] = MW[307+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; Walk to BRT-LRT
               MW[308+20*(_m-1)] = (K_TRN[_m] + K_BRT                           +                      ; Constant(s)
                                    COEFF_DRIVE    *  MW[82]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[81] + MW[83])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[92],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[92] - MIN(MW[92],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[93]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[84]+MW[85]+MW[86]+MW[87]) +                   ; IVTT (skyway + local + express + BRT time)
                                    COEFF_COST[_m] *  MW[94]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[91]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J] )                              ; CBD dummy
               MW[408+20*(_m-1)] = MW[308+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; Walk to Commuter Rail
               MW[309+20*(_m-1)] = (K_TRN[_m] + K_CRL                            +                     ; Constant(s)
                                    COEFF_DRIVE    *  MW[102]                    +                     ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[101] + MW[103])         +                     ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[112],5)             +                     ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[112] - MIN(MW[92],5))   +                     ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[113]                    +                     ; Xfer Wait
                                    COEFF_IVTT     * (MW[104] + MW[105] + MW[106]+ MW[107]+MW[108])+   ; IVTT (skyway + local + express + BRT + CRL time)
                                    COEFF_COST[_m] *  MW[114]                    +                     ; Transit Fare
                                    COEFF_NXFER    *  MW[111]                    +                     ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J] )                              ; CBD dummy
               MW[409+20*(_m-1)] = MW[309+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to Local Bus (Walk skim with drive time)
               MW[319+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m]                        +                    ; Constant(s)
                                   COEFF_DRIVE    * (MW[41]/2/10)                 +                    ; Drive Access Time (Drive time = Walk access time/10; assuming drive speed of 30 MPH & 50%-50% access-egress split)
                                   COEFF_WALK     * (MW[43] + MW[41]/2)           +                    ; Xfer Time (here we don't have walk egress time, so assume a 50%-50% access-egress split)
                                   COEFF_SWAIT    *  MIN(MW[52],5)                +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))      +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[53]                       +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[44] + MW[45])             +                    ; IVTT (skyway + local bus time)
                                   COEFF_COST[_m] *  MW[54]                       +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[51]                       +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[419+20*(_m-1)] = MW[319+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
        
               ; PNR to Express Bus
               MW[310+20*(_m-1)] = (K_TRN[_m] + K_TDRVE[_m] + K_EXP                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[122]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[121] + MW[123])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[132],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[132] - MIN(MW[132],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[133]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[124] + MW[125] + MW[126]) +                    ; IVTT (skyway + local + express bus time)
                                   COEFF_COST[_m] *  MW[134]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[131]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[410+20*(_m-1)] = MW[310+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to BRT-LRT Bus
               MW[311+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m] + K_BRT                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[142]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[141] + MW[143])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[152],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[152] - MIN(MW[152],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[153]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[144]+MW[145]+MW[146]+MW[147]) +                ; IVTT (skyway + local + express + BRT time)
                                   COEFF_COST[_m] *  MW[154]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[151]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[411+20*(_m-1)] = MW[311+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to Commuter Rail
               MW[312+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m] + K_CRL                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[162]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[161] + MW[163])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[172],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[172] - MIN(MW[172],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[173]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[164] + MW[165] + MW[166] + MW[167] +MW[168])+  ; IVTT (skyway + local + express + BRT + CRL time)
                                   COEFF_COST[_m] *  MW[174]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[171]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[412+20*(_m-1)] = MW[312+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to Local Bus
               MW[313+20*(_m-1)] = (K_TRN[_m]     + K_TKNR[_m]   + K_INFDA        +                    ; Constant(s)
                                   COEFF_DRIVE    * (MW[41]/10)                   +                    ; Drive Access Time (Drive time = Walk time/10; assuming drive speed of 30 MPH)
                                   COEFF_WALK     * (MW[43] + 3)                  +                    ; Xfer Time (here we don't have walk egress time, so assume 3 minutes)
                                   COEFF_SWAIT    *  MIN(MW[52],5)                +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))      +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[53]                       +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[44] + MW[45])             +                    ; IVTT (skyway + local bus time)
                                   COEFF_COST[_m] *  MW[54]                       +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[51]                       +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[413+20*(_m-1)] = MW[313+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; KNR to Express Bus
               MW[314+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_EXP                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[182]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[181] + MW[183])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[192],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[192] - MIN(MW[192],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[193]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[184] + MW[185] + MW[186]) +                    ; IVTT (skyway + local + express bus time)
                                   COEFF_COST[_m] *  MW[194]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[191]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[414+20*(_m-1)] = MW[314+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to BRT-LRT Bus
               MW[315+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_BRT                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[202]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[201] + MW[203])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[212],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[212] - MIN(MW[212],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[213]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[204]+MW[205]+MW[206]+MW[207]) +                ; IVTT (skyway + local + express + BRT time)
                                   COEFF_COST[_m] *  MW[214]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[211]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[415+20*(_m-1)] = MW[315+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to Commuter Rail
               MW[316+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_CRL                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[222]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[221] + MW[223])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[232],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[232] - MIN(MW[232],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[233]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[224] + MW[225] + MW[226]  +MW[227] +MW[228])+  ; IVTT (skyway + local + express + BRT + CRL time)
                                   COEFF_COST[_m] *  MW[234]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[231]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[416+20*(_m-1)] = MW[316+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
                          
               ; Walk
               MW[317+20*(_m-1)] = (K_NMOT[_m]                                    +                    ; Constant(s)
                                   COEFF_WALK1  * MW[12]                          +                    ; Walk time if less than 1 mile
                                   COEFF_WALK2  * MW[13])                                              ; Walk time if more than 1 mile
               MW[417+20*(_m-1)] = MW[317+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility
                      
               ; Bike
               MW[318+20*(_m-1)] = (K_NMOT[_m] + K_BIKE[_m]                       +                    ; Constant(s)
                                   COEFF_BIKE1  * MW[12]                          +                    ; Bike time if less than 1 mile
                                   COEFF_BIKE2  * MW[13])                                              ; Bike time if more than 1 mile
               MW[418+20*(_m-1)] = MW[318+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility

            ENDLOOP
    
            ;***************************    MODE AVAILABILITY CHECKS    ************************************
            ;  Drive alone and PNR to transit not available to zero car households
            IF (@Mkt1_0car@=1)
              MW[401] = -9999.99  ; Drive alone
              MW[404] = -9999.99  ; Drive to Skyway
              MW[410] = -9999.99  ; PNR to Express
              MW[411] = -9999.99  ; PNR to BRT
              MW[412] = -9999.99  ; PNR to Com Rail
              MW[419] = -9999.99  ; PNR to Local
            ENDIF
    
            LOOP _m=1,@MARKETS@
              JLOOP
                 ; Transit not available if no line-haul in-vehicle time on the transit path
                 ; Drive to skyway 
                 IF (MW[245] == 0)  MW[404+20*(_m-1)]=-9999.99
                 
                 ; Walk to skyway
                 IF (MW[24] == 0)  MW[405+20*(_m-1)]=-9999.99
    
                 ; Walk to local bus
                 IF (MW[45] == 0)  MW[406+20*(_m-1)]=-9999.99
    
                 ; Walk to express bus
                 IF (MW[66] == 0)  MW[407+20*(_m-1)]=-9999.99
    
                 ; Walk to BRT-LRT bus
                 IF (MW[87] == 0)  MW[408+20*(_m-1)]=-9999.99
    
                 ; Walk to Commuter Rail
                 IF (MW[108] == 0)  MW[409+20*(_m-1)]=-9999.99
                 
                 ; KNR to local bus
                 IF (MW[45] == 0)  MW[419+20*(_m-1)]=-9999.99
                 
                 ; PNR to express bus
                 IF (MW[126] == 0)  MW[410+20*(_m-1)]=-9999.99
    
                 ; PNR to BRT-LRT
                 IF (MW[147] == 0)  MW[411+20*(_m-1)]=-9999.99
    
                 ; PNR to Commuter rail
                 IF (MW[168] == 0) MW[412+20*(_m-1)]=-9999.99
    
                 ; KNR to local bus
                 IF (MW[45] == 0)  MW[413+20*(_m-1)]=-9999.99
    
                 ; KNR to express bus
                 IF (MW[186] == 0)  MW[414+20*(_m-1)]=-9999.99
    
                 ; KNR to BRT-LRT
                 IF (MW[207] == 0)  MW[415+20*(_m-1)]=-9999.99
    
                 ; KNR to Commuter rail
                 IF (MW[228] == 0) MW[416+20*(_m-1)]=-9999.99
                 
                 /*
                 ; If walk access distance less than minimum, no walk access to transit
                 ;IF (MW[2] < 0.6)
                 ;   MW[405+20*(_m-1)]=-9999.99
                 ;   MW[406+20*(_m-1)]=-9999.99
                 ;   MW[407+20*(_m-1)]=-9999.99
                 ;   MW[408+20*(_m-1)]=-9999.99
                 ;   MW[409+20*(_m-1)]=-9999.99
                 ;ENDIF
                 ;
                 ;; If drive access distance less than minimum, no drive access to transit
                 ;IF (MW[2] < 1.2)
                 ;   MW[410+20*(_m-1)]=-9999.99
                 ;   MW[411+20*(_m-1)]=-9999.99
                 ;   MW[412+20*(_m-1)]=-9999.99
                 ;   MW[419+20*(_m-1)]=-9999.99
                 ;ENDIF
                 */
                 
                 ; Walk to transit not available for the MD or NT access markets;
                 IF(ACC==2 || ACC==3)
                    MW[405+20*(_m-1)]=-9999.99
                    MW[406+20*(_m-1)]=-9999.99
                    MW[407+20*(_m-1)]=-9999.99
                    MW[408+20*(_m-1)]=-9999.99
                    MW[409+20*(_m-1)]=-9999.99
                 ENDIF
    
                 ; Transit not available for NT access markets;
                 IF(ACC==3)
                   MW[404+20*(_m-1)]=-9999.99
                   MW[410+20*(_m-1)]=-9999.99
                   MW[411+20*(_m-1)]=-9999.99
                   MW[412+20*(_m-1)]=-9999.99
                   MW[413+20*(_m-1)]=-9999.99
                   MW[414+20*(_m-1)]=-9999.99
                   MW[415+20*(_m-1)]=-9999.99
                   MW[416+20*(_m-1)]=-9999.99
                   MW[419+20*(_m-1)]=-9999.99
                 ENDIF
                 
              ENDJLOOP
           ENDLOOP    ; end market segment loop to set mode availability
           /*
           ; Write out the utilities
           JLOOP                                                                                                                                         
             if (ACC=1-3)                                                                                                                                  
               IF (ACC==1) then                                                                                                                            
                  ACC_NAME='CAN WALK TO TRANSIT'                                                                                                           
               ELSEIF (ACC==2)                                                                                                                             
                  ACC_NAME='MUST DRIVE TO TRANSIT'                                                                                                         
               ELSEIF (ACC==3)                                                                                                                             
                  ACC_NAME='NO TRANSIT'                                                                                                                    
               ENDIF                                                                                                                                       
                                                                                                                                                           
              ; IF (({DebugMC} > 0) && (I=501) && (J=690))   
              IF ((I=501) && (J=690))   
                  READ FILE = "WriteCompositeUtility.S"
              ENDIF
            ENDIF  
          ENDJLOOP 
          */
           ; ############################# XCHOICE SETUP ###################################
           ; Use DEMAND=1 to generate probabilities.
           ; 0-Car Households
                 _DMD=260+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,
                 DEMANDMW=_DMD,
                 ODEMANDMW=601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,
                 STARTMW=900,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=528,
                 ;SPLITCOMP=521,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=525,
                 ;SPLITCOMP=541,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=521,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=526,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=522,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=523,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=524,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=527
    
           IF(@MARKETS@==1) GOTO next
           ; Car-insufficient, Low Income Households
                 _DMD=263+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,
                 DEMANDMW=_DMD,
                 ODEMANDMW=621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,
                 STARTMW=920,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=536,
                 ;SPLITCOMP=522,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=533,
                 ;SPLITCOMP=542,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=529,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=534,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=530,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=531,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=532,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=535

           ; Car-insufficient, High Income Households
                 _DMD=266+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,
                 DEMANDMW=_DMD,
                 ODEMANDMW=641,642,643,644,645,646,647,648,649,650,651, 652,653,654,655,656,657,658,659,
                 STARTMW=940,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=544,
                 ;SPLITCOMP=523,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=541,
                 ;SPLITCOMP=543,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=537,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=542,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=538,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=539,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=540,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=543
    
           ; Car-sufficient, Low Income Households
                 _DMD=269+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,
                 DEMANDMW=_DMD,
                 ODEMANDMW=661,662,663,664,665,666,667,668,668,670,671,672,673,674,675,676,677,678,679,
                 STARTMW=960,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=552,
                 ;SPLITCOMP=524,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=549,
                 ;SPLITCOMP=544,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=545,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=550,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=546,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=547,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=548,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=551
    
           ; Car-sufficient, High Income Households
                 _DMD=272+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,
                 DEMANDMW=_DMD,
                 ODEMANDMW=681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,
                 STARTMW=980,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=560,
                 ;SPLITCOMP=525,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=557,
                 ;SPLITCOMP=545,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=553,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=558,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=554,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=555,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=556,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=559
           :next
           
           ; Aggregate trips for all access markets
           LOOP _m=1,@MARKETS@              ; For each auto sufficiency market
               LOOP _c=1,19                 ; 19 choices
                   _n=700+_c+(_m-1)*20      ; 701 to 719: Zero auto market trips, 721 - 739 is auto insufficient low inc...
                   _d=600+_c + (_m-1)*20    
                   MW[_n]= MW[_n] + MW[_d]  ; MW[_n] --> MW(701 to 799)
               ENDLOOP
           ENDLOOP
           
           ; Store logsums for each access market 
           LOOP _m = 1, @MARKETS@
             IF (ACC==1) 
               MW[800+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 800 = ZA, 820 = A<W Low, 840 = A<W Hi, 860 = A>W Lo, 880 = A>w Hi) 
               MW[801+(_m-1)*20] = MW[522+(_m-1)*8]    ; Util_WTrn   
               MW[802+(_m-1)*20] = MW[523+(_m-1)*8]    ; Util_DTrn   
               MW[803+(_m-1)*20] = MW[524+(_m-1)*8]    ; Util_KTrn   
               MW[804+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[805+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[806+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[807+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums                        
             ELSEIF(ACC==2)
               MW[808+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 808 = ZA, 828 = A<W Low, 848 = A<W Hi, 868 = A>W Lo, 888 = A>w Hi) 
               ; MW[808+(_m-1)*20] = MW[522+(_m-1)*8]  ; Util_WTrn   
               MW[809+(_m-1)*20] = MW[523+(_m-1)*8]    ; Util_DTrn   
               MW[810+(_m-1)*20] = MW[524+(_m-1)*8]    ; Util_KTrn   
               MW[811+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[812+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[813+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[814+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums   
             ELSEIF(ACC==3)
               MW[815+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 815 = ZA, 835 = A<W Low, 855 = A<W Hi, 875 = A>W Lo, 895 = A>w Hi) 
              ; MW[808+(_m-1)*20] = MW[522+(_m-1)*8]   ; Util_WTrn   
              ; MW[809+(_m-1)*20] = MW[523+(_m-1)*8]   ; Util_DTrn   
              ; MW[810+(_m-1)*20] = MW[524+(_m-1)*8]   ; Util_KTrn   
               MW[816+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[817+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[818+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[819+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums 
            ENDIF
          ENDLOOP
         
           
           ; Store probabilities for each transit access category
           ;  IF (ACC == 1)
           ;      LOOP _m=1,@MARKETS@
           ;          LOOP _c=1,11
           ;              _n=320+_c+(_m-1)*11
           ;              _d=600+_c + (_m-1)*20
           ;              MW[_n]=MW[_d]         ; MW[_n] --> MW(321 to 397)
           ;          ENDLOOP
           ;      ENDLOOP
           ;  ELSEIF (ACC == 2)
           ;      LOOP _m=1,@MARKETS@
           ;          LOOP _c=1,11
           ;;             _n=320+_c+(_m-1)*11
           ;              _n=740+_c+(_m-1)*11
           ;              _d=600+_c + (_m-1)*20
           ;              MW[_n]=MW[_d]         ; MW[_n] --> MW(741 to 817)
           ;          ENDLOOP
           ;      ENDLOOP
           ;  ENDIF
    
            ; exponentiated auto utility -- for user benefits
            LOOP _m=1,@MARKETS@
              MW[560+_m]=exp(NC_1 * MW[525+(_m-1)*8])     
            ENDLOOP                               

            ; Calculate access market shares
            ARRAY TYPE=F ACCShare=ZONES,ZONES,3
            JLOOP
              IF (ACC==1)
                  ACCShare[I][J][ACC] = (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)         ; Can Walk
              ELSEIF (ACC==2)
                  ACCShare[I][J][ACC] = (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)   ; Must Drive
              ELSEIF (ACC==3)
                  ACCShare[I][J][ACC] = 1 - ACCShare[I][J][1] - ACCShare[I][J][2]                                 ; No Transit
              ENDIF
            ENDJLOOP
           
            ; Calculate logit average of the mode choice logsums (composite utilities) across access markets
            LOOP _m=1,@MARKETS@
             JLOOP
               MW[570+_m] = MW[570+_m] + EXP(MW[528+(_m-1)*8]) * ACCShare[I][J][ACC]
               IF(ACC==3)
                if (MW[570+_m]> 0) 
                  MW[570+_m] = LN(MW[570+_m])
                else 
                  MW[570+_m] = 0
                endif
               ENDIF
             ENDJLOOP
             
            ENDLOOP
        ENDLOOP ; end access loop
ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

EndDistributeMultiStep
; End of PILOT Script

ENDLOOP

LOOP PURPOSE = 13, 16, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


Distribute MULTISTEP=1       

    ; NHBW PK purpose
    IF (PURPOSE=13) 
    PERIOD= 'PK'
    PURP='NHBW'
    PURPNO=8
    SHRNO=2
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=' '
    noNHB=';'
    MARKETS=1
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 13 of 16 NHBW PK", printo=0
    
    ELSEIF (PURPOSE=14) ; NHBO PK purpose
    PERIOD= 'PK'
    PURP='NHBO'
    PURPNO=9
    SHRNO=3
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=' '
    noNHB=';'
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number = 14 of 16 NHBO PK", printo=0
    
    ; NHBW OP purpose
    ELSEIF (PURPOSE=15) 
    PERIOD= 'OP'
    PURP='NHBW'
    PURPNO=8
    SHRNO=2
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=' '
    noNHB=';'
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number = 15 of 16 NHBW OP", printo=0
   
    ; NHBO OP purpose
    ELSEIF (PURPOSE=16) 
    PERIOD= 'OP'
    PURP='NHBO'
    PURPNO=9
    SHRNO=3
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=' '
    noNHB=';'
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =16 of 16 NHBO OP", printo=0
    ENDIF
; End of PILOT Script

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

DistributeMultiStep ProcessID="NERPM", ProcessNum=Purpose
; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\applications\MCMAT00C_nhb.S"
    
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\@purpose@_logsums.prn"
;===================================================================================================================================
        ; XCHOICE - Standard Output (MC trips and final logsums)
        ;===================================================================================================================================
FILEO MATO[1] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MC1.MAT",
            MO=701-719,DEC=19*D,
            NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC
      
       ; Logsums by auto sufficiency (averaged across all access markets)
FILEO MATO[2] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MCLS_A10.MAT",
       MO=571,DEC=1*D,NAME=LSUM_M1 
       
        ; Exp(AutoUtility) for user benefits
FILEO MATO[3] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_expautoutil.mat",
        MO=561,DEC=1*D,NAME=EXPA_M1 
       
FILEO MATO[4] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MCLS_XCHOICE_A10.MAT",
       MO=528,DEC=1*D,NAME=LSUM_M1
            
        ; Zone and station data
FILEI ZDATI[1] = "{SCENARIO_DIR}\input\ZDATA_{Year}{alt}.DBF"
FILEI ZDATI[2] = "{SCENARIO_DIR}\output\STATDATA_A10.DBF"
    
        ; Modechoice coefficients and alternative specific constants
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\input\@PERIOD@_MC_CONSTANTS.CSV"
FILEI LOOKUPI[2] = "{SCENARIO_DIR}\input\@PERIOD@_TRN_COEFFICIENTS.CSV"
    
        ; Transit skim (1: Walk to Skyway)
FILEI MATI[1] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_SKYWAY_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (2: Walk to Local Bus)
FILEI MATI[2] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_LOCAL_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (3: Walk to Express Bus)
FILEI MATI[3] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (4: Walk to BRT-LRT)
FILEI MATI[4] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (5: Walk to Commuter Rail)
FILEI MATI[5] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (6: PNR to Express Bus)
FILEI MATI[6] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_PNR_{Alt}{year}.MAT"
    
        ; Transit skim (7: PNR to BRT-LRT Bus)
FILEI MATI[7] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_PNR_{Alt}{year}.MAT"
    
        ; Transit skim (8: PNR to Commuter Rail)
FILEI MATI[8] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_PNR_{Alt}{year}.MAT"
    
        ; Transit skim (9: KNR to Express Bus)
FILEI MATI[9] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_KNR_{Alt}{year}.MAT"
    
        ; Transit skim (10: KNR to BRT-LRT Bus)
FILEI MATI[10] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_KNR_{Alt}{year}.MAT"
    
        ; Transit skim (11: KNR to Commuter Rail)
FILEI MATI[11] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_KNR_{Alt}{year}.MAT"
    
        ; Highway skim (All Drive)
FILEI MATI[12] = "{SCENARIO_DIR}\output\@SKIMFILE@.MAT"
    
        ; Highway skim (Drive to Skyway) 
FILEI MATI[13] = "{SCENARIO_DIR}\output\@PERIOD@_DRV_SKYWAY.MAT"

        ; HOV time savings
        ; Table 1 - HOV time savings for peak period
        ; Table 2 - HOV time savings for off-peak period
    
        ; Person trips
    
        ; Progress Bar update for evey 100 zones
        zonemsg=100
    
        ; Declare arrays to hold alternative specific constants
        ARRAY PARK=2578
        ARRAY TYPE=F K_AUT=5, K_SR=5, K_SR3=5, K_TRN=5, K_TDRV=5, K_TKNR=5, K_NMOT=5, K_BIKE=5, K_TDRVE=5
        ARRAY TYPE=C30 MARKET_NAME=5
    
        ; Read alternative specific Constants
        LOOKUP, NAME=CONSTANTS, LOOKUP[1]=1, RESULT=@PURPNO@, INTERPOLATE=N, , LIST=Y, LOOKUPI=1
    
        ; Read mode choice coefficients
        LOOKUP, NAME=COEFF, LOOKUP[1]=1, RESULT=@PURPNO@, INTERPOLATE=N, LIST=Y, LOOKUPI=2
    
        ; Read coefficients and constants
        IF (i=FirstZone)
          ; Index _m identifies the market segment, as follows:
          ; All HB purposes except shcool, university and NNHB
          ; -------------------------------------------------------
          ;    _m = 1      zero-car households
          ;    _m = 2      low income, car insufficient hhlds
          ;    _m = 3      high income, car sufficient hhlds
          ;    _m = 4      low income, car sufficient hhlds
          ;    _m = 5      high income, car sufficient hhlds
    
          ; Household market stratified constants
          LOOP _m=1,@MARKETS@    
            K_AUT[_m]  = CONSTANTS(1,(_m-1)*10+1)            ; drive to skyway
            K_SR[_m]   = CONSTANTS(1,(_m-1)*10+2)            ; shared-ride 2 & 3+
            K_SR3[_m]  = CONSTANTS(1,(_m-1)*10+3)            ; shared ride 3+
            K_TRN[_m]  = CONSTANTS(1,(_m-1)*10+4)            ; transit
            K_TDRV[_m] = CONSTANTS(1,(_m-1)*10+5)            ; drive to local
            K_TKNR[_m] = CONSTANTS(1,(_m-1)*10+6)            ; knr to transit
            K_NMOT[_m] = CONSTANTS(1,(_m-1)*10+7)            ; non-motorized (walk & bike)
            K_BIKE[_m] = CONSTANTS(1,(_m-1)*10+8)            ; bike
            K_TDRVE[_m] = CONSTANTS(1,(_m-1)*10+9)           ; pnr to express
          ENDLOOP
    
          ; MARKETS=@MARKETS@
          MARKET_NAME[1] = '@Mkt1_Name@'
          MARKET_NAME[2] = '@Mkt2_Name@'
          MARKET_NAME[3] = '@Mkt3_Name@'
          MARKET_NAME[4] = '@Mkt4_Name@'
          MARKET_NAME[5] = '@Mkt5_Name@'
    
          ; Mode-specific constants -- same for all hhld markets
          K_SKY = CONSTANTS(1,51)                  ; Skyway
          K_EXP = CONSTANTS(1,52)                  ; express bus
          K_BRT = CONSTANTS(1,53)                  ; brt
          K_URL = CONSTANTS(1,54)                  ; urban rail
          K_CRL = CONSTANTS(1,55)                  ; commuter rail
          K_INFDA = CONSTANTS(1,56)                ; informal KNR-to-Localbus
          
          ; Define array to hold cost coefficients
          ARRAY TYPE=F COEFF_COST=5
          COEFF_COST[1]  = COEFF(1,5)
          COEFF_COST[2]  = COEFF(1,6)
          COEFF_COST[3]  = COEFF(1,7)
          COEFF_COST[4]  = COEFF(1,8)
          COEFF_COST[5]  = COEFF(1,9)
          
          ; Level of Service Coefficients
          COEFF_IVTT   = COEFF(1,1)                ; In-vehicle travel time coefficient
          COEFF_SWAIT  = COEFF(1,2)                ; Short wait(<5 minutes)
          COEFF_LWAIT  = COEFF(1,3)                ; Long wait (>5 minutes)
          COEFF_XWAIT  = COEFF(1,4)                ; Xfer wait
          COEFF_DRIVE  = COEFF(1,10)               ; Drive access
          COEFF_TERML  = COEFF(1,11)               ; Terminal time
          COEFF_WALK   = COEFF(1,12)               ; Walk access
          COEFF_WALK1  = COEFF(1,13)               ; Walk time < 1
          COEFF_WALK2  = COEFF(1,14)               ; Walk time > 1
          COEFF_BIKE1  = COEFF(1,15)               ; Bike time < 1
          COEFF_BIKE2  = COEFF(1,16)               ; Bike time > 1
          DWalkBIKE    = COEFF(1,17)               ; Walk and Bike threshold
 
          ; Nesting coefficients
          NC_1         = COEFF(1,18)               ; Level 1 - auto, trn, non-mot
          NC_2         = COEFF(1,19)               ; Level 2 - transit access mode choice
          NC_3         = COEFF(1,20)               ; Level 3 - transit access mode choice
          ; NCP = NC_1 * NC_2                      ; Product of nesting coefficients

          ; Calibration specific
          COEFF_CBD     = COEFF(1,21)              ; CBD dummy
          COEFF_NXFER   = COEFF(1,22)              ; number of xfers 
                    
        ENDIF
    
        ; Highway skims
        FILLMW MW[1]=MI.12.1,2,3,4,5,6,7,8 ;,9     ; highway skims
        FILLMW MW[241]=MI.13.1,2,3,4,5,6,7,8,9     ; drive to skyway best path
       ; FILLMW MW[11]=MI.14.HOVsave@PERIOD@        ; HOVsavePK for peak period and HOVsaveOP for off-peak period
       ; FILLMW MW[291]=MI.18.@STATION_TABLE@       ; 8 tables - PKStationTAZ_pnrb,PKParkCost_pnrb,termtimpnr,termtimknr,OPStationTAZ_pnrb,OPParkCost_pnrb,termtimpnr,termtimknr
    
        ; Transit (walk) skims
        FILLMW MW[21]=MI.1.1(15)                   ; walk to skyway
        FILLMW MW[41]=MI.2.1(15)                   ; walk to loc bus
        FILLMW MW[61]=MI.3.1(15)                   ; walk to exp bus
        FILLMW MW[81]=MI.4.1(15)                   ; walk to brt lrt
        FILLMW MW[101]=MI.5.1(15)                  ; walk to com rail
    
        ; Transit (PNR) skims
        FILLMW MW[121]=MI.6.1(15)                  ; pnr to exp bus
        FILLMW MW[141]=MI.7.1(15)                  ; pnr to brt lrt
        FILLMW MW[161]=MI.8.1(15)                  ; pnr to com rail
    
        ; Transit (KNR) skims
        FILLMW MW[181]=MI.9.1(15)                  ; knr to exp bus
        FILLMW MW[201]=MI.10.1(15)                 ; knr to brt lrt
        FILLMW MW[221]=MI.11.1(15)                 ; knr to com rail
    
        ; Walk and Bike
        ; distance portion that is 1 mile or less
        MW[12] = MIN(MW[2],1)
    
        ; Distance portion that is longer than 1 mile
        JLOOP
          IF (MW[2][J] > 1)
              MW[13] = MW[2][J] - 1
          ELSE
              MW[13] = 0
          ENDIF
        ENDJLOOP
    
        ; Person trips
        MW[251] = 1  ; Total Person Trips
    
        ;  Write out coefficients for debug and regular runs
        IF (I=1)  ; Write mode choice summary file                                                                                                
          ; DEBUG MODE CHOICE                                                                                                                   
          ;IF ({DebugMC}>0) 
             ; split this into two sections (1) DEBUG and (2) Regular 
            ; READ FILE = "WriteReport.S"
         ; ENDIF
        ENDIF
        
        ; ************************** PROCESS PERSON TRIPS INTO MARKETS ************************************
        ; Divide person trip table into different markets
        ;  MW[252]=MW[251] * ZI.1.PERCAUTO0[I]                        ; Zero car HHs
        ;  MW[253]=MW[251] * ZI.1.PERCAUTO1[I]                        ; Auto Insufficient Low Income HHs
        ;  MW[254]=MW[251] * ZI.1.PERCAUTO3[I]                        ; Auto Insufficient High Income HHs
        ;  MW[255]=MW[251] * ZI.1.PERCAUTO4[I]                        ; Auto Sufficient Low Income HHs
        ;  MW[256]=(MW[251] - MW[252] - MW[253] - MW[254] - MW[255])  ; Auto Sufficient High Income HHs
        
        MW[252]= 1    ; Zero car HHs                     
        MW[253]= 1    ; Auto Insufficient Low Income HHs 
        MW[254]= 1    ; Auto Insufficient High Income HHs
        MW[255]= 1    ; Auto Sufficient Low Income HHs   
        MW[256]= 1    ; Auto Sufficient High Income HHs   

        ; Overwrite the above if there is only one market
        IF (@MARKETS@=1)
           MW[252]=MW[251]
           MW[253]=0
           MW[254]=0
           MW[255]=0
           MW[256]=0
        ENDIF
    
        ; Zero car transit sub-markets (can walk, must drive and no access)
        MW[261] = MW[252] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[262] = MW[252] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[263] = MW[252] - MW[261] - MW[262]                                                                 ; No Access
    
        ; Auto Insufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[264] = MW[253] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[265] = MW[253] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[266] = MW[253] - MW[264] - MW[265]                                                                 ; No Access
    
        ; Auto Insufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[267] = MW[254] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[268] = MW[254] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[269] = MW[254] - MW[267] - MW[268]                                                                 ; No Access
    
        ; Auto Sufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[270] = MW[255] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[271] = MW[255] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[272] = MW[255] - MW[270] - MW[271]                                                                 ; No Access
    
        ; Auto Sufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[273] = MW[256] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[274] = MW[256] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[275] = MW[256] - MW[273] - MW[274]                                                                 ; No Access

    
        ; *******************************************  WALK ACCESS MARKETS  ************************************************
        ; ******************************************************************************************************************
    
        ; Loop by access modes
        LOOP ACC=1,3
        
            ;**********************  ADD HOUSEHOLD MARKET SPECIFIC TERMS **********************************
            LOOP _m=1,@MARKETS@
    
               ; Drive alone
               MW[301+20*(_m-1)] = (COEFF_TERML    * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +           ; Terminal time
                                    COEFF_IVTT     * MW[4]             +                               ; IVTT
                                    COEFF_CBD      * ZI.1.CBD_DUMMY[J] +                               ; CBD dummy
                                    COEFF_COST[_m] * MW[1]             +                               ; Toll
                                    COEFF_COST[_m] * ZI.1.@PRK@[J]     +                               ; Auto parking cost
                                    COEFF_COST[_m] *  MW[2] * 9.5)                                     ; Auto operating cost
               MW[401+20*(_m-1)] = MW[301+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility
              
               ; Shared Ride 2-person
               MW[302+20*(_m-1)] = (K_SR[_m]       +                                                   ; Constant(s)
                                    COEFF_TERML * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +              ; Terminal time
                                    COEFF_IVTT  * MW[8]             -                                  ; IVTT
                                  ;  COEFF_IVTT  * (MAX (MW[11], 0)) +                                  ; HOV time savings
                                    COEFF_CBD   * ZI.1.CBD_DUMMY[J] +                                  ; CBD dummy               
                                    COEFF_COST[_m] * (MW[5]/ 2 )    +                                  ; Toll
                                    COEFF_COST[_m] * MW[2] * 9.5)                                      ; Auto operating cost
               MW[402+20*(_m-1)] =  MW[302+20*(_m-1)] / NC_1 / NC_2 / NC_3                             ; Scaled Utility
               
               ; Shared Ride 3+ person
               MW[303+20*(_m-1)] = (K_SR[_m] + K_SR3[_m] +                                             ; Constant(s)
                                    COEFF_TERML * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +              ; Terminal time 
                                    COEFF_IVTT  * MW[8]             -                                  ; IVTT
                                  ;  COEFF_IVTT  * (MAX (MW[11], 0)) +                                  ; HOV time savings
                                    COEFF_CBD   * ZI.1.CBD_DUMMY[J] +                                  ; CBD dummy               
                                    COEFF_COST[_m] * (MW[5]/@OCC3@) +                                  ; Toll
                                    COEFF_COST[_m] * MW[2] * 9.5)                                      ; Auto operating cost
               MW[403+20*(_m-1)] =  MW[303+20*(_m-1)] / NC_1 / NC_2 / NC_3                             ; Scaled Utility
                                                     
               ; Drive to Skyway
               MW[304+20*(_m-1)] = (K_AUT[_m]                                  +                       ; Constant(s)
                                   ; COEFF_DRIVE    *  MW[243]                  +                      ; Drive Access Time
                                    COEFF_WALK     *  MW[244]                  +                       ; Walk Access Time to skyway (PNR lot to skyway & walk egress)
                                    COEFF_SWAIT    *  MIN(MW[247],5)           +                       ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[247] - MIN(MW[247],5))+                       ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[248]                  +                       ; Xfer Wait
                                    COEFF_IVTT     * (MW[243] + MW[245])       +                       ; IVTT (hwy time + skyway time)
                                    COEFF_COST[_m] *  MW[249]                  +                       ; Transit Fare
                                    COEFF_COST[_m] *  MW[241]                  +                       ; Toll
                                    COEFF_COST[_m] *  MW[242] * 9.5            +                       ; Auto operating cost
                                    COEFF_NXFER    *  MW[246]                  +                       ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[404+20*(_m-1)] = MW[304+20*(_m-1)] /NC_1 /NC_2                                       ; Scaled Utility

               ; Walk to Skyway
               MW[305+20*(_m-1)] = (K_TRN[_m]      +  K_SKY                    +                       ; Constant(s)
                                    COEFF_DRIVE    *  MW[22]                   +                       ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[21] + MW[23])         +                       ; Walk Access Time + Xfer Time   
                                    COEFF_SWAIT    *  MIN(MW[32],5)            +                       ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[32] - MIN(MW[32],5))  +                       ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[33]                   +                       ; Xfer Wait
                                    COEFF_IVTT     *  MW[24]                   +                       ; IVTT (skyway time)
                                    COEFF_COST[_m] *  MW[34]                   +                       ; Transit Fare
                                    COEFF_NXFER    *  MW[31]                   +                       ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[405+20*(_m-1)] = MW[305+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; Walk to Local Bus
               MW[306+20*(_m-1)] = (K_TRN[_m]                                   +                      ; Transit Constant
                                    COEFF_DRIVE    *  MW[42]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[41] + MW[43])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[52],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[53]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[44] + MW[45])          +                      ; IVTT (skyway + local bus time)
                                    COEFF_COST[_m] *  MW[54]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[51]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[406+20*(_m-1)] = MW[306+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; Walk to Express Bus
               MW[307+20*(_m-1)] = (K_TRN[_m] + K_EXP  +                                               ; Constant(s)
                                    COEFF_DRIVE    *  MW[62]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[61] + MW[63])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[72],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[72] - MIN(MW[72],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[73]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[64] + MW[65] + MW[66]) +                      ; IVTT (skyway + local + express bus time)
                                    COEFF_COST[_m] *  MW[74]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[71]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[407+20*(_m-1)] = MW[307+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; Walk to BRT-LRT
               MW[308+20*(_m-1)] = (K_TRN[_m] + K_BRT                           +                      ; Constant(s)
                                    COEFF_DRIVE    *  MW[82]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[81] + MW[83])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[92],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[92] - MIN(MW[92],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[93]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[84]+MW[85]+MW[86]+MW[87]) +                   ; IVTT (skyway + local + express + BRT time)
                                    COEFF_COST[_m] *  MW[94]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[91]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J] )                              ; CBD dummy
               MW[408+20*(_m-1)] = MW[308+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; Walk to Commuter Rail
               MW[309+20*(_m-1)] = (K_TRN[_m] + K_CRL                            +                     ; Constant(s)
                                    COEFF_DRIVE    *  MW[102]                    +                     ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[101] + MW[103])         +                     ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[112],5)             +                     ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[112] - MIN(MW[92],5))   +                     ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[113]                    +                     ; Xfer Wait
                                    COEFF_IVTT     * (MW[104] + MW[105] + MW[106]+ MW[107]+MW[108])+   ; IVTT (skyway + local + express + BRT + CRL time)
                                    COEFF_COST[_m] *  MW[114]                    +                     ; Transit Fare
                                    COEFF_NXFER    *  MW[111]                    +                     ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J] )                              ; CBD dummy
               MW[409+20*(_m-1)] = MW[309+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to Local Bus (Walk skim with drive time)
               MW[319+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m]                        +                    ; Constant(s)
                                   COEFF_DRIVE    * (MW[41]/2/10)                 +                    ; Drive Access Time (Drive time = Walk access time/10; assuming drive speed of 30 MPH & 50%-50% access-egress split)
                                   COEFF_WALK     * (MW[43] + MW[41]/2)           +                    ; Xfer Time (here we don't have walk egress time, so assume a 50%-50% access-egress split)
                                   COEFF_SWAIT    *  MIN(MW[52],5)                +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))      +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[53]                       +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[44] + MW[45])             +                    ; IVTT (skyway + local bus time)
                                   COEFF_COST[_m] *  MW[54]                       +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[51]                       +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[419+20*(_m-1)] = MW[319+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
        
               ; PNR to Express Bus
               MW[310+20*(_m-1)] = (K_TRN[_m] + K_TDRVE[_m] + K_EXP                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[122]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[121] + MW[123])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[132],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[132] - MIN(MW[132],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[133]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[124] + MW[125] + MW[126]) +                    ; IVTT (skyway + local + express bus time)
                                   COEFF_COST[_m] *  MW[134]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[131]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[410+20*(_m-1)] = MW[310+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to BRT-LRT Bus
               MW[311+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m] + K_BRT                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[142]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[141] + MW[143])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[152],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[152] - MIN(MW[152],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[153]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[144]+MW[145]+MW[146]+MW[147]) +                ; IVTT (skyway + local + express + BRT time)
                                   COEFF_COST[_m] *  MW[154]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[151]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[411+20*(_m-1)] = MW[311+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to Commuter Rail
               MW[312+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m] + K_CRL                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[162]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[161] + MW[163])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[172],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[172] - MIN(MW[172],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[173]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[164] + MW[165] + MW[166] + MW[167] +MW[168])+  ; IVTT (skyway + local + express + BRT + CRL time)
                                   COEFF_COST[_m] *  MW[174]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[171]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[412+20*(_m-1)] = MW[312+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to Local Bus
               MW[313+20*(_m-1)] = (K_TRN[_m]     + K_TKNR[_m]   + K_INFDA        +                    ; Constant(s)
                                   COEFF_DRIVE    * (MW[41]/10)                   +                    ; Drive Access Time (Drive time = Walk time/10; assuming drive speed of 30 MPH)
                                   COEFF_WALK     * (MW[43] + 3)                  +                    ; Xfer Time (here we don't have walk egress time, so assume 3 minutes)
                                   COEFF_SWAIT    *  MIN(MW[52],5)                +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))      +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[53]                       +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[44] + MW[45])             +                    ; IVTT (skyway + local bus time)
                                   COEFF_COST[_m] *  MW[54]                       +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[51]                       +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[413+20*(_m-1)] = MW[313+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; KNR to Express Bus
               MW[314+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_EXP                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[182]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[181] + MW[183])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[192],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[192] - MIN(MW[192],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[193]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[184] + MW[185] + MW[186]) +                    ; IVTT (skyway + local + express bus time)
                                   COEFF_COST[_m] *  MW[194]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[191]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[414+20*(_m-1)] = MW[314+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to BRT-LRT Bus
               MW[315+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_BRT                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[202]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[201] + MW[203])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[212],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[212] - MIN(MW[212],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[213]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[204]+MW[205]+MW[206]+MW[207]) +                ; IVTT (skyway + local + express + BRT time)
                                   COEFF_COST[_m] *  MW[214]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[211]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[415+20*(_m-1)] = MW[315+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to Commuter Rail
               MW[316+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_CRL                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[222]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[221] + MW[223])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[232],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[232] - MIN(MW[232],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[233]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[224] + MW[225] + MW[226]  +MW[227] +MW[228])+  ; IVTT (skyway + local + express + BRT + CRL time)
                                   COEFF_COST[_m] *  MW[234]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[231]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[416+20*(_m-1)] = MW[316+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
                          
               ; Walk
               MW[317+20*(_m-1)] = (K_NMOT[_m]                                    +                    ; Constant(s)
                                   COEFF_WALK1  * MW[12]                          +                    ; Walk time if less than 1 mile
                                   COEFF_WALK2  * MW[13])                                              ; Walk time if more than 1 mile
               MW[417+20*(_m-1)] = MW[317+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility
                      
               ; Bike
               MW[318+20*(_m-1)] = (K_NMOT[_m] + K_BIKE[_m]                       +                    ; Constant(s)
                                   COEFF_BIKE1  * MW[12]                          +                    ; Bike time if less than 1 mile
                                   COEFF_BIKE2  * MW[13])                                              ; Bike time if more than 1 mile
               MW[418+20*(_m-1)] = MW[318+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility

            ENDLOOP
    
            ;***************************    MODE AVAILABILITY CHECKS    ************************************
            ;  Drive alone and PNR to transit not available to zero car households
            IF (@Mkt1_0car@=1)
              MW[401] = -9999.99  ; Drive alone
              MW[404] = -9999.99  ; Drive to Skyway
              MW[410] = -9999.99  ; PNR to Express
              MW[411] = -9999.99  ; PNR to BRT
              MW[412] = -9999.99  ; PNR to Com Rail
              MW[419] = -9999.99  ; PNR to Local
            ENDIF
    
            LOOP _m=1,@MARKETS@
              JLOOP
                 ; Transit not available if no line-haul in-vehicle time on the transit path
                 ; Drive to skyway 
                 IF (MW[245] == 0)  MW[404+20*(_m-1)]=-9999.99
                 
                 ; Walk to skyway
                 IF (MW[24] == 0)  MW[405+20*(_m-1)]=-9999.99
    
                 ; Walk to local bus
                 IF (MW[45] == 0)  MW[406+20*(_m-1)]=-9999.99
    
                 ; Walk to express bus
                 IF (MW[66] == 0)  MW[407+20*(_m-1)]=-9999.99
    
                 ; Walk to BRT-LRT bus
                 IF (MW[87] == 0)  MW[408+20*(_m-1)]=-9999.99
    
                 ; Walk to Commuter Rail
                 IF (MW[108] == 0)  MW[409+20*(_m-1)]=-9999.99
                 
                 ; KNR to local bus
                 IF (MW[45] == 0)  MW[419+20*(_m-1)]=-9999.99
                 
                 ; PNR to express bus
                 IF (MW[126] == 0)  MW[410+20*(_m-1)]=-9999.99
    
                 ; PNR to BRT-LRT
                 IF (MW[147] == 0)  MW[411+20*(_m-1)]=-9999.99
    
                 ; PNR to Commuter rail
                 IF (MW[168] == 0) MW[412+20*(_m-1)]=-9999.99
    
                 ; KNR to local bus
                 IF (MW[45] == 0)  MW[413+20*(_m-1)]=-9999.99
    
                 ; KNR to express bus
                 IF (MW[186] == 0)  MW[414+20*(_m-1)]=-9999.99
    
                 ; KNR to BRT-LRT
                 IF (MW[207] == 0)  MW[415+20*(_m-1)]=-9999.99
    
                 ; KNR to Commuter rail
                 IF (MW[228] == 0) MW[416+20*(_m-1)]=-9999.99
                 
                 /*
                 ; If walk access distance less than minimum, no walk access to transit
                 ;IF (MW[2] < 0.6)
                 ;   MW[405+20*(_m-1)]=-9999.99
                 ;   MW[406+20*(_m-1)]=-9999.99
                 ;   MW[407+20*(_m-1)]=-9999.99
                 ;   MW[408+20*(_m-1)]=-9999.99
                 ;   MW[409+20*(_m-1)]=-9999.99
                 ;ENDIF
                 ;
                 ;; If drive access distance less than minimum, no drive access to transit
                 ;IF (MW[2] < 1.2)
                 ;   MW[410+20*(_m-1)]=-9999.99
                 ;   MW[411+20*(_m-1)]=-9999.99
                 ;   MW[412+20*(_m-1)]=-9999.99
                 ;   MW[419+20*(_m-1)]=-9999.99
                 ;ENDIF
                 */
                 
                 ; Walk to transit not available for the MD or NT access markets;
                 IF(ACC==2 || ACC==3)
                    MW[405+20*(_m-1)]=-9999.99
                    MW[406+20*(_m-1)]=-9999.99
                    MW[407+20*(_m-1)]=-9999.99
                    MW[408+20*(_m-1)]=-9999.99
                    MW[409+20*(_m-1)]=-9999.99
                 ENDIF
    
                 ; Transit not available for NT access markets;
                 IF(ACC==3)
                   MW[404+20*(_m-1)]=-9999.99
                   MW[410+20*(_m-1)]=-9999.99
                   MW[411+20*(_m-1)]=-9999.99
                   MW[412+20*(_m-1)]=-9999.99
                   MW[413+20*(_m-1)]=-9999.99
                   MW[414+20*(_m-1)]=-9999.99
                   MW[415+20*(_m-1)]=-9999.99
                   MW[416+20*(_m-1)]=-9999.99
                   MW[419+20*(_m-1)]=-9999.99
                 ENDIF
                 
              ENDJLOOP
           ENDLOOP    ; end market segment loop to set mode availability
           /*
           ; Write out the utilities
           JLOOP                                                                                                                                         
             if (ACC=1-3)                                                                                                                                  
               IF (ACC==1) then                                                                                                                            
                  ACC_NAME='CAN WALK TO TRANSIT'                                                                                                           
               ELSEIF (ACC==2)                                                                                                                             
                  ACC_NAME='MUST DRIVE TO TRANSIT'                                                                                                         
               ELSEIF (ACC==3)                                                                                                                             
                  ACC_NAME='NO TRANSIT'                                                                                                                    
               ENDIF                                                                                                                                       
                                                                                                                                                           
              ; IF (({DebugMC} > 0) && (I=501) && (J=690))   
              IF ((I=501) && (J=690))   
                  READ FILE = "WriteCompositeUtility.S"
              ENDIF
            ENDIF  
          ENDJLOOP 
          */
           ; ############################# XCHOICE SETUP ###################################
           ; Use DEMAND=1 to generate probabilities.
           ; 0-Car Households
                 _DMD=260+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,
                 DEMANDMW=_DMD,
                 ODEMANDMW=601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,
                 STARTMW=900,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=528,
                 ;SPLITCOMP=521,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=525,
                 ;SPLITCOMP=541,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=521,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=526,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=522,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=523,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=524,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=527
    
           IF(@MARKETS@==1) GOTO next
           ; Car-insufficient, Low Income Households
                 _DMD=263+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,
                 DEMANDMW=_DMD,
                 ODEMANDMW=621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,
                 STARTMW=920,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=536,
                 ;SPLITCOMP=522,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=533,
                 ;SPLITCOMP=542,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=529,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=534,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=530,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=531,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=532,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=535

           ; Car-insufficient, High Income Households
                 _DMD=266+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,
                 DEMANDMW=_DMD,
                 ODEMANDMW=641,642,643,644,645,646,647,648,649,650,651, 652,653,654,655,656,657,658,659,
                 STARTMW=940,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=544,
                 ;SPLITCOMP=523,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=541,
                 ;SPLITCOMP=543,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=537,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=542,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=538,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=539,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=540,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=543
    
           ; Car-sufficient, Low Income Households
                 _DMD=269+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,
                 DEMANDMW=_DMD,
                 ODEMANDMW=661,662,663,664,665,666,667,668,668,670,671,672,673,674,675,676,677,678,679,
                 STARTMW=960,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=552,
                 ;SPLITCOMP=524,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=549,
                 ;SPLITCOMP=544,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=545,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=550,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=546,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=547,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=548,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=551
    
           ; Car-sufficient, High Income Households
                 _DMD=272+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,
                 DEMANDMW=_DMD,
                 ODEMANDMW=681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,
                 STARTMW=980,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=560,
                 ;SPLITCOMP=525,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=557,
                 ;SPLITCOMP=545,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=553,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=558,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=554,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=555,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=556,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=559
           :next
           
           ; Aggregate trips for all access markets
           LOOP _m=1,@MARKETS@              ; For each auto sufficiency market
               LOOP _c=1,19                 ; 19 choices
                   _n=700+_c+(_m-1)*20      ; 701 to 719: Zero auto market trips, 721 - 739 is auto insufficient low inc...
                   _d=600+_c + (_m-1)*20    
                   MW[_n]= MW[_n] + MW[_d]  ; MW[_n] --> MW(701 to 799)
               ENDLOOP
           ENDLOOP
           
           ; Store logsums for each access market 
           LOOP _m = 1, @MARKETS@
             IF (ACC==1) 
               MW[800+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 800 = ZA, 820 = A<W Low, 840 = A<W Hi, 860 = A>W Lo, 880 = A>w Hi) 
               MW[801+(_m-1)*20] = MW[522+(_m-1)*8]    ; Util_WTrn   
               MW[802+(_m-1)*20] = MW[523+(_m-1)*8]    ; Util_DTrn   
               MW[803+(_m-1)*20] = MW[524+(_m-1)*8]    ; Util_KTrn   
               MW[804+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[805+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[806+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[807+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums                        
             ELSEIF(ACC==2)
               MW[808+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 808 = ZA, 828 = A<W Low, 848 = A<W Hi, 868 = A>W Lo, 888 = A>w Hi) 
               ; MW[808+(_m-1)*20] = MW[522+(_m-1)*8]  ; Util_WTrn   
               MW[809+(_m-1)*20] = MW[523+(_m-1)*8]    ; Util_DTrn   
               MW[810+(_m-1)*20] = MW[524+(_m-1)*8]    ; Util_KTrn   
               MW[811+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[812+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[813+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[814+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums   
             ELSEIF(ACC==3)
               MW[815+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 815 = ZA, 835 = A<W Low, 855 = A<W Hi, 875 = A>W Lo, 895 = A>w Hi) 
              ; MW[808+(_m-1)*20] = MW[522+(_m-1)*8]   ; Util_WTrn   
              ; MW[809+(_m-1)*20] = MW[523+(_m-1)*8]   ; Util_DTrn   
              ; MW[810+(_m-1)*20] = MW[524+(_m-1)*8]   ; Util_KTrn   
               MW[816+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[817+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[818+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[819+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums 
            ENDIF
          ENDLOOP
         
           
           ; Store probabilities for each transit access category
           ;  IF (ACC == 1)
           ;      LOOP _m=1,@MARKETS@
           ;          LOOP _c=1,11
           ;              _n=320+_c+(_m-1)*11
           ;              _d=600+_c + (_m-1)*20
           ;              MW[_n]=MW[_d]         ; MW[_n] --> MW(321 to 397)
           ;          ENDLOOP
           ;      ENDLOOP
           ;  ELSEIF (ACC == 2)
           ;      LOOP _m=1,@MARKETS@
           ;          LOOP _c=1,11
           ;;             _n=320+_c+(_m-1)*11
           ;              _n=740+_c+(_m-1)*11
           ;              _d=600+_c + (_m-1)*20
           ;              MW[_n]=MW[_d]         ; MW[_n] --> MW(741 to 817)
           ;          ENDLOOP
           ;      ENDLOOP
           ;  ENDIF
    
            ; exponentiated auto utility -- for user benefits
            LOOP _m=1,@MARKETS@
              MW[560+_m]=exp(NC_1 * MW[525+(_m-1)*8])     
            ENDLOOP                               

            ; Calculate access market shares
            ARRAY TYPE=F ACCShare=ZONES,ZONES,3
            JLOOP
              IF (ACC==1)
                  ACCShare[I][J][ACC] = (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)         ; Can Walk
              ELSEIF (ACC==2)
                  ACCShare[I][J][ACC] = (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)   ; Must Drive
              ELSEIF (ACC==3)
                  ACCShare[I][J][ACC] = 1 - ACCShare[I][J][1] - ACCShare[I][J][2]                                 ; No Transit
              ENDIF
            ENDJLOOP
           
            ; Calculate logit average of the mode choice logsums (composite utilities) across access markets
            LOOP _m=1,@MARKETS@
             JLOOP
               MW[570+_m] = MW[570+_m] + EXP(MW[528+(_m-1)*8]) * ACCShare[I][J][ACC]
               IF(ACC==3)
                if (MW[570+_m]> 0) 
                  MW[570+_m] = LN(MW[570+_m])
                else 
                  MW[570+_m] = 0
                endif
               ENDIF
             ENDJLOOP
             
            ENDLOOP
        ENDLOOP ; end access loop
ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

EndDistributeMultiStep
; End of PILOT Script

ENDLOOP

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
 Wait4Files Files=NERPM1.script.end, NERPM2.script.end, NERPM3.script.end,
   NERPM4.script.end, NERPM5.script.end, NERPM6.script.end,                                 
   NERPM7.script.end, NERPM8.script.end, NERPM9.script.end,                                 
   NERPM10.script.end, NERPM11.script.end, NERPM12.script.end,                              
   NERPM13.script.end, NERPM14.script.end, NERPM15.script.end,                              
   NERPM16.script.end,                                                
printfiles=MERGE, checkReturnCode=T   
*Cluster NERPM 1-16 Close Exit

; *Cluster NERPM 1-%NUMBER_OF_PROCESSORS% Close Exit; End of PILOT Script

; PILOT Script


DistributeMultiStep ProcessID="TMUDemoDist", ProcessNum=1
; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\OUTPUT\PRELSKIMS.MAT" "{SCENARIO_DIR}\OUTPUT\MMLOO_PKSKIM.MAT" '
ENDRUN

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\OUTPUT\PRELSKIMS.MAT" "{SCENARIO_DIR}\OUTPUT\MMLOO_OPSKIM.MAT" '
ENDRUN

; PILOT Script

EndDistributeMultiStep

DistributeMultiStep ProcessID="TMUDemoDist", ProcessNum=2
; End of PILOT Script

; Script for program DISTRIBUTION in file "C:\NERPM43\APPLICATIONS\DCMODEL\TDDST00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=DISTRIBUTION PRNFILE="{CATALOG_DIR}\APPLICATIONS\TDDST00A.PRN" MSG='Gravity Model Distribution - Peak'
FILEI MATI[1] = "{SCENARIO_DIR}\OUTPUT\MMLOO_PKSKIM.MAT"
FILEI ZDATI[1] = "{SCENARIO_DIR}\OUTPUT\PANDA_{ALT}{YEAR}_PK.DBF",
 TAZ=#1, HBSCP2 = #23 ,	HBSCP3 = #24 ,	HBSCP4 = #25 ,HBCUP1 = #26 ,HBCUP2 = #27 ,HBCUP3 = #28 ,HBCUP4 = #29 ,HBSCA  = #42 ,HBCUA  = #43
FILEO MATO[1] = "{SCENARIO_DIR}\OUTPUT\GVMTRIPS_{ALT}{YEAR}_PK.MAT",
    MO=7,1-3,8,4-6,DEC=8*S, NAME=HBCU1,HBCU2,HBCU3,HBCU4,HBSC1,HBSC2,HBSC3,HBSC4
FILEI LOOKUPI[1] = "{CATALOG_DIR}\parameters\FF.DBF"
;FILEI MATI[2] = "{Scenario_Dir}\OUTPUT\KFACTOR.MAT"

PAR MAXITERS={TDistIters},MAXRMSE=10.0, ZONEMSG=100

    LOOKUP LOOKUPI=1,
        NAME=FF,
            LOOKUP[1]=TI, RESULT=HBU,      ; using HBW friction factors for HBCU trip purpose
            LOOKUP[2]=TI, RESULT=HBU,
            LOOKUP[3]=TI, RESULT=HBU,
            LOOKUP[4]=TI, RESULT=HBSC,
            LOOKUP[5]=TI, RESULT=HBSC,      ; using HBO friction factors for HBSC trip purpose
            LOOKUP[6]=TI, RESULT=HBSC,
        INTERPOLATE=Y, FAIL[3]=0

; example of use: v=FF(9,25)
; look for 25 in the TI field and returns the IE value

;   ----- SETUP THE WORKING P'S AND A'S

;  HBSC, HBCU, TRKTXI and IE use gravity models; all other purposes use destination choice
;  For the prototype, use existing FFs to distribute these trips
;  Note HBSC1 has no productions -- no school trips in one person hhlds

    MW[7] = 0.0
    MW[8] = 0.0
    
    SETPA P[1]= HBCUP2     A[1]=HBCUA      
    SETPA P[2]= HBCUP3     A[2]=HBCUA      
    SETPA P[3]= HBCUP4     A[3]=HBCUA      
    SETPA P[4]=HBSCP2     A[4]=HBSCA      
    SETPA P[5]=HBSCP3     A[5]=HBSCA      
    SETPA P[6]=HBSCP4     A[6]=HBSCA      
;   SETPA P[8]=TKTXP      A[8]=TKTXA
;   SETPA P[9]=IEP        A[9]=IEA
 
  
;   ----- DO 6 GRAVITY MODELS
    MW[20]=MI.1.TIME+MI.1.TERMINALTIME

; no k-factors in this model
 
    GRAVITY PURPOSE=1, LOS=MW[20], FFACTORS=FF    ;HBCU2  
    GRAVITY PURPOSE=2, LOS=MW[20], FFACTORS=FF    ;HBCU3  
    GRAVITY PURPOSE=3, LOS=MW[20], FFACTORS=FF    ;HBCU4  
    GRAVITY PURPOSE=4, LOS=MW[20], FFACTORS=FF    ;HBSC2  
    GRAVITY PURPOSE=5, LOS=MW[20], FFACTORS=FF    ;HBSC3   
    GRAVITY PURPOSE=6, LOS=MW[20], FFACTORS=FF    ;HBSC4   
 

    MW[9] = MW[1]+MW[2]+MW[3]+MW[7]
    MW[10]= MW[4]+MW[5]+MW[6]+MW[8]
    
;   ----- GENERATE FREQUENCY DISTRIBUTION REPORTS

 
;   FREQUENCY VALUEMW=9  BASEMW=20,  RANGE=0-150, TITLE='HBU TRIP LENGTH FREQUENCY LONGER TIME RANGE'
    
 
    FREQUENCY VALUEMW=9  BASEMW=20,  RANGE=0-49, TITLE='HBCU TRIP LENGTH FREQUENCY'
    FREQUENCY VALUEMW=10  BASEMW=20,  RANGE=0-49, TITLE='HBSC TRIP LENGTH FREQUENCY'
    


ENDRUN


; Script for program DISTRIBUTION in file "C:\NERPM43\APPLICATIONS\DCMODEL\TDDST00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=DISTRIBUTION PRNFILE="{CATALOG_DIR}\APPLICATIONS\TDDST00B.PRN" MSG='Gravity Model Distribution - Off-Peak'
FILEI ZDATI[1] = "{SCENARIO_DIR}\OUTPUT\PANDA_{ALT}{YEAR}_OP.DBF",
TAZ=#1, HBSCP2 = #23 ,	HBSCP3 = #24 ,	HBSCP4 = #25 ,HBCUP1 = #26 ,HBCUP2 = #27 ,HBCUP3 = #28 ,HBCUP4 = #29 ,HBSCA  = #42 ,HBCUA  = #43
FILEI MATI[1] = "{SCENARIO_DIR}\OUTPUT\MMLOO_OPSKIM.MAT"
FILEO MATO[1] = "{SCENARIO_DIR}\OUTPUT\GVMTRIPS_{ALT}{YEAR}_OP.MAT",
    MO=7,1-3,8,4-6,DEC=8*S, NAME=HBCU1,HBCU2,HBCU3,HBCU4,HBSC1,HBSC2,HBSC3,HBSC4
FILEI LOOKUPI[1] = "{CATALOG_DIR}\parameters\FF.DBF"
;FILEI MATI[2] = "{Scenario_Dir}\OUTPUT\KFACTOR.MAT"

PAR MAXITERS={TDistIters},MAXRMSE=10.0, ZONEMSG=100

    LOOKUP LOOKUPI=1,
        NAME=FF,
            LOOKUP[1]=TI, RESULT=HBU,      ; using HBW friction factors for HBCU trip purpose
            LOOKUP[2]=TI, RESULT=HBU,
            LOOKUP[3]=TI, RESULT=HBU,
            LOOKUP[4]=TI, RESULT=HBSC,
            LOOKUP[5]=TI, RESULT=HBSC,      ; using HBO friction factors for HBSC trip purpose
            LOOKUP[6]=TI, RESULT=HBSC,
        INTERPOLATE=Y, FAIL[3]=0
        
; example of use: v=FF(9,25)
; look for 25 in the TI field and returns the IE value

;   ----- SETUP THE WORKING P'S AND A'S

;  HBSC, HBCU, TRKTXI and IE use gravity models; all other purposes use destination choice
;  For the prototype, use existing FFs to distribute these trips
;  Note HBSC1 has no productions -- no school trips in one person hhlds

    MW[7] = 0.0
    MW[8] = 0.0
    
    SETPA P[1]=HBCUP2     A[1]=HBCUA      
    SETPA P[2]=HBCUP3     A[2]=HBCUA      
    SETPA P[3]=HBCUP4     A[3]=HBCUA      
    SETPA P[4]=HBSCP2     A[4]=HBSCA      
    SETPA P[5]=HBSCP3     A[5]=HBSCA      
    SETPA P[6]=HBSCP4     A[6]=HBSCA      
    
  
;   ----- DO 6 GRAVITY MODELS
    MW[20]=MI.1.TIME+MI.1.TERMINALTIME

; no k-factors in this model

    GRAVITY PURPOSE=1, LOS=MW[20], FFACTORS=FF    ;HBCU2  
    GRAVITY PURPOSE=2, LOS=MW[20], FFACTORS=FF    ;HBCU3  
    GRAVITY PURPOSE=3, LOS=MW[20], FFACTORS=FF    ;HBCU4  
    GRAVITY PURPOSE=4, LOS=MW[20], FFACTORS=FF    ;HBSC2  
    GRAVITY PURPOSE=5, LOS=MW[20], FFACTORS=FF    ;HBSC3   
    GRAVITY PURPOSE=6, LOS=MW[20], FFACTORS=FF    ;HBSC4   
 

;   ----- GENERATE FREQUENCY DISTRIBUTION REPORTS


    MW[9]= MW[1]+MW[2]+MW[3]+MW[7]
    MW[10]= MW[4]+MW[5]+MW[6]+MW[8]
    
    FREQUENCY VALUEMW=9  BASEMW=20,  RANGE=0-49, TITLE='HBCU TRIP LENGTH FREQUENCY'
    FREQUENCY VALUEMW=10  BASEMW=20,  RANGE=0-49, TITLE='HBSC TRIP LENGTH FREQUENCY'
 
ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

EndDistributeMultiStep

Wait4Files Files=TMUDemoDist1.script.end, TMUDemoDist2.script.end, PrintFiles=SAVE
; End of PILOT Script

LOOP PURPOSE = 1, 12, 1

; PILOT Script

IF (PURPOSE=1) ; HBW PK
PURP='HBW'
PERIOD='PK'
PURPNO=1
MARKETS=5
isHBW=' '
noHBW=';'
isNHB=';'
noNHB=' '
PRINT LIST="Trip Distribution Loop Number = 1 of 16 HBW PK", printo=0

ELSEIF (PURPOSE=2) ; NHBW PK 
PURP='NHBW'
PERIOD='PK'
PURPNO=2
MARKETS=1
isHBW=';'
noHBW=' '
isNHB=' '
noNHB=';'
PRINT LIST="Trip Distribution Loop Number = 2 of 16 NHBW PK", printo=0

ELSEIF (PURPOSE=3) ; HBSH PK 
PURP='HBSH'
PERIOD='PK'
PURPNO=3
MARKETS=5
isHBW=';'
noHBW=' '
isNHB=';'
noNHB=' '
PRINT LIST="Trip Distribution Loop Number = 3 of 16 HBSH PK", printo=0

ELSEIF (PURPOSE=4) ; HBSR PK  
PURP='HBSR'
PERIOD='PK'
PURPNO=4
MARKETS=5
isHBW=';'
noHBW=' '
isNHB=';'
noNHB=' '
PRINT LIST="Trip Distribution Loop Number = 4 of 16 HBSR PK", printo=0

ELSEIF (PURPOSE=5) ; HBO PK 
PURP='HBO'
PERIOD='PK'
PURPNO=5
MARKETS=5
isHBW=';'
noHBW=' '
isNHB=';'
noNHB=' '
PRINT LIST="Trip Distribution Loop Number = 5 of 16 HBO PK", printo=0

ELSEIF (PURPOSE=6) ; NHB PK
PURP='NHBO'
PERIOD='PK'
PURPNO=6
MARKETS=1
isHBW=';'
noHBW=' '
isNHB=' '
noNHB=';'
PRINT LIST="Trip Distribution Loop Number = 6 of 16 NHBO PK", printo=0

ELSEIF (PURPOSE=7) ; HBW OP 
PURP='HBW'
PERIOD='OP'
PURPNO=7
MARKETS=5
isHBW=' '
noHBW=';'
isNHB=';'
noNHB=' '
PRINT LIST="Trip Distribution Loop Number = 7 of 16 HBW OP", printo=0

ELSEIF (PURPOSE=8) ; NHBW OP 
PURP='NHBW'
PERIOD='OP'
PURPNO=8
MARKETS=1
isHBW=';'
noHBW=' '
isNHB=' '
noNHB=';'
PRINT LIST="Trip Distribution Loop Number = 8 of 16 NHBW OP", printo=0

ELSEIF (PURPOSE=9) ; HBSH OP  
PURP='HBSH'
PERIOD='OP'
PURPNO=9
MARKETS=5
isHBW=';'
noHBW=' '
isNHB=';'
noNHB=' '
PRINT LIST="Trip Distribution Loop Number = 9 of 16 HBSH OP", printo=0

ELSEIF (PURPOSE=10) ; HBSR OP  
PURP='HBSR'
PERIOD='OP'
PURPNO=10
MARKETS=5
isHBW=';'
noHBW=' '
isNHB=';'
noNHB=' '
PRINT LIST="Trip Distribution Loop Number =10 of 16 HBSR OP", printo=0

ELSEIF (PURPOSE=11) ; HBO OP  
PURP='HBO'
PERIOD='OP'
PURPNO=11
MARKETS=5
isHBW=';'
noHBW=' '
isNHB=';'
noNHB=' '
PRINT LIST="Trip Distribution Loop Number =11 of 16 HBO OP", printo=0

ELSEIF (PURPOSE=12) ; NHB OP
PURP='NHBO'
PERIOD='OP'
PURPNO=12
MARKETS=1
isHBW=';'
noHBW=' '
isNHB=' '
noNHB=';'
PRINT LIST="Trip Distribution Loop Number =12 of 16 NHBO OP", printo=0

ENDIF
; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\DCMODEL\TDMAT00O.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\OUTPUT\tripDist_@PURP@@PERIOD@.PRN" MSG='Apply Destination Choice Model'
FILEI LOOKUPI[2] = "{SCENARIO_DIR}\OUTPUT\PANDA_{ALT}{Year}_@PERIOD@.DBF"
FILEI LOOKUPI[1] = "{CATALOG_DIR}\PARAMETERS\DESTCHOICE_PARAMETERS.DBF"
FILEI MATI[1] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MCLS_{ALT}{Year}.MAT"
FILEI MATI[2] = "{SCENARIO_DIR}\OUTPUT\MMLOO_@PERIOD@SKIM.MAT"

FILEO MATO[1] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_PERTRIPS_{ALT}{Year}.MAT",
  MO=131-136, DEC=6*S, NAME=PTRIPS1,PTRIPS2,PTRIPS3,PTRIPS4,PTRIPS5,TOTAL
FILEO PRINTO[1] = "{SCENARIO_DIR}\OUTPUT\DESTCHOICE_DEBUG.TXT"
FILEO PRINTO[2] = "{SCENARIO_DIR}\OUTPUT\DESTCHOICE_SUMMARY.TXT"
FILEO PRINTO[3] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_Zonal_Trips.csv"


ZONES = {zonesa}

ARRAY TYPE=D CDIST1=7, CDIST2=7 CDIST3=7, CIZ=7
ARRAY TYPE=D PRODS=7,ZONES
ARRAY TYPE=D ATTS=7,ZONES
ARRAY TYPE=D DENOM=7


; READ IN MODEL PARAMETERS

LOOKUP, NAME=COEFF, LOOKUP[1]=NVAR, RESULT=@PURP@@PERIOD@, INTERPOLATE=N, LIST=Y, LOOKUPI=1
;LOOKUP, NAME=COEFF, LOOKUP[1]=1, RESULT=HBWPK, INTERPOLATE=N, LIST=Y, LOOKUPI=1

DISTCAP = COEFF(1,1)
CLSUM   = COEFF(1,2)
ADJCAP = COEFF(1,3)                  ; adjustment cap
ADJDIST = COEFF(1,16)
ADJDISTSQ = COEFF(1,26)
ADJDISTCUB = COEFF(1,36)

LOOP _mm = 1,@MARKETS@

CDIST1[_mm] = COEFF(1,10+_mm)
CDIST2[_mm] = COEFF(1,20+_mm)
CDIST3[_mm] = COEFF(1,30+_mm)
CIZ[_mm]    = COEFF(1,40+_mm)

ENDLOOP

; Report coefficient values to summary file and debug file;

IF (I == 1)
    
; Debug destination choice

    IF ({DebugDC}>0)
    
  print list='DESTINTION CHOICE TRACE @PURP@-@PERIOD@','\n\n',printo=1
  print list='-- @DATE.RUNDATE@     ',printo=1
  print list='-- @TIME.RUNTIME@     ','\n\n',printo=1
  print list='Transit Modeling Update DEMO \n\nSelected Interchange for Tracing:    ',{SelOrigin}(4.0),'-',{SelDest}(4.0),'\n\n',printo=1
  print list='PURPOSE -                   @PURP@  ',printo=1
  print list='SKIMS/PERIOD                @PERIOD@',printo=1
   
  print list='\n\nCOEFFICIENTS                ',printo=1
  print list='    Mode choice logsum LSUM     ',CLSUM(8.4),printo=1
  print list='    Distance cap DISTCAP        ',DISTCAP(8.4),printo=1
   
  LOOP _m=1,@MARKETS@
  print list='\n\n    Linear Distance CDIST(',_m(1),')    ',CDIST1[_m](8.4),printo=1
  print list='    Squared Distance CDIST2(',_m(1),')  ',CDIST2[_m](8.4),printo=1
  print list='    Cubed Distance CDIST3(',_m(1),')    ',CDIST3[_m](8.4),printo=1
  print list='    Intrazonal indicator CIZ(',_m(1),') ',CIZ[_m](8.4),printo=1
  ENDLOOP
   
  ENDIF

; Summary report file

  print list='DESTINTION CHOICE TRACE @PURP@-@PERIOD@','\n\n',printo=2
  print list='-- @DATE.RUNDATE@     ',printo=2
  print list='-- @TIME.RUNTIME@     ','\n\n',printo=2
  print list='Transit Modeling Update DEMO \n\nSelected Interchange for Tracing:    ',{SelOrigin}(4.0),'-',{SelDest}(4.0),'\n\n',printo=2
  print list='PURPOSE -                   @PURP@  ',printo=2
  print list='SKIMS/PERIOD                @PERIOD@',printo=2
   
  print list='\n\nCOEFFICIENTS                ',printo=2
  print list='    Mode choice logsum LSUM     ',CLSUM(8.4),printo=2
  print list='    Distance cap DISTCAP        ',DISTCAP(8.4),printo=2
  print list='    Adjusted cap DISTCAP        ',ADJCAP(8.4),printo=2
   
  LOOP _m=1,@MARKETS@
  print list='\n\n    Linear Distance CDIST(',_m(1),')    ',CDIST1[_m](8.4),printo=2
  print list='    Squared Distance CDIST2(',_m(1),')  ',CDIST2[_m](8.4),printo=2
  print list='    Cubed Distance CDIST3(',_m(1),')    ',CDIST3[_m](8.4),printo=2
  print list='    Intrazonal indicator CIZ(',_m(1),') ',CIZ[_m](8.4),printo=2
  ENDLOOP

ENDIF  ; end reporting


; READ IN PRODUCTIONS AND ATTRACTIONS

@noNHB@ LOOKUP, NAME=TPROD, 
@noNHB@  LOOKUP[1]=TAZ, RESULT=@PURP@P1, 
@noNHB@  LOOKUP[2]=TAZ, RESULT=@PURP@P2, 
@noNHB@  LOOKUP[3]=TAZ, RESULT=@PURP@P3, 
@noNHB@  LOOKUP[4]=TAZ, RESULT=@PURP@P4, 
@noNHB@  LOOKUP[5]=TAZ, RESULT=@PURP@P5,
@noNHB@  INTERPOLATE=N, LIST=Y, LOOKUPI=2

@isNHB@ LOOKUP, NAME=TPROD, 
@isNHB@  LOOKUP[1]=TAZ, RESULT=@PURP@P, 
@isNHB@  INTERPOLATE=N, LIST=Y, LOOKUPI=2

@isHBW@ LOOKUP, NAME=HBWATTS, 
@isHBW@  LOOKUP[1]=TAZ, RESULT=HBWA1, 
@isHBW@  LOOKUP[2]=TAZ, RESULT=HBWA2, 
@isHBW@  LOOKUP[3]=TAZ, RESULT=HBWA3, 
@isHBW@  LOOKUP[4]=TAZ, RESULT=HBWA4, 
@isHBW@  LOOKUP[5]=TAZ, RESULT=HBWA5, 
@isHBW@  INTERPOLATE=N, LIST=Y, LOOKUPI=2

@noHBW@ LOOKUP, NAME=TATTS, 
@noHBW@  LOOKUP[1]=TAZ, RESULT=@PURP@A, 
@noHBW@  INTERPOLATE=N, LIST=Y, LOOKUPI=2

IF(I == 1)

LOOP ZN = 1, ZONES

; Productions

IF(@MARKETS@ == 1) 
   PRODS[1][ZN] = TPROD(1,ZN)
ELSEIF(@MARKETS@ == 4)
   PRODS[1][ZN] = TPROD(1,ZN)
   PRODS[2][ZN] = TPROD(2,ZN)
   PRODS[3][ZN] = TPROD(3,ZN)
   PRODS[4][ZN] = TPROD(4,ZN)
ELSE
   PRODS[1][ZN] = TPROD(1,ZN)
   PRODS[2][ZN] = TPROD(2,ZN)
   PRODS[3][ZN] = TPROD(3,ZN)
   PRODS[4][ZN] = TPROD(4,ZN)
   PRODS[5][ZN] = TPROD(5,ZN)
ENDIF

; Attractions

@isHBW@   ATTS[1][ZN] = HBWATTS(1,ZN)
@isHBW@   ATTS[2][ZN] = HBWATTS(2,ZN)
@isHBW@   ATTS[3][ZN] = HBWATTS(3,ZN)
@isHBW@   ATTS[4][ZN] = HBWATTS(4,ZN)
@isHBW@   ATTS[5][ZN] = HBWATTS(5,ZN)

@noHBW@   ATTS[1][ZN] = TATTS(1,ZN)
@noHBW@   ATTS[2][ZN] = ATTS[1][ZN]              ; HBNW attractions are not stratified by hhld market
@noHBW@   ATTS[3][ZN] = ATTS[1][ZN]
@noHBW@   ATTS[4][ZN] = ATTS[1][ZN]
@noHBW@   ATTS[5][ZN] = ATTS[1][ZN]

ENDLOOP

ENDIF      ; finish reading Ps and As

; READ IN LEVEL OF SERVICE MATRICES

; Mode choice logsums


@noNHB@  MW[1] = MI.1.1 
@noNHB@  MW[2] = MI.1.2
@noNHB@  MW[3] = MI.1.3
@noNHB@  MW[4] = MI.1.4
@noNHB@  MW[5] = MI.1.5  

@isNHB@  MW[1] = MI.1.1 
@isNHB@  MW[2] = MI.1.1
@isNHB@  MW[3] = MI.1.1
@isNHB@  MW[4] = MI.1.1
@isNHB@  MW[5] = MI.1.1


  
; Distance

 MW[11] = MI.2.2                          ; SOV distance
 MW[12] = MIN(MW[11], DISTCAP)            ; Capped distance
 MW[13] = MIN(MW[11], ADJCAP)             ; adjusted capped distance
 
 
; COMPUTE DESTINATION CHOICE PROBABILITIES


LOOP _m = 1, @MARKETS@

  JLOOP

 INTRAZN = 0
 IF(J == I) INTRAZN = 1

  ; utility
  IF(ATTS[_m][J] > 0.0)
 
   MW[100+_m] = CLSUM * MW[_m] + 
        CDIST1[_m] * MW[12] + CDIST2[_m] * POW(MW[12],2) + CDIST3[_m] * POW(MW[12],3) + 
             CIZ[_m] * INTRAZN + LN(ATTS[_m][J])+ ADJDIST * MW[13] + ADJDISTSQ * POW(MW[13],2) + ADJDISTCUB * POW(MW[13],3)
             
   MW[500+_m] = ADJDIST * MW[13] + ADJDISTSQ * POW(MW[13],2) + ADJDISTCUB * POW(MW[13],3)
   
   MW[110 + _m] = EXP(MW[100+_m])
  
  ELSE
   MW[100+_m] = 0.0
   MW[110 + _m] = 0.0
  ENDIF

 ENDJLOOP
  
  ; destination choice probabilities
  
  DENOM[_m] = ROWSUM(110+_m)
 
  IF(DENOM[_m] > 0)
    MW[120+_m] = MW[110+_m]/DENOM[_m]
  ELSE
    MW[120+_m] = 0.0
  ENDIF

  ; person trips
  
  MW[130+_m] = PRODS[_m][I] * MW[120+_m]
  MW[136]=MW[131]+ MW[132]+ MW[133]+ MW[134]+ MW[135]
  
   ; Now some debugging
  
  IF({DebugDC} > 0 && I == {SelOrigin})
  
  
   PRINT LIST = '\n\nDESTINATION CHOICE UTILITY CALCULATIONS', PRINTO=1
   PRINT LIST = '\n\nSELECT ZONE = ',I(5), PRINTO=1
   PRINT LIST = 'HOUSEHOLD MARKET = ', _m(2), PRINTO=1
   PRINT LIST = 'PERSON TRIPS =     ', PRODS[_m][I](10.3), PRINTO=1
   PRINT LIST = '\n\n  JZONE   MCLS      DIST    CAPDIST    ADJDIST    ATTS      UTIL     ADDUTIL    PROB     TRIPS', PRINTO=1
  JLOOP
  PRINT LIST = J(5), MW[_m](10.4), MW[11](10.2), MW[12](10.2), MW[13](10.2), ATTS[_m][J](10.3), MW[100+_m](12.4), MW[500+_m](12.4), MW[120+_m](12.4), MW[130+_m](10.4), PRINTO=1 
  ENDJLOOP

  ENDIF
ENDLOOP  ; end household market loop

 ; print interzonal trips to csv file

LOOP pTAZ=1,{zonesa}


IF (I==pTAZ)

  JLOOP
   IF (I==1 && J==1) PRINT CSV=T LIST='ProdTAZ','AttrTAZ','Trips','DISTANCE',PRINTO=3
   PRINT CSV=T LIST=I(5),J(5),MW[136](10.6),MW[11](10.6),PRINTO=3
  ENDJLOOP
  
ENDIF

ENDLOOP
; REPORT

ENDRUN


ENDLOOP

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\OUTPUT\GVMTRIPS_{ALT}{YEAR}_PK.MAT" "{SCENARIO_DIR}\output\HBSCPK_PERTRIPS_{ALT}{YEAR}.MAT" '
ENDRUN

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\OUTPUT\GVMTRIPS_{ALT}{YEAR}_PK.MAT" "{SCENARIO_DIR}\Output\HBCUPK_PERTRIPS_{ALT}{YEAR}.MAT" '
ENDRUN

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\OUTPUT\GVMTRIPS_{ALT}{YEAR}_OP.MAT" "{SCENARIO_DIR}\OUTPUT\HBSCOP_PERTRIPS_{ALT}{YEAR}.MAT" '
ENDRUN

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\OUTPUT\GVMTRIPS_{ALT}{YEAR}_OP.MAT" "{SCENARIO_DIR}\OUTPUT\HBCUOP_PERTRIPS_{ALT}{YEAR}.MAT" '
ENDRUN

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*Cluster NERPM 1-16 Start Exit

; *Cluster NERPM 1-%NUMBER_OF_PROCESSORS% Start Exit
; End of PILOT Script

LOOP PURPOSE = 1, 12, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


Distribute MULTISTEP=1       

    IF (PURPOSE=1) ; HBW PK purpose
    PERIOD='PK'
    PURP='HBW'
    PURPNO=2
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS1'
    OCC3=3.37 
    RUNDATE='@DATE.RUNDATE@'
    RUNTIME=@TIME.RUNTIME@
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 1 of 16 HBW PK", printo=0
    
    ELSEIF (PURPOSE=2) ; HBO PK purpose 
    PERIOD='PK'
    PURP='HBO'
    PURPNO=3
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 2 of 16 HBO PK", printo=0
    
    ELSEIF (PURPOSE=3) ; HBSH PK purpose 
    PERIOD='PK'
    PURP='HBSH'
    PURPNO=4
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 3 of 16 HBSH PK", printo=0
    
    ELSEIF (PURPOSE=4) ; HBSR PK purpose 
    PERIOD='PK'
    PURP='HBSR'
    PURPNO=5
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 4 of 16 HBSR PK", printo=0
    
    ; HBSC PK purpose 
    ELSEIF (PURPOSE=5) 
    PERIOD='PK'
    PURP='HBSC'
    PURPNO=6
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =5 of 16 HBSC PK", printo=0  
    
    ; HBCU
    ELSEIF (PURPOSE=6) ; HBCU PK purpose 
    PERIOD='PK'
    PURP='HBCU'
    PURPNO=7
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=';'
    noNHB=' '
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =6 of 16 HBCU PK", printo=0
    
    
    ; HBW OP purpose        
    ELSEIF (PURPOSE=7) 
    PERIOD='OP'
    PURP='HBW'
    PURPNO=2
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS1'
    OCC3=3.37 
    RUNDATE='@DATE.RUNDATE@'
    RUNTIME=@TIME.RUNTIME@
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 7 of 16 HBW OP", printo=0
    
    ; HBO OP purpose
    ELSEIF (PURPOSE=8)  
    PERIOD='OP'
    PURP='HBO'
    PURPNO=3
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number =8 of 16 HBO OP", printo=0
    
    ; HBSH OP purpose
    ELSEIF (PURPOSE=9)  
    PERIOD='OP'
    PURP='HBSH'
    PURPNO=4
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 9 of 16 HBSH OP", printo=0
    
    ; HBSR OP purpose
    ELSEIF (PURPOSE=10)  
    PERIOD='OP'
    PURP='HBSR'
    PURPNO=5
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=5
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number =10 of 16 HBSR OP", printo=0

    ; HBSC OP purpose 
    ELSEIF (PURPOSE=11) 
    PERIOD='OP'
    PURP='HBSC'
    PURPNO=6
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =11 of 16 HBSC OP", printo=0
    
    ; HBCU OP purpose
    ELSEIF (PURPOSE=12)  
    PERIOD='OP'
    PURP='HBCU'
    PURPNO=7
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=';'
    noNHB=' '
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =12 of 16 HBCU OP", printo=0
    ENDIF
; End of PILOT Script

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

DistributeMultiStep ProcessID="NERPM", ProcessNum=Purpose
; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\applications\ModeChoice.S"
    
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\@purpose@_modechoice.prn"
        ;===================================================================================================================================
        ; XCHOICE - Standard Output (MC trips and final logsums)
        ;===================================================================================================================================
FILEO MATO[1] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MC1.MAT",
            MO=701-719,DEC=19*D,
            NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC
        
FILEO MATO[2] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MC2.MAT",
            MO=721-739,DEC=19*D,
            NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC
    
FILEO MATO[3] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MC3.MAT",
            MO=741-759,DEC=19*D,
            NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC
      
FILEO MATO[4] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MC4.MAT",
            MO=761-779,DEC=19*D,
           NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC
       
FILEO MATO[5] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MC5.MAT",
            MO=781-799,DEC=19*D,
            NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC

       ; Logsums by auto sufficiency (averaged across all access markets)
FILEO MATO[6] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MCLS_{ALT}{YEAR}.MAT",
          MO=571-575,DEC=5*D,NAME=LSUM_M1,LSUM_M2,LSUM_M3,LSUM_M4,LSUM_M5
       
        ; Exp(AutoUtility) for user benefits
FILEO MATO[7] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_EXPAUTOUTIL.MAT",
           MO=561-565,DEC=5*D,NAME=EXPA_M1,EXPA_M2,EXPA_M3,EXPA_M4,EXPA_M5

       
FILEO MATO[8] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MCLS_XCHOICE_{ALT}{YEAR}.MAT",
         MO=528,536,544,552,560,DEC=5*D,NAME=LSUM_M1,LSUM_M2,LSUM_M3,LSUM_M4,LSUM_M5

               ; Zone and station data
FILEI ZDATI[1] = "{SCENARIO_DIR}\INPUT\ZDATA_{YEAR}{ALT}.DBF"
FILEI ZDATI[2] = "{SCENARIO_DIR}\OUTPUT\STATDATA_A10.DBF"
    
        ; Modechoice coefficients and alternative specific constants
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\INPUT\@PERIOD@_MC_CONSTANTS.CSV"
FILEI LOOKUPI[2] = "{SCENARIO_DIR}\INPUT\@PERIOD@_TRN_COEFFICIENTS.CSV"
    
        ; Transit skim (1: Walk to Skyway)
FILEI MATI[1] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_SKYWAY_WALK_{ALT}{YEAR}.MAT"
    
        ; Transit skim (2: Walk to Local Bus)
FILEI MATI[2] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_LOCAL_WALK_{ALT}{YEAR}.MAT"
    
        ; Transit skim (3: Walk to Express Bus)
FILEI MATI[3] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_EXPRESS_WALK_{ALT}{YEAR}.MAT"
    
        ; Transit skim (4: Walk to BRT-LRT)
FILEI MATI[4] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_BRTLRT_WALK_{ALT}{YEAR}.MAT"
    
        ; Transit skim (5: Walk to Commuter Rail)
FILEI MATI[5] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_COMRAIL_WALK_{ALT}{YEAR}.MAT"
    
        ; Transit skim (6: PNR to Express Bus)
FILEI MATI[6] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_EXPRESS_PNR_{ALT}{YEAR}.MAT"
    
        ; Transit skim (7: PNR to BRT-LRT Bus)
FILEI MATI[7] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_BRTLRT_PNR_{ALT}{YEAR}.MAT"
    
        ; Transit skim (8: PNR to Commuter Rail)
FILEI MATI[8] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_COMRAIL_PNR_{ALT}{YEAR}.MAT"
    
        ; Transit skim (9: KNR to Express Bus)
FILEI MATI[9] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_EXPRESS_KNR_{ALT}{YEAR}.MAT"
    
        ; Transit skim (10: KNR to BRT-LRT Bus)
FILEI MATI[10] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_BRTLRT_KNR_{ALT}{YEAR}.MAT"
    
        ; Transit skim (11: KNR to Commuter Rail)
FILEI MATI[11] = "{SCENARIO_DIR}\OUTPUT\TSKIM_@PERIOD@_COMRAIL_KNR_{ALT}{YEAR}.MAT"
    
        ; Highway skim (All Drive)
FILEI MATI[12] = "{SCENARIO_DIR}\OUTPUT\@SKIMFILE@.MAT"
    
        ; Highway skim (Drive to Skyway) 
FILEI MATI[13] = "{SCENARIO_DIR}\OUTPUT\@PERIOD@_DRV_SKYWAY.MAT"

        ; HOV time savings
        ; Table 1 - HOV time savings for peak period
        ; Table 2 - HOV time savings for off-peak period
    
        ; Person trips
FILEI MATI[14] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_PERTRIPS_{ALT}{YEAR}.MAT"
    
        ; Progress Bar update for evey 100 zones
        zonemsg=100
    
        ; Declare arrays to hold alternative specific constants
        ARRAY PARK=2578
        ARRAY TYPE=F K_AUT=5, K_SR=5, K_SR3=5, K_TRN=5, K_TDRV=5, K_TKNR=5, K_NMOT=5, K_BIKE=5, K_TDRVE=5
        ARRAY TYPE=C30 MARKET_NAME=5
    
        ; Read alternative specific Constants
        LOOKUP, NAME=CONSTANTS, LOOKUP[1]=1, RESULT=@PURPNO@, INTERPOLATE=N, , LIST=Y, LOOKUPI=1
    
        ; Read mode choice coefficients
        LOOKUP, NAME=COEFF, LOOKUP[1]=1, RESULT=@PURPNO@, INTERPOLATE=N, LIST=Y, LOOKUPI=2
    
        ; Read coefficients and constants
        IF (i=FirstZone)
          ; Index _m identifies the market segment, as follows:
          ; All HB purposes except shcool, university and NNHB
          ; -------------------------------------------------------
          ;    _m = 1      zero-car households
          ;    _m = 2      low income, car insufficient hhlds
          ;    _m = 3      high income, car sufficient hhlds
          ;    _m = 4      low income, car sufficient hhlds
          ;    _m = 5      high income, car sufficient hhlds
    
          ; Household market stratified constants
          LOOP _m=1,@MARKETS@    
            K_AUT[_m]  = CONSTANTS(1,(_m-1)*10+1)            ; drive to skyway
            K_SR[_m]   = CONSTANTS(1,(_m-1)*10+2)            ; shared-ride 2 & 3+
            K_SR3[_m]  = CONSTANTS(1,(_m-1)*10+3)            ; shared ride 3+
            K_TRN[_m]  = CONSTANTS(1,(_m-1)*10+4)            ; transit
            K_TDRV[_m] = CONSTANTS(1,(_m-1)*10+5)            ; drive to local
            K_TKNR[_m] = CONSTANTS(1,(_m-1)*10+6)            ; knr to transit
            K_NMOT[_m] = CONSTANTS(1,(_m-1)*10+7)            ; non-motorized (walk & bike)
            K_BIKE[_m] = CONSTANTS(1,(_m-1)*10+8)            ; bike
            K_TDRVE[_m] = CONSTANTS(1,(_m-1)*10+9)           ; pnr to express
          ENDLOOP
    
          ; MARKETS=@MARKETS@
          MARKET_NAME[1] = '@Mkt1_Name@'
          MARKET_NAME[2] = '@Mkt2_Name@'
          MARKET_NAME[3] = '@Mkt3_Name@'
          MARKET_NAME[4] = '@Mkt4_Name@'
          MARKET_NAME[5] = '@Mkt5_Name@'
    
          ; Mode-specific constants -- same for all hhld markets
          K_SKY = CONSTANTS(1,51)                  ; Skyway
          K_EXP = CONSTANTS(1,52)                  ; express bus
          K_BRT = CONSTANTS(1,53)                  ; brt
          K_URL = CONSTANTS(1,54)                  ; urban rail
          K_CRL = CONSTANTS(1,55)                  ; commuter rail
          K_INFDA = CONSTANTS(1,56)                ; informal KNR-to-Localbus
          
          ; Define array to hold cost coefficients
          ARRAY TYPE=F COEFF_COST=5
          COEFF_COST[1]  = COEFF(1,5)
          COEFF_COST[2]  = COEFF(1,6)
          COEFF_COST[3]  = COEFF(1,7)
          COEFF_COST[4]  = COEFF(1,8)
          COEFF_COST[5]  = COEFF(1,9)
          
          ; Level of Service Coefficients
          COEFF_IVTT   = COEFF(1,1)                ; In-vehicle travel time coefficient
          COEFF_SWAIT  = COEFF(1,2)                ; Short wait(<5 minutes)
          COEFF_LWAIT  = COEFF(1,3)                ; Long wait (>5 minutes)
          COEFF_XWAIT  = COEFF(1,4)                ; Xfer wait
          COEFF_DRIVE  = COEFF(1,10)               ; Drive access
          COEFF_TERML  = COEFF(1,11)               ; Terminal time
          COEFF_WALK   = COEFF(1,12)               ; Walk access
          COEFF_WALK1  = COEFF(1,13)               ; Walk time < 1
          COEFF_WALK2  = COEFF(1,14)               ; Walk time > 1
          COEFF_BIKE1  = COEFF(1,15)               ; Bike time < 1
          COEFF_BIKE2  = COEFF(1,16)               ; Bike time > 1
          DWalkBIKE    = COEFF(1,17)               ; Walk and Bike threshold
 
          ; Nesting coefficients
          NC_1         = COEFF(1,18)               ; Level 1 - auto, trn, non-mot
          NC_2         = COEFF(1,19)               ; Level 2 - transit access mode choice
          NC_3         = COEFF(1,20)               ; Level 3 - transit access mode choice
          ; NCP = NC_1 * NC_2                      ; Product of nesting coefficients

          ; Calibration specific
          COEFF_CBD     = COEFF(1,21)              ; CBD dummy
          COEFF_NXFER   = COEFF(1,22)              ; number of xfers 
                    
        ENDIF
    
        ; Highway skims
        FILLMW MW[1]=MI.12.1,2,3,4,5,6,7,8 ;,9     ; highway skims
        FILLMW MW[241]=MI.13.1,2,3,4,5,6,7,8,9     ; drive to skyway best path
       ; FILLMW MW[11]=MI.14.HOVsave@PERIOD@        ; HOVsavePK for peak period and HOVsaveOP for off-peak period
       ; FILLMW MW[291]=MI.18.@STATION_TABLE@       ; 8 tables - PKStationTAZ_pnrb,PKParkCost_pnrb,termtimpnr,termtimknr,OPStationTAZ_pnrb,OPParkCost_pnrb,termtimpnr,termtimknr
    
        ; Transit (walk) skims
        FILLMW MW[21]=MI.1.1(15)                   ; walk to skyway
        FILLMW MW[41]=MI.2.1(15)                   ; walk to loc bus
        FILLMW MW[61]=MI.3.1(15)                   ; walk to exp bus
        FILLMW MW[81]=MI.4.1(15)                   ; walk to brt lrt
        FILLMW MW[101]=MI.5.1(15)                  ; walk to com rail
    
        ; Transit (PNR) skims
        FILLMW MW[121]=MI.6.1(15)                  ; pnr to exp bus
        FILLMW MW[141]=MI.7.1(15)                  ; pnr to brt lrt
        FILLMW MW[161]=MI.8.1(15)                  ; pnr to com rail
    
        ; Transit (KNR) skims
        FILLMW MW[181]=MI.9.1(15)                  ; knr to exp bus
        FILLMW MW[201]=MI.10.1(15)                 ; knr to brt lrt
        FILLMW MW[221]=MI.11.1(15)                 ; knr to com rail
    
        ; Walk and Bike
        ; distance portion that is 1 mile or less
        MW[12] = MIN(MW[2],1)
    
        ; Distance portion that is longer than 1 mile
        JLOOP
          IF (MW[2][J] > 1)
              MW[13] = MW[2][J] - 1
          ELSE
              MW[13] = 0
          ENDIF
        ENDJLOOP
    
        ; Person trips
        MW[251] = MI.14.6   ; Total Person Trips
    
        ;  Write out coefficients for debug and regular runs
        IF (I=1)  ; Write mode choice summary file                                                                                                
          ; DEBUG MODE CHOICE                                                                                                                   
          ;IF ({DebugMC}>0) 
             ; split this into two sections (1) DEBUG and (2) Regular 
            ; READ FILE = "WriteReport.S"
         ; ENDIF
        ENDIF
        
        ; ************************** PROCESS PERSON TRIPS INTO MARKETS ************************************
        ; Divide person trip table into different markets
        ;  MW[252]=MW[251] * ZI.1.PERCAUTO0[I]                        ; Zero car HHs
        ;  MW[253]=MW[251] * ZI.1.PERCAUTO1[I]                        ; Auto Insufficient Low Income HHs
        ;  MW[254]=MW[251] * ZI.1.PERCAUTO3[I]                        ; Auto Insufficient High Income HHs
        ;  MW[255]=MW[251] * ZI.1.PERCAUTO4[I]                        ; Auto Sufficient Low Income HHs
        ;  MW[256]=(MW[251] - MW[252] - MW[253] - MW[254] - MW[255])  ; Auto Sufficient High Income HHs
        
        MW[252]= MI.14.1    ; Zero car HHs                     
        MW[253]= MI.14.2    ; Auto Insufficient Low Income HHs 
        MW[254]= MI.14.3    ; Auto Insufficient High Income HHs
        MW[255]= MI.14.4    ; Auto Sufficient Low Income HHs   
        MW[256]= MI.14.5    ; Auto Sufficient High Income HHs   

        ; Overwrite the above if there is only one market
        IF (@MARKETS@=1)
           MW[252]=MW[251]
           MW[253]=0
           MW[254]=0
           MW[255]=0
           MW[256]=0
        ENDIF
    
        ; Zero car transit sub-markets (can walk, must drive and no access)
        MW[261] = MW[252] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[262] = MW[252] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[263] = MW[252] - MW[261] - MW[262]                                                                 ; No Access
    
        ; Auto Insufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[264] = MW[253] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[265] = MW[253] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[266] = MW[253] - MW[264] - MW[265]                                                                 ; No Access
    
        ; Auto Insufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[267] = MW[254] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[268] = MW[254] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[269] = MW[254] - MW[267] - MW[268]                                                                 ; No Access
    
        ; Auto Sufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[270] = MW[255] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[271] = MW[255] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[272] = MW[255] - MW[270] - MW[271]                                                                 ; No Access
    
        ; Auto Sufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[273] = MW[256] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[274] = MW[256] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[275] = MW[256] - MW[273] - MW[274]                                                                 ; No Access

    
        ; *******************************************  WALK ACCESS MARKETS  ************************************************
        ; ******************************************************************************************************************
    
        ; Loop by access modes
        LOOP ACC=1,3
        
            ;**********************  ADD HOUSEHOLD MARKET SPECIFIC TERMS **********************************
            LOOP _m=1,@MARKETS@
    
               ; Drive alone
               MW[301+20*(_m-1)] = (COEFF_TERML    * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +           ; Terminal time
                                    COEFF_IVTT     * MW[4]             +                               ; IVTT
                                    COEFF_CBD      * ZI.1.CBD_DUMMY[J] +                               ; CBD dummy
                                    COEFF_COST[_m] * MW[1]             +                               ; Toll
                                    COEFF_COST[_m] * ZI.1.@PRK@[J]     +                               ; Auto parking cost
                                    COEFF_COST[_m] *  MW[2] * 9.5)                                     ; Auto operating cost
               MW[401+20*(_m-1)] = MW[301+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility
              
               ; Shared Ride 2-person
               MW[302+20*(_m-1)] = (K_SR[_m]       +                                                   ; Constant(s)
                                    COEFF_TERML * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +              ; Terminal time
                                    COEFF_IVTT  * MW[8]             -                                  ; IVTT
                                  ;  COEFF_IVTT  * (MAX (MW[11], 0)) +                                  ; HOV time savings
                                    COEFF_CBD   * ZI.1.CBD_DUMMY[J] +                                  ; CBD dummy               
                                    COEFF_COST[_m] * (MW[5]/ 2 )    +                                  ; Toll
                                    COEFF_COST[_m] * MW[2] * 9.5)                                      ; Auto operating cost
               MW[402+20*(_m-1)] =  MW[302+20*(_m-1)] / NC_1 / NC_2 / NC_3                             ; Scaled Utility
               
               ; Shared Ride 3+ person
               MW[303+20*(_m-1)] = (K_SR[_m] + K_SR3[_m] +                                             ; Constant(s)
                                    COEFF_TERML * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +              ; Terminal time 
                                    COEFF_IVTT  * MW[8]             -                                  ; IVTT
                                  ;  COEFF_IVTT  * (MAX (MW[11], 0)) +                                  ; HOV time savings
                                    COEFF_CBD   * ZI.1.CBD_DUMMY[J] +                                  ; CBD dummy               
                                    COEFF_COST[_m] * (MW[5]/@OCC3@) +                                  ; Toll
                                    COEFF_COST[_m] * MW[2] * 9.5)                                      ; Auto operating cost
               MW[403+20*(_m-1)] =  MW[303+20*(_m-1)] / NC_1 / NC_2 / NC_3                             ; Scaled Utility
                                                     
               ; Drive to Skyway
               MW[304+20*(_m-1)] = (K_AUT[_m]                                  +                       ; Constant(s)
                                   ; COEFF_DRIVE    *  MW[243]                  +                      ; Drive Access Time
                                    COEFF_WALK     *  MW[244]                  +                       ; Walk Access Time to skyway (PNR lot to skyway & walk egress)
                                    COEFF_SWAIT    *  MIN(MW[247],5)           +                       ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[247] - MIN(MW[247],5))+                       ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[248]                  +                       ; Xfer Wait
                                    COEFF_IVTT     * (MW[243] + MW[245])       +                       ; IVTT (hwy time + skyway time)
                                    COEFF_COST[_m] *  MW[249]                  +                       ; Transit Fare
                                    COEFF_COST[_m] *  MW[241]                  +                       ; Toll
                                    COEFF_COST[_m] *  MW[242] * 9.5            +                       ; Auto operating cost
                                    COEFF_NXFER    *  MW[246]                  +                       ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[404+20*(_m-1)] = MW[304+20*(_m-1)] /NC_1 /NC_2                                       ; Scaled Utility

               ; Walk to Skyway
               MW[305+20*(_m-1)] = (K_TRN[_m]      +  K_SKY                    +                       ; Constant(s)
                                    COEFF_DRIVE    *  MW[22]                   +                       ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[21] + MW[23])         +                       ; Walk Access Time + Xfer Time   
                                    COEFF_SWAIT    *  MIN(MW[32],5)            +                       ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[32] - MIN(MW[32],5))  +                       ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[33]                   +                       ; Xfer Wait
                                    COEFF_IVTT     *  MW[24]                   +                       ; IVTT (skyway time)
                                    COEFF_COST[_m] *  MW[34]                   +                       ; Transit Fare
                                    COEFF_NXFER    *  MW[31]                   +                       ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[405+20*(_m-1)] = MW[305+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; Walk to Local Bus
               MW[306+20*(_m-1)] = (K_TRN[_m]                                   +                      ; Transit Constant
                                    COEFF_DRIVE    *  MW[42]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[41] + MW[43])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[52],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[53]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[44] + MW[45])          +                      ; IVTT (skyway + local bus time)
                                    COEFF_COST[_m] *  MW[54]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[51]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[406+20*(_m-1)] = MW[306+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; Walk to Express Bus
               MW[307+20*(_m-1)] = (K_TRN[_m] + K_EXP  +                                               ; Constant(s)
                                    COEFF_DRIVE    *  MW[62]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[61] + MW[63])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[72],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[72] - MIN(MW[72],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[73]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[64] + MW[65] + MW[66]) +                      ; IVTT (skyway + local + express bus time)
                                    COEFF_COST[_m] *  MW[74]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[71]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[407+20*(_m-1)] = MW[307+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; Walk to BRT-LRT
               MW[308+20*(_m-1)] = (K_TRN[_m] + K_BRT                           +                      ; Constant(s)
                                    COEFF_DRIVE    *  MW[82]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[81] + MW[83])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[92],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[92] - MIN(MW[92],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[93]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[84]+MW[85]+MW[86]+MW[87]) +                   ; IVTT (skyway + local + express + BRT time)
                                    COEFF_COST[_m] *  MW[94]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[91]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J] )                              ; CBD dummy
               MW[408+20*(_m-1)] = MW[308+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; Walk to Commuter Rail
               MW[309+20*(_m-1)] = (K_TRN[_m] + K_CRL                            +                     ; Constant(s)
                                    COEFF_DRIVE    *  MW[102]                    +                     ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[101] + MW[103])         +                     ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[112],5)             +                     ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[112] - MIN(MW[92],5))   +                     ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[113]                    +                     ; Xfer Wait
                                    COEFF_IVTT     * (MW[104] + MW[105] + MW[106]+ MW[107]+MW[108])+   ; IVTT (skyway + local + express + BRT + CRL time)
                                    COEFF_COST[_m] *  MW[114]                    +                     ; Transit Fare
                                    COEFF_NXFER    *  MW[111]                    +                     ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J] )                              ; CBD dummy
               MW[409+20*(_m-1)] = MW[309+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to Local Bus (Walk skim with drive time)
               MW[319+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m]                        +                    ; Constant(s)
                                   COEFF_DRIVE    * (MW[41]/2/10)                 +                    ; Drive Access Time (Drive time = Walk access time/10; assuming drive speed of 30 MPH & 50%-50% access-egress split)
                                   COEFF_WALK     * (MW[43] + MW[41]/2)           +                    ; Xfer Time (here we don't have walk egress time, so assume a 50%-50% access-egress split)
                                   COEFF_SWAIT    *  MIN(MW[52],5)                +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))      +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[53]                       +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[44] + MW[45])             +                    ; IVTT (skyway + local bus time)
                                   COEFF_COST[_m] *  MW[54]                       +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[51]                       +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[419+20*(_m-1)] = MW[319+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
        
               ; PNR to Express Bus
               MW[310+20*(_m-1)] = (K_TRN[_m] + K_TDRVE[_m] + K_EXP                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[122]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[121] + MW[123])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[132],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[132] - MIN(MW[132],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[133]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[124] + MW[125] + MW[126]) +                    ; IVTT (skyway + local + express bus time)
                                   COEFF_COST[_m] *  MW[134]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[131]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[410+20*(_m-1)] = MW[310+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to BRT-LRT Bus
               MW[311+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m] + K_BRT                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[142]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[141] + MW[143])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[152],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[152] - MIN(MW[152],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[153]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[144]+MW[145]+MW[146]+MW[147]) +                ; IVTT (skyway + local + express + BRT time)
                                   COEFF_COST[_m] *  MW[154]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[151]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[411+20*(_m-1)] = MW[311+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to Commuter Rail
               MW[312+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m] + K_CRL                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[162]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[161] + MW[163])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[172],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[172] - MIN(MW[172],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[173]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[164] + MW[165] + MW[166] + MW[167] +MW[168])+  ; IVTT (skyway + local + express + BRT + CRL time)
                                   COEFF_COST[_m] *  MW[174]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[171]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[412+20*(_m-1)] = MW[312+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to Local Bus
               MW[313+20*(_m-1)] = (K_TRN[_m]     + K_TKNR[_m]   + K_INFDA        +                    ; Constant(s)
                                   COEFF_DRIVE    * (MW[41]/10)                   +                    ; Drive Access Time (Drive time = Walk time/10; assuming drive speed of 30 MPH)
                                   COEFF_WALK     * (MW[43] + 3)                  +                    ; Xfer Time (here we don't have walk egress time, so assume 3 minutes)
                                   COEFF_SWAIT    *  MIN(MW[52],5)                +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))      +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[53]                       +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[44] + MW[45])             +                    ; IVTT (skyway + local bus time)
                                   COEFF_COST[_m] *  MW[54]                       +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[51]                       +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[413+20*(_m-1)] = MW[313+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; KNR to Express Bus
               MW[314+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_EXP                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[182]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[181] + MW[183])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[192],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[192] - MIN(MW[192],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[193]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[184] + MW[185] + MW[186]) +                    ; IVTT (skyway + local + express bus time)
                                   COEFF_COST[_m] *  MW[194]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[191]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[414+20*(_m-1)] = MW[314+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to BRT-LRT Bus
               MW[315+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_BRT                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[202]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[201] + MW[203])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[212],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[212] - MIN(MW[212],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[213]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[204]+MW[205]+MW[206]+MW[207]) +                ; IVTT (skyway + local + express + BRT time)
                                   COEFF_COST[_m] *  MW[214]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[211]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[415+20*(_m-1)] = MW[315+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to Commuter Rail
               MW[316+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_CRL                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[222]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[221] + MW[223])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[232],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[232] - MIN(MW[232],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[233]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[224] + MW[225] + MW[226]  +MW[227] +MW[228])+  ; IVTT (skyway + local + express + BRT + CRL time)
                                   COEFF_COST[_m] *  MW[234]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[231]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[416+20*(_m-1)] = MW[316+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
                          
               ; Walk
               MW[317+20*(_m-1)] = (K_NMOT[_m]                                    +                    ; Constant(s)
                                   COEFF_WALK1  * MW[12]                          +                    ; Walk time if less than 1 mile
                                   COEFF_WALK2  * MW[13])                                              ; Walk time if more than 1 mile
               MW[417+20*(_m-1)] = MW[317+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility
                      
               ; Bike
               MW[318+20*(_m-1)] = (K_NMOT[_m] + K_BIKE[_m]                       +                    ; Constant(s)
                                   COEFF_BIKE1  * MW[12]                          +                    ; Bike time if less than 1 mile
                                   COEFF_BIKE2  * MW[13])                                              ; Bike time if more than 1 mile
               MW[418+20*(_m-1)] = MW[318+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility

            ENDLOOP
    
            ;***************************    MODE AVAILABILITY CHECKS    ************************************
            ;  Drive alone and PNR to transit not available to zero car households
            IF (@Mkt1_0car@=1)
              MW[401] = -9999.99  ; Drive alone
              MW[404] = -9999.99  ; Drive to Skyway
              MW[410] = -9999.99  ; PNR to Express
              MW[411] = -9999.99  ; PNR to BRT
              MW[412] = -9999.99  ; PNR to Com Rail
              MW[419] = -9999.99  ; PNR to Local
            ENDIF
    
            LOOP _m=1,@MARKETS@
              JLOOP
                 ; Transit not available if no line-haul in-vehicle time on the transit path
                 ; Drive to skyway 
                 IF (MW[245] == 0)  MW[404+20*(_m-1)]=-9999.99
                 
                 ; Walk to skyway
                 IF (MW[24] == 0)  MW[405+20*(_m-1)]=-9999.99
    
                 ; Walk to local bus
                 IF (MW[45] == 0)  MW[406+20*(_m-1)]=-9999.99
    
                 ; Walk to express bus
                 IF (MW[66] == 0)  MW[407+20*(_m-1)]=-9999.99
    
                 ; Walk to BRT-LRT bus
                 IF (MW[87] == 0)  MW[408+20*(_m-1)]=-9999.99
    
                 ; Walk to Commuter Rail
                 IF (MW[108] == 0)  MW[409+20*(_m-1)]=-9999.99
                 
                 ; KNR to local bus
                 IF (MW[45] == 0)  MW[419+20*(_m-1)]=-9999.99
                 
                 ; PNR to express bus
                 IF (MW[126] == 0)  MW[410+20*(_m-1)]=-9999.99
    
                 ; PNR to BRT-LRT
                 IF (MW[147] == 0)  MW[411+20*(_m-1)]=-9999.99
    
                 ; PNR to Commuter rail
                 IF (MW[168] == 0) MW[412+20*(_m-1)]=-9999.99
    
                 ; KNR to local bus
                 IF (MW[45] == 0)  MW[413+20*(_m-1)]=-9999.99
    
                 ; KNR to express bus
                 IF (MW[186] == 0)  MW[414+20*(_m-1)]=-9999.99
    
                 ; KNR to BRT-LRT
                 IF (MW[207] == 0)  MW[415+20*(_m-1)]=-9999.99
    
                 ; KNR to Commuter rail
                 IF (MW[228] == 0) MW[416+20*(_m-1)]=-9999.99
                 
                 /*
                 ; If walk access distance less than minimum, no walk access to transit
                 ;IF (MW[2] < 0.6)
                 ;   MW[405+20*(_m-1)]=-9999.99
                 ;   MW[406+20*(_m-1)]=-9999.99
                 ;   MW[407+20*(_m-1)]=-9999.99
                 ;   MW[408+20*(_m-1)]=-9999.99
                 ;   MW[409+20*(_m-1)]=-9999.99
                 ;ENDIF
                 ;
                 ;; If drive access distance less than minimum, no drive access to transit
                 ;IF (MW[2] < 1.2)
                 ;   MW[410+20*(_m-1)]=-9999.99
                 ;   MW[411+20*(_m-1)]=-9999.99
                 ;   MW[412+20*(_m-1)]=-9999.99
                 ;   MW[419+20*(_m-1)]=-9999.99
                 ;ENDIF
                 */
                 
                 ; Walk to transit not available for the MD or NT access markets;
                 IF(ACC==2 || ACC==3)
                    MW[405+20*(_m-1)]=-9999.99
                    MW[406+20*(_m-1)]=-9999.99
                    MW[407+20*(_m-1)]=-9999.99
                    MW[408+20*(_m-1)]=-9999.99
                    MW[409+20*(_m-1)]=-9999.99
                 ENDIF
    
                 ; Transit not available for NT access markets;
                 IF(ACC==3)
                   MW[404+20*(_m-1)]=-9999.99
                   MW[410+20*(_m-1)]=-9999.99
                   MW[411+20*(_m-1)]=-9999.99
                   MW[412+20*(_m-1)]=-9999.99
                   MW[413+20*(_m-1)]=-9999.99
                   MW[414+20*(_m-1)]=-9999.99
                   MW[415+20*(_m-1)]=-9999.99
                   MW[416+20*(_m-1)]=-9999.99
                   MW[419+20*(_m-1)]=-9999.99
                 ENDIF
                 
              ENDJLOOP
           ENDLOOP    ; end market segment loop to set mode availability
           /*
           ; Write out the utilities
           JLOOP                                                                                                                                         
             if (ACC=1-3)                                                                                                                                  
               IF (ACC==1) then                                                                                                                            
                  ACC_NAME='CAN WALK TO TRANSIT'                                                                                                           
               ELSEIF (ACC==2)                                                                                                                             
                  ACC_NAME='MUST DRIVE TO TRANSIT'                                                                                                         
               ELSEIF (ACC==3)                                                                                                                             
                  ACC_NAME='NO TRANSIT'                                                                                                                    
               ENDIF                                                                                                                                       
                                                                                                                                                           
              ; IF (({DebugMC} > 0) && (I=501) && (J=690))   
              IF ((I=501) && (J=690))   
                  READ FILE = "WriteCompositeUtility.S"
              ENDIF
            ENDIF  
          ENDJLOOP 
          */
           ; ############################# XCHOICE SETUP ###################################
           ; Use DEMAND=1 to generate probabilities.
           ; 0-Car Households
                 _DMD=260+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,
                 DEMANDMW=_DMD,
                 ODEMANDMW=601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,
                 STARTMW=900,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=528,
                 ;SPLITCOMP=521,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=525,
                 ;SPLITCOMP=541,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=521,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=526,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=522,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=523,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=524,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=527
    
           IF(@MARKETS@==1) GOTO next
           ; Car-insufficient, Low Income Households
                 _DMD=263+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,
                 DEMANDMW=_DMD,
                 ODEMANDMW=621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,
                 STARTMW=920,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=536,
                 ;SPLITCOMP=522,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=533,
                 ;SPLITCOMP=542,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=529,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=534,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=530,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=531,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=532,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=535

           ; Car-insufficient, High Income Households
                 _DMD=266+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,
                 DEMANDMW=_DMD,
                 ODEMANDMW=641,642,643,644,645,646,647,648,649,650,651, 652,653,654,655,656,657,658,659,
                 STARTMW=940,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=544,
                 ;SPLITCOMP=523,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=541,
                 ;SPLITCOMP=543,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=537,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=542,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=538,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=539,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=540,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=543
    
           ; Car-sufficient, Low Income Households
                 _DMD=269+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,
                 DEMANDMW=_DMD,
                 ODEMANDMW=661,662,663,664,665,666,667,668,668,670,671,672,673,674,675,676,677,678,679,
                 STARTMW=960,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=552,
                 ;SPLITCOMP=524,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=549,
                 ;SPLITCOMP=544,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=545,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=550,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=546,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=547,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=548,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=551
    
           ; Car-sufficient, High Income Households
                 _DMD=272+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,
                 DEMANDMW=_DMD,
                 ODEMANDMW=681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,
                 STARTMW=980,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=560,
                 ;SPLITCOMP=525,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=557,
                 ;SPLITCOMP=545,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=553,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=558,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=554,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=555,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=556,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=559
           :next
           
           ; Aggregate trips for all access markets
           LOOP _m=1,@MARKETS@              ; For each auto sufficiency market
               LOOP _c=1,19                 ; 19 choices
                   _n=700+_c+(_m-1)*20      ; 701 to 719: Zero auto market trips, 721 - 739 is auto insufficient low inc...
                   _d=600+_c + (_m-1)*20    
                   MW[_n]= MW[_n] + MW[_d]  ; MW[_n] --> MW(701 to 799)
               ENDLOOP
           ENDLOOP
           
           ; Store logsums for each access market 
           LOOP _m = 1, @MARKETS@
             IF (ACC==1) 
               MW[800+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 800 = ZA, 820 = A<W Low, 840 = A<W Hi, 860 = A>W Lo, 880 = A>w Hi) 
               MW[801+(_m-1)*20] = MW[522+(_m-1)*8]    ; Util_WTrn   
               MW[802+(_m-1)*20] = MW[523+(_m-1)*8]    ; Util_DTrn   
               MW[803+(_m-1)*20] = MW[524+(_m-1)*8]    ; Util_KTrn   
               MW[804+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[805+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[806+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[807+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums                        
             ELSEIF(ACC==2)
               MW[808+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 808 = ZA, 828 = A<W Low, 848 = A<W Hi, 868 = A>W Lo, 888 = A>w Hi) 
               ; MW[808+(_m-1)*20] = MW[522+(_m-1)*8]  ; Util_WTrn   
               MW[809+(_m-1)*20] = MW[523+(_m-1)*8]    ; Util_DTrn   
               MW[810+(_m-1)*20] = MW[524+(_m-1)*8]    ; Util_KTrn   
               MW[811+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[812+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[813+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[814+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums   
             ELSEIF(ACC==3)
               MW[815+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 815 = ZA, 835 = A<W Low, 855 = A<W Hi, 875 = A>W Lo, 895 = A>w Hi) 
              ; MW[808+(_m-1)*20] = MW[522+(_m-1)*8]   ; Util_WTrn   
              ; MW[809+(_m-1)*20] = MW[523+(_m-1)*8]   ; Util_DTrn   
              ; MW[810+(_m-1)*20] = MW[524+(_m-1)*8]   ; Util_KTrn   
               MW[816+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[817+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[818+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[819+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums 
            ENDIF
          ENDLOOP
         
           
           ; Store probabilities for each transit access category
           ;  IF (ACC == 1)
           ;      LOOP _m=1,@MARKETS@
           ;          LOOP _c=1,11
           ;              _n=320+_c+(_m-1)*11
           ;              _d=600+_c + (_m-1)*20
           ;              MW[_n]=MW[_d]         ; MW[_n] --> MW(321 to 397)
           ;          ENDLOOP
           ;      ENDLOOP
           ;  ELSEIF (ACC == 2)
           ;      LOOP _m=1,@MARKETS@
           ;          LOOP _c=1,11
           ;;             _n=320+_c+(_m-1)*11
           ;              _n=740+_c+(_m-1)*11
           ;              _d=600+_c + (_m-1)*20
           ;              MW[_n]=MW[_d]         ; MW[_n] --> MW(741 to 817)
           ;          ENDLOOP
           ;      ENDLOOP
           ;  ENDIF
    
            ; exponentiated auto utility -- for user benefits
            LOOP _m=1,@MARKETS@
              MW[560+_m]=exp(NC_1 * MW[525+(_m-1)*8])     
            ENDLOOP                               

            ; Calculate access market shares
            ARRAY TYPE=F ACCShare=ZONES,ZONES,3
            JLOOP
              IF (ACC==1)
                  ACCShare[I][J][ACC] = (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)         ; Can Walk
              ELSEIF (ACC==2)
                  ACCShare[I][J][ACC] = (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)   ; Must Drive
              ELSEIF (ACC==3)
                  ACCShare[I][J][ACC] = 1 - ACCShare[I][J][1] - ACCShare[I][J][2]                                 ; No Transit
              ENDIF
            ENDJLOOP
           
            ; Calculate logit average of the mode choice logsums (composite utilities) across access markets
            LOOP _m=1,@MARKETS@
             JLOOP
               MW[570+_m] = MW[570+_m] + EXP(MW[528+(_m-1)*8]) * ACCShare[I][J][ACC]
               IF(ACC==3)
                if (MW[570+_m]> 0) 
                  MW[570+_m] = LN(MW[570+_m])
                else 
                  MW[570+_m] = 0
                endif
               ENDIF
             ENDJLOOP
             
            ENDLOOP
        ENDLOOP ; end access loop
ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

EndDistributeMultiStep
; End of PILOT Script

ENDLOOP

LOOP PURPOSE = 13, 16, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


Distribute MULTISTEP=1       

    ; NHBW PK purpose
    IF (PURPOSE=13) 
    PERIOD= 'PK'
    PURP='NHBW'
    PURPNO=8
    SHRNO=2
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=' '
    noNHB=';'
    MARKETS=1
    Mkt1_0Car=1
    Mkt1_Name='Zero Cars All Income          '
    Mkt2_Name='Car Insuficient Low Income    '
    Mkt3_Name='Car Insuficient High Income   '
    Mkt4_Name='Car Suficient Low Income      '
    Mkt5_Name='Car Suficient High Income     '
    PRINT LIST="Mode Choice Loop Number = 13 of 16 NHBW PK", printo=0
    
    ELSEIF (PURPOSE=14) ; NHBO PK purpose
    PERIOD= 'PK'
    PURP='NHBO'
    PURPNO=9
    SHRNO=3
    SKIMFILE='PRELSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='2,3,4,5,6,7,8'
    isNHB=' '
    noNHB=';'
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number = 14 of 16 NHBO PK", printo=0
    
    ; NHBW OP purpose
    ELSEIF (PURPOSE=15) 
    PERIOD= 'OP'
    PURP='NHBW'
    PURPNO=8
    SHRNO=2
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=' '
    noNHB=';'
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number = 15 of 16 NHBW OP", printo=0
   
    ; NHBO OP purpose
    ELSEIF (PURPOSE=16) 
    PERIOD= 'OP'
    PURP='NHBO'
    PURPNO=9
    SHRNO=3
    SKIMFILE='FHSKIMS'
    STATPRKCOST='STPKCS2'
    OCC3=3.37 
    PRK='LONGPARK'
    STATION_TABLE='10,11,12,13,14,15,16'
    isNHB=' '
    noNHB=';'
    MARKETS=1
    Mkt1_0Car=0
    Mkt1_Name='All Cars  All Income          '
    PRINT LIST="Mode Choice Loop Number =16 of 16 NHBO OP", printo=0
    ENDIF
; End of PILOT Script

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

DistributeMultiStep ProcessID="NERPM", ProcessNum=Purpose
; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\applications\ModeChoice_nhb.S"
    
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\@purpose@_modechoice.prn"
FILEI MATI[14] = "{SCENARIO_DIR}\output\@PURP@@PERIOD@_PERTRIPS_{Alt}{year}.MAT"

        ;===================================================================================================================================
        ; XCHOICE - Standard Output (MC trips and final logsums)
        ;===================================================================================================================================
FILEO MATO[1] = "{SCENARIO_DIR}\output\@PURP@@PERIOD@_MC1.MAT",
            MO=701-719,DEC=19*D,
            NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC

       ; Logsums by auto sufficiency (averaged across all access markets)
FILEO MATO[2] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MCLS_{Alt}{year}.MAT",
       MO=571,DEC=1*D,NAME=LSUM_M1 
    
        ; Exp(AutoUtility) for user benefits
FILEO MATO[3] = "{SCENARIO_DIR}\output\@PURP@@PERIOD@_expautoutil.mat",
        MO=561,DEC=1*D,NAME=EXPA_M1 
       
FILEO MATO[4] = "{SCENARIO_DIR}\OUTPUT\@PURP@@PERIOD@_MCLS_XCHOICE_{Alt}{year}.MAT",
         MO=528,DEC=1*D,NAME=LSUM_M1
            
        ; Zone and station data
FILEI ZDATI[1] = "{SCENARIO_DIR}\input\ZDATA_{Year}{alt}.DBF"
FILEI ZDATI[2] = "{SCENARIO_DIR}\output\STATDATA_A10.DBF"
    
        ; Modechoice coefficients and alternative specific constants
FILEI LOOKUPI[1] = "{SCENARIO_DIR}\input\@PERIOD@_MC_CONSTANTS.CSV"
FILEI LOOKUPI[2] = "{SCENARIO_DIR}\input\@PERIOD@_TRN_COEFFICIENTS.CSV"
    
        ; Transit skim (1: Walk to Skyway)
FILEI MATI[1] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_SKYWAY_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (2: Walk to Local Bus)
FILEI MATI[2] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_LOCAL_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (3: Walk to Express Bus)
FILEI MATI[3] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (4: Walk to BRT-LRT)
FILEI MATI[4] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (5: Walk to Commuter Rail)
FILEI MATI[5] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_WALK_{Alt}{year}.MAT"
    
        ; Transit skim (6: PNR to Express Bus)
FILEI MATI[6] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_PNR_{Alt}{year}.MAT"
    
        ; Transit skim (7: PNR to BRT-LRT Bus)
FILEI MATI[7] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_PNR_{Alt}{year}.MAT"
    
        ; Transit skim (8: PNR to Commuter Rail)
FILEI MATI[8] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_PNR_{Alt}{year}.MAT"
    
        ; Transit skim (9: KNR to Express Bus)
FILEI MATI[9] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_EXPRESS_KNR_{Alt}{year}.MAT"
    
        ; Transit skim (10: KNR to BRT-LRT Bus)
FILEI MATI[10] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_BRTLRT_KNR_{Alt}{year}.MAT"
    
        ; Transit skim (11: KNR to Commuter Rail)
FILEI MATI[11] = "{SCENARIO_DIR}\output\TSKIM_@PERIOD@_COMRAIL_KNR_{Alt}{year}.MAT"
    
        ; Highway skim (All Drive)
FILEI MATI[12] = "{SCENARIO_DIR}\output\@SKIMFILE@.MAT"
    
        ; Highway skim (Drive to Skyway) 
FILEI MATI[13] = "{SCENARIO_DIR}\output\@PERIOD@_DRV_SKYWAY.MAT"

        ; HOV time savings
        ; Table 1 - HOV time savings for peak period
        ; Table 2 - HOV time savings for off-peak period
    
        ; Person trips
    
        ; Progress Bar update for evey 100 zones
        zonemsg=100
    
        ; Declare arrays to hold alternative specific constants
        ARRAY PARK=2578
        ARRAY TYPE=F K_AUT=5, K_SR=5, K_SR3=5, K_TRN=5, K_TDRV=5, K_TKNR=5, K_NMOT=5, K_BIKE=5, K_TDRVE=5
        ARRAY TYPE=C30 MARKET_NAME=5
    
        ; Read alternative specific Constants
        LOOKUP, NAME=CONSTANTS, LOOKUP[1]=1, RESULT=@PURPNO@, INTERPOLATE=N, , LIST=Y, LOOKUPI=1
    
        ; Read mode choice coefficients
        LOOKUP, NAME=COEFF, LOOKUP[1]=1, RESULT=@PURPNO@, INTERPOLATE=N, LIST=Y, LOOKUPI=2
    
        ; Read coefficients and constants
        IF (i=FirstZone)
          ; Index _m identifies the market segment, as follows:
          ; All HB purposes except shcool, university and NNHB
          ; -------------------------------------------------------
          ;    _m = 1      zero-car households
          ;    _m = 2      low income, car insufficient hhlds
          ;    _m = 3      high income, car sufficient hhlds
          ;    _m = 4      low income, car sufficient hhlds
          ;    _m = 5      high income, car sufficient hhlds
    
          ; Household market stratified constants
          LOOP _m=1,@MARKETS@    
            K_AUT[_m]  = CONSTANTS(1,(_m-1)*10+1)            ; drive to skyway
            K_SR[_m]   = CONSTANTS(1,(_m-1)*10+2)            ; shared-ride 2 & 3+
            K_SR3[_m]  = CONSTANTS(1,(_m-1)*10+3)            ; shared ride 3+
            K_TRN[_m]  = CONSTANTS(1,(_m-1)*10+4)            ; transit
            K_TDRV[_m] = CONSTANTS(1,(_m-1)*10+5)            ; drive to local
            K_TKNR[_m] = CONSTANTS(1,(_m-1)*10+6)            ; knr to transit
            K_NMOT[_m] = CONSTANTS(1,(_m-1)*10+7)            ; non-motorized (walk & bike)
            K_BIKE[_m] = CONSTANTS(1,(_m-1)*10+8)            ; bike
            K_TDRVE[_m] = CONSTANTS(1,(_m-1)*10+9)           ; pnr to express
          ENDLOOP
    
          ; MARKETS=@MARKETS@
          MARKET_NAME[1] = '@Mkt1_Name@'
          MARKET_NAME[2] = '@Mkt2_Name@'
          MARKET_NAME[3] = '@Mkt3_Name@'
          MARKET_NAME[4] = '@Mkt4_Name@'
          MARKET_NAME[5] = '@Mkt5_Name@'
    
          ; Mode-specific constants -- same for all hhld markets
          K_SKY = CONSTANTS(1,51)                  ; Skyway
          K_EXP = CONSTANTS(1,52)                  ; express bus
          K_BRT = CONSTANTS(1,53)                  ; brt
          K_URL = CONSTANTS(1,54)                  ; urban rail
          K_CRL = CONSTANTS(1,55)                  ; commuter rail
          K_INFDA = CONSTANTS(1,56)                ; informal KNR-to-Localbus
          
          ; Define array to hold cost coefficients
          ARRAY TYPE=F COEFF_COST=5
          COEFF_COST[1]  = COEFF(1,5)
          COEFF_COST[2]  = COEFF(1,6)
          COEFF_COST[3]  = COEFF(1,7)
          COEFF_COST[4]  = COEFF(1,8)
          COEFF_COST[5]  = COEFF(1,9)
          
          ; Level of Service Coefficients
          COEFF_IVTT   = COEFF(1,1)                ; In-vehicle travel time coefficient
          COEFF_SWAIT  = COEFF(1,2)                ; Short wait(<5 minutes)
          COEFF_LWAIT  = COEFF(1,3)                ; Long wait (>5 minutes)
          COEFF_XWAIT  = COEFF(1,4)                ; Xfer wait
          COEFF_DRIVE  = COEFF(1,10)               ; Drive access
          COEFF_TERML  = COEFF(1,11)               ; Terminal time
          COEFF_WALK   = COEFF(1,12)               ; Walk access
          COEFF_WALK1  = COEFF(1,13)               ; Walk time < 1
          COEFF_WALK2  = COEFF(1,14)               ; Walk time > 1
          COEFF_BIKE1  = COEFF(1,15)               ; Bike time < 1
          COEFF_BIKE2  = COEFF(1,16)               ; Bike time > 1
          DWalkBIKE    = COEFF(1,17)               ; Walk and Bike threshold
 
          ; Nesting coefficients
          NC_1         = COEFF(1,18)               ; Level 1 - auto, trn, non-mot
          NC_2         = COEFF(1,19)               ; Level 2 - transit access mode choice
          NC_3         = COEFF(1,20)               ; Level 3 - transit access mode choice
          ; NCP = NC_1 * NC_2                      ; Product of nesting coefficients

          ; Calibration specific
          COEFF_CBD     = COEFF(1,21)              ; CBD dummy
          COEFF_NXFER   = COEFF(1,22)              ; number of xfers 
                    
        ENDIF
    
        ; Highway skims
        FILLMW MW[1]=MI.12.1,2,3,4,5,6,7,8 ;,9     ; highway skims
        FILLMW MW[241]=MI.13.1,2,3,4,5,6,7,8,9     ; drive to skyway best path
       ; FILLMW MW[11]=MI.14.HOVsave@PERIOD@        ; HOVsavePK for peak period and HOVsaveOP for off-peak period
       ; FILLMW MW[291]=MI.18.@STATION_TABLE@       ; 8 tables - PKStationTAZ_pnrb,PKParkCost_pnrb,termtimpnr,termtimknr,OPStationTAZ_pnrb,OPParkCost_pnrb,termtimpnr,termtimknr
    
        ; Transit (walk) skims
        FILLMW MW[21]=MI.1.1(15)                   ; walk to skyway
        FILLMW MW[41]=MI.2.1(15)                   ; walk to loc bus
        FILLMW MW[61]=MI.3.1(15)                   ; walk to exp bus
        FILLMW MW[81]=MI.4.1(15)                   ; walk to brt lrt
        FILLMW MW[101]=MI.5.1(15)                  ; walk to com rail
    
        ; Transit (PNR) skims
        FILLMW MW[121]=MI.6.1(15)                  ; pnr to exp bus
        FILLMW MW[141]=MI.7.1(15)                  ; pnr to brt lrt
        FILLMW MW[161]=MI.8.1(15)                  ; pnr to com rail
    
        ; Transit (KNR) skims
        FILLMW MW[181]=MI.9.1(15)                  ; knr to exp bus
        FILLMW MW[201]=MI.10.1(15)                 ; knr to brt lrt
        FILLMW MW[221]=MI.11.1(15)                 ; knr to com rail
    
        ; Walk and Bike
        ; distance portion that is 1 mile or less
        MW[12] = MIN(MW[2],1)
    
        ; Distance portion that is longer than 1 mile
        JLOOP
          IF (MW[2][J] > 1)
              MW[13] = MW[2][J] - 1
          ELSE
              MW[13] = 0
          ENDIF
        ENDJLOOP
    
        ; Person trips
        MW[251] = MI.14.6   ; Total Person Trips
    
        ;  Write out coefficients for debug and regular runs
        IF (I=1)  ; Write mode choice summary file                                                                                                
          ; DEBUG MODE CHOICE                                                                                                                   
          ;IF ({DebugMC}>0) 
             ; split this into two sections (1) DEBUG and (2) Regular 
            ; READ FILE = "WriteReport.S"
         ; ENDIF
        ENDIF
        
        ; ************************** PROCESS PERSON TRIPS INTO MARKETS ************************************
        ; Divide person trip table into different markets
        ;  MW[252]=MW[251] * ZI.1.PERCAUTO0[I]                        ; Zero car HHs
        ;  MW[253]=MW[251] * ZI.1.PERCAUTO1[I]                        ; Auto Insufficient Low Income HHs
        ;  MW[254]=MW[251] * ZI.1.PERCAUTO3[I]                        ; Auto Insufficient High Income HHs
        ;  MW[255]=MW[251] * ZI.1.PERCAUTO4[I]                        ; Auto Sufficient Low Income HHs
        ;  MW[256]=(MW[251] - MW[252] - MW[253] - MW[254] - MW[255])  ; Auto Sufficient High Income HHs
        
        MW[252]= MI.14.1    ; Zero car HHs                     
        MW[253]= MI.14.2    ; Auto Insufficient Low Income HHs 
        MW[254]= MI.14.3    ; Auto Insufficient High Income HHs
        MW[255]= MI.14.4    ; Auto Sufficient Low Income HHs   
        MW[256]= MI.14.5    ; Auto Sufficient High Income HHs     

        ; Overwrite the above if there is only one market
        IF (@MARKETS@=1)
           MW[252]=MW[251]
           MW[253]=0
           MW[254]=0
           MW[255]=0
           MW[256]=0
        ENDIF
    
        ; Zero car transit sub-markets (can walk, must drive and no access)
        MW[261] = MW[252] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[262] = MW[252] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[263] = MW[252] - MW[261] - MW[262]                                                                 ; No Access
    
        ; Auto Insufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[264] = MW[253] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[265] = MW[253] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[266] = MW[253] - MW[264] - MW[265]                                                                 ; No Access
    
        ; Auto Insufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[267] = MW[254] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[268] = MW[254] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[269] = MW[254] - MW[267] - MW[268]                                                                 ; No Access
    
        ; Auto Sufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[270] = MW[255] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[271] = MW[255] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[272] = MW[255] - MW[270] - MW[271]                                                                 ; No Access
    
        ; Auto Sufficient Low Income transit sub-markets (can walk, must drive and no access)
        MW[273] = MW[256] * (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)                 ; Can Walk
        MW[274] = MW[256] * (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)           ; Must Drive
        MW[275] = MW[256] - MW[273] - MW[274]                                                                 ; No Access

    
        ; *******************************************  WALK ACCESS MARKETS  ************************************************
        ; ******************************************************************************************************************
    
        ; Loop by access modes
        LOOP ACC=1,3
        
            ;**********************  ADD HOUSEHOLD MARKET SPECIFIC TERMS **********************************
            LOOP _m=1,@MARKETS@
    
               ; Drive alone
               MW[301+20*(_m-1)] = (COEFF_TERML    * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +           ; Terminal time
                                    COEFF_IVTT     * MW[4]             +                               ; IVTT
                                    COEFF_CBD      * ZI.1.CBD_DUMMY[J] +                               ; CBD dummy
                                    COEFF_COST[_m] * MW[1]             +                               ; Toll
                                    COEFF_COST[_m] * ZI.1.@PRK@[J]     +                               ; Auto parking cost
                                    COEFF_COST[_m] *  MW[2] * 9.5)                                     ; Auto operating cost
               MW[401+20*(_m-1)] = MW[301+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility
              
               ; Shared Ride 2-person
               MW[302+20*(_m-1)] = (K_SR[_m]       +                                                   ; Constant(s)
                                    COEFF_TERML * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +              ; Terminal time
                                    COEFF_IVTT  * MW[8]             -                                  ; IVTT
                                  ;  COEFF_IVTT  * (MAX (MW[11], 0)) +                                  ; HOV time savings
                                    COEFF_CBD   * ZI.1.CBD_DUMMY[J] +                                  ; CBD dummy               
                                    COEFF_COST[_m] * (MW[5]/ 2 )    +                                  ; Toll
                                    COEFF_COST[_m] * MW[2] * 9.5)                                      ; Auto operating cost
               MW[402+20*(_m-1)] =  MW[302+20*(_m-1)] / NC_1 / NC_2 / NC_3                             ; Scaled Utility
               
               ; Shared Ride 3+ person
               MW[303+20*(_m-1)] = (K_SR[_m] + K_SR3[_m] +                                             ; Constant(s)
                                    COEFF_TERML * (ZI.1.TERMTIME[I] + ZI.1.TERMTIME[J]) +              ; Terminal time 
                                    COEFF_IVTT  * MW[8]             -                                  ; IVTT
                                  ;  COEFF_IVTT  * (MAX (MW[11], 0)) +                                  ; HOV time savings
                                    COEFF_CBD   * ZI.1.CBD_DUMMY[J] +                                  ; CBD dummy               
                                    COEFF_COST[_m] * (MW[5]/@OCC3@) +                                  ; Toll
                                    COEFF_COST[_m] * MW[2] * 9.5)                                      ; Auto operating cost
               MW[403+20*(_m-1)] =  MW[303+20*(_m-1)] / NC_1 / NC_2 / NC_3                             ; Scaled Utility
                                                     
               ; Drive to Skyway
               MW[304+20*(_m-1)] = (K_AUT[_m]                                  +                       ; Constant(s)
                                   ; COEFF_DRIVE    *  MW[243]                  +                      ; Drive Access Time
                                    COEFF_WALK     *  MW[244]                  +                       ; Walk Access Time to skyway (PNR lot to skyway & walk egress)
                                    COEFF_SWAIT    *  MIN(MW[247],5)           +                       ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[247] - MIN(MW[247],5))+                       ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[248]                  +                       ; Xfer Wait
                                    COEFF_IVTT     * (MW[243] + MW[245])       +                       ; IVTT (hwy time + skyway time)
                                    COEFF_COST[_m] *  MW[249]                  +                       ; Transit Fare
                                    COEFF_COST[_m] *  MW[241]                  +                       ; Toll
                                    COEFF_COST[_m] *  MW[242] * 9.5            +                       ; Auto operating cost
                                    COEFF_NXFER    *  MW[246]                  +                       ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[404+20*(_m-1)] = MW[304+20*(_m-1)] /NC_1 /NC_2                                       ; Scaled Utility

               ; Walk to Skyway
               MW[305+20*(_m-1)] = (K_TRN[_m]      +  K_SKY                    +                       ; Constant(s)
                                    COEFF_DRIVE    *  MW[22]                   +                       ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[21] + MW[23])         +                       ; Walk Access Time + Xfer Time   
                                    COEFF_SWAIT    *  MIN(MW[32],5)            +                       ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[32] - MIN(MW[32],5))  +                       ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[33]                   +                       ; Xfer Wait
                                    COEFF_IVTT     *  MW[24]                   +                       ; IVTT (skyway time)
                                    COEFF_COST[_m] *  MW[34]                   +                       ; Transit Fare
                                    COEFF_NXFER    *  MW[31]                   +                       ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[405+20*(_m-1)] = MW[305+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; Walk to Local Bus
               MW[306+20*(_m-1)] = (K_TRN[_m]                                   +                      ; Transit Constant
                                    COEFF_DRIVE    *  MW[42]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[41] + MW[43])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[52],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[53]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[44] + MW[45])          +                      ; IVTT (skyway + local bus time)
                                    COEFF_COST[_m] *  MW[54]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[51]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[406+20*(_m-1)] = MW[306+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; Walk to Express Bus
               MW[307+20*(_m-1)] = (K_TRN[_m] + K_EXP  +                                               ; Constant(s)
                                    COEFF_DRIVE    *  MW[62]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[61] + MW[63])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[72],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[72] - MIN(MW[72],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[73]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[64] + MW[65] + MW[66]) +                      ; IVTT (skyway + local + express bus time)
                                    COEFF_COST[_m] *  MW[74]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[71]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                               ; CBD dummy
               MW[407+20*(_m-1)] = MW[307+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; Walk to BRT-LRT
               MW[308+20*(_m-1)] = (K_TRN[_m] + K_BRT                           +                      ; Constant(s)
                                    COEFF_DRIVE    *  MW[82]                    +                      ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[81] + MW[83])          +                      ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[92],5)             +                      ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[92] - MIN(MW[92],5))   +                      ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[93]                    +                      ; Xfer Wait
                                    COEFF_IVTT     * (MW[84]+MW[85]+MW[86]+MW[87]) +                   ; IVTT (skyway + local + express + BRT time)
                                    COEFF_COST[_m] *  MW[94]                    +                      ; Transit Fare
                                    COEFF_NXFER    *  MW[91]                    +                      ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J] )                              ; CBD dummy
               MW[408+20*(_m-1)] = MW[308+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; Walk to Commuter Rail
               MW[309+20*(_m-1)] = (K_TRN[_m] + K_CRL                            +                     ; Constant(s)
                                    COEFF_DRIVE    *  MW[102]                    +                     ; Drive Access Time (zero for walk but to keep the code consistent)
                                    COEFF_WALK     * (MW[101] + MW[103])         +                     ; Walk Access Time + Xfer Time
                                    COEFF_SWAIT    *  MIN(MW[112],5)             +                     ; Short wait (< 5 mins)
                                    COEFF_LWAIT    * (MW[112] - MIN(MW[92],5))   +                     ; Long wait (> 5 mins)
                                    COEFF_XWAIT    *  MW[113]                    +                     ; Xfer Wait
                                    COEFF_IVTT     * (MW[104] + MW[105] + MW[106]+ MW[107]+MW[108])+   ; IVTT (skyway + local + express + BRT + CRL time)
                                    COEFF_COST[_m] *  MW[114]                    +                     ; Transit Fare
                                    COEFF_NXFER    *  MW[111]                    +                     ; Num Xfers Dummy
                                    COEFF_CBD      *  ZI.1.CBD_DUMMY[J] )                              ; CBD dummy
               MW[409+20*(_m-1)] = MW[309+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to Local Bus (Walk skim with drive time)
               MW[319+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m]                        +                    ; Constant(s)
                                   COEFF_DRIVE    * (MW[41]/2/10)                 +                    ; Drive Access Time (Drive time = Walk access time/10; assuming drive speed of 30 MPH & 50%-50% access-egress split)
                                   COEFF_WALK     * (MW[43] + MW[41]/2)           +                    ; Xfer Time (here we don't have walk egress time, so assume a 50%-50% access-egress split)
                                   COEFF_SWAIT    *  MIN(MW[52],5)                +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))      +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[53]                       +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[44] + MW[45])             +                    ; IVTT (skyway + local bus time)
                                   COEFF_COST[_m] *  MW[54]                       +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[51]                       +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[419+20*(_m-1)] = MW[319+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
        
               ; PNR to Express Bus
               MW[310+20*(_m-1)] = (K_TRN[_m] + K_TDRVE[_m] + K_EXP                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[122]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[121] + MW[123])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[132],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[132] - MIN(MW[132],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[133]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[124] + MW[125] + MW[126]) +                    ; IVTT (skyway + local + express bus time)
                                   COEFF_COST[_m] *  MW[134]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[131]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[410+20*(_m-1)] = MW[310+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to BRT-LRT Bus
               MW[311+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m] + K_BRT                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[142]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[141] + MW[143])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[152],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[152] - MIN(MW[152],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[153]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[144]+MW[145]+MW[146]+MW[147]) +                ; IVTT (skyway + local + express + BRT time)
                                   COEFF_COST[_m] *  MW[154]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[151]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[411+20*(_m-1)] = MW[311+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; PNR to Commuter Rail
               MW[312+20*(_m-1)] = (K_TRN[_m] + K_TDRV[_m] + K_CRL                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[162]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[161] + MW[163])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[172],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[172] - MIN(MW[172],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[173]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[164] + MW[165] + MW[166] + MW[167] +MW[168])+  ; IVTT (skyway + local + express + BRT + CRL time)
                                   COEFF_COST[_m] *  MW[174]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[171]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[412+20*(_m-1)] = MW[312+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to Local Bus
               MW[313+20*(_m-1)] = (K_TRN[_m]     + K_TKNR[_m]   + K_INFDA        +                    ; Constant(s)
                                   COEFF_DRIVE    * (MW[41]/10)                   +                    ; Drive Access Time (Drive time = Walk time/10; assuming drive speed of 30 MPH)
                                   COEFF_WALK     * (MW[43] + 3)                  +                    ; Xfer Time (here we don't have walk egress time, so assume 3 minutes)
                                   COEFF_SWAIT    *  MIN(MW[52],5)                +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[52] - MIN(MW[52],5))      +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[53]                       +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[44] + MW[45])             +                    ; IVTT (skyway + local bus time)
                                   COEFF_COST[_m] *  MW[54]                       +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[51]                       +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[413+20*(_m-1)] = MW[313+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
    
               ; KNR to Express Bus
               MW[314+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_EXP                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[182]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[181] + MW[183])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[192],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[192] - MIN(MW[192],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[193]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[184] + MW[185] + MW[186]) +                    ; IVTT (skyway + local + express bus time)
                                   COEFF_COST[_m] *  MW[194]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[191]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[414+20*(_m-1)] = MW[314+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to BRT-LRT Bus
               MW[315+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_BRT                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[202]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[201] + MW[203])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[212],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[212] - MIN(MW[212],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[213]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[204]+MW[205]+MW[206]+MW[207]) +                ; IVTT (skyway + local + express + BRT time)
                                   COEFF_COST[_m] *  MW[214]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[211]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[415+20*(_m-1)] = MW[315+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
               
               ; KNR to Commuter Rail
               MW[316+20*(_m-1)] = (K_TRN[_m] + K_TKNR[_m] + K_CRL                +                    ; Constant(s)
                                   COEFF_DRIVE    *  MW[222]                      +                    ; Drive Access Time 
                                   COEFF_WALK     * (MW[221] + MW[223])           +                    ; Walk Access Time + Xfer Time
                                   COEFF_SWAIT    *  MIN(MW[232],5)               +                    ; Short wait (< 5 mins)
                                   COEFF_LWAIT    * (MW[232] - MIN(MW[232],5))    +                    ; Long wait (> 5 mins)
                                   COEFF_XWAIT    *  MW[233]                      +                    ; Xfer Wait
                                   COEFF_IVTT     * (MW[224] + MW[225] + MW[226]  +MW[227] +MW[228])+  ; IVTT (skyway + local + express + BRT + CRL time)
                                   COEFF_COST[_m] *  MW[234]                      +                    ; Transit Fare
                                   COEFF_NXFER    *  MW[231]                      +                    ; Num Xfers Dummy
                                   COEFF_CBD      *  ZI.1.CBD_DUMMY[J])                                ; CBD dummy
               MW[416+20*(_m-1)] = MW[316+20*(_m-1)] /NC_1 /NC_2 /NC_3                                 ; Scaled Utility
                          
               ; Walk
               MW[317+20*(_m-1)] = (K_NMOT[_m]                                    +                    ; Constant(s)
                                   COEFF_WALK1  * MW[12]                          +                    ; Walk time if less than 1 mile
                                   COEFF_WALK2  * MW[13])                                              ; Walk time if more than 1 mile
               MW[417+20*(_m-1)] = MW[317+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility
                      
               ; Bike
               MW[318+20*(_m-1)] = (K_NMOT[_m] + K_BIKE[_m]                       +                    ; Constant(s)
                                   COEFF_BIKE1  * MW[12]                          +                    ; Bike time if less than 1 mile
                                   COEFF_BIKE2  * MW[13])                                              ; Bike time if more than 1 mile
               MW[418+20*(_m-1)] = MW[318+20*(_m-1)] / NC_1 /NC_2                                      ; Scaled Utility

            ENDLOOP
    
            ;***************************    MODE AVAILABILITY CHECKS    ************************************
            ;  Drive alone and PNR to transit not available to zero car households
            IF (@Mkt1_0car@=1)
              MW[401] = -9999.99  ; Drive alone
              MW[404] = -9999.99  ; Drive to Skyway
              MW[410] = -9999.99  ; PNR to Express
              MW[411] = -9999.99  ; PNR to BRT
              MW[412] = -9999.99  ; PNR to Com Rail
              MW[419] = -9999.99  ; PNR to Local
            ENDIF
    
            LOOP _m=1,@MARKETS@
              JLOOP
                 ; Transit not available if no line-haul in-vehicle time on the transit path
                 ; Drive to skyway 
                 IF (MW[245] == 0)  MW[404+20*(_m-1)]=-9999.99
                 
                 ; Walk to skyway
                 IF (MW[24] == 0)  MW[405+20*(_m-1)]=-9999.99
    
                 ; Walk to local bus
                 IF (MW[45] == 0)  MW[406+20*(_m-1)]=-9999.99
    
                 ; Walk to express bus
                 IF (MW[66] == 0)  MW[407+20*(_m-1)]=-9999.99
    
                 ; Walk to BRT-LRT bus
                 IF (MW[87] == 0)  MW[408+20*(_m-1)]=-9999.99
    
                 ; Walk to Commuter Rail
                 IF (MW[108] == 0)  MW[409+20*(_m-1)]=-9999.99
                 
                 ; KNR to local bus
                 IF (MW[45] == 0)  MW[419+20*(_m-1)]=-9999.99
                 
                 ; PNR to express bus
                 IF (MW[126] == 0)  MW[410+20*(_m-1)]=-9999.99
    
                 ; PNR to BRT-LRT
                 IF (MW[147] == 0)  MW[411+20*(_m-1)]=-9999.99
    
                 ; PNR to Commuter rail
                 IF (MW[168] == 0) MW[412+20*(_m-1)]=-9999.99
    
                 ; KNR to local bus
                 IF (MW[45] == 0)  MW[413+20*(_m-1)]=-9999.99
    
                 ; KNR to express bus
                 IF (MW[186] == 0)  MW[414+20*(_m-1)]=-9999.99
    
                 ; KNR to BRT-LRT
                 IF (MW[207] == 0)  MW[415+20*(_m-1)]=-9999.99
    
                 ; KNR to Commuter rail
                 IF (MW[228] == 0) MW[416+20*(_m-1)]=-9999.99
                 
                 /*
                 ; If walk access distance less than minimum, no walk access to transit
                 ;IF (MW[2] < 0.6)
                 ;   MW[405+20*(_m-1)]=-9999.99
                 ;   MW[406+20*(_m-1)]=-9999.99
                 ;   MW[407+20*(_m-1)]=-9999.99
                 ;   MW[408+20*(_m-1)]=-9999.99
                 ;   MW[409+20*(_m-1)]=-9999.99
                 ;ENDIF
                 ;
                 ;; If drive access distance less than minimum, no drive access to transit
                 ;IF (MW[2] < 1.2)
                 ;   MW[410+20*(_m-1)]=-9999.99
                 ;   MW[411+20*(_m-1)]=-9999.99
                 ;   MW[412+20*(_m-1)]=-9999.99
                 ;   MW[419+20*(_m-1)]=-9999.99
                 ;ENDIF
                 */
                 
                 ; Walk to transit not available for the MD or NT access markets;
                 IF(ACC==2 || ACC==3)
                    MW[405+20*(_m-1)]=-9999.99
                    MW[406+20*(_m-1)]=-9999.99
                    MW[407+20*(_m-1)]=-9999.99
                    MW[408+20*(_m-1)]=-9999.99
                    MW[409+20*(_m-1)]=-9999.99
                 ENDIF
    
                 ; Transit not available for NT access markets;
                 IF(ACC==3)
                   MW[404+20*(_m-1)]=-9999.99
                   MW[410+20*(_m-1)]=-9999.99
                   MW[411+20*(_m-1)]=-9999.99
                   MW[412+20*(_m-1)]=-9999.99
                   MW[413+20*(_m-1)]=-9999.99
                   MW[414+20*(_m-1)]=-9999.99
                   MW[415+20*(_m-1)]=-9999.99
                   MW[416+20*(_m-1)]=-9999.99
                   MW[419+20*(_m-1)]=-9999.99
                 ENDIF
                 
              ENDJLOOP
           ENDLOOP    ; end market segment loop to set mode availability
           /*
           ; Write out the utilities
           JLOOP                                                                                                                                         
             if (ACC=1-3)                                                                                                                                  
               IF (ACC==1) then                                                                                                                            
                  ACC_NAME='CAN WALK TO TRANSIT'                                                                                                           
               ELSEIF (ACC==2)                                                                                                                             
                  ACC_NAME='MUST DRIVE TO TRANSIT'                                                                                                         
               ELSEIF (ACC==3)                                                                                                                             
                  ACC_NAME='NO TRANSIT'                                                                                                                    
               ENDIF                                                                                                                                       
                                                                                                                                                           
              ; IF (({DebugMC} > 0) && (I=501) && (J=690))   
              IF ((I=501) && (J=690))   
                  READ FILE = "WriteCompositeUtility.S"
              ENDIF
            ENDIF  
          ENDJLOOP 
          */
           ; ############################# XCHOICE SETUP ###################################
           ; Use DEMAND=1 to generate probabilities.
           ; 0-Car Households
                 _DMD=260+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,
                 DEMANDMW=_DMD,
                 ODEMANDMW=601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,
                 STARTMW=900,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=528,
                 ;SPLITCOMP=521,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=525,
                 ;SPLITCOMP=541,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=521,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=526,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=522,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=523,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=524,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=527
    
           IF(@MARKETS@==1) GOTO next
           ; Car-insufficient, Low Income Households
                 _DMD=263+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,
                 DEMANDMW=_DMD,
                 ODEMANDMW=621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,
                 STARTMW=920,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=536,
                 ;SPLITCOMP=522,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=533,
                 ;SPLITCOMP=542,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=529,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=534,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=530,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=531,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=532,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=535

           ; Car-insufficient, High Income Households
                 _DMD=266+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,
                 DEMANDMW=_DMD,
                 ODEMANDMW=641,642,643,644,645,646,647,648,649,650,651, 652,653,654,655,656,657,658,659,
                 STARTMW=940,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=544,
                 ;SPLITCOMP=523,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=541,
                 ;SPLITCOMP=543,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=537,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=542,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=538,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=539,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=540,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=543
    
           ; Car-sufficient, Low Income Households
                 _DMD=269+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,
                 DEMANDMW=_DMD,
                 ODEMANDMW=661,662,663,664,665,666,667,668,668,670,671,672,673,674,675,676,677,678,679,
                 STARTMW=960,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=552,
                 ;SPLITCOMP=524,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=549,
                 ;SPLITCOMP=544,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=545,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=550,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=546,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=547,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=548,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=551
    
           ; Car-sufficient, High Income Households
                 _DMD=272+ACC
                 XCHOICE ALTERNATIVES=da,sr2,sr3,drvsky,walksky,walkloc,walkexp,walkbrt,walkcom,pnrexp,pnrbrt,pnrcom,knrloc,knrexp,knrbrt,knrcom,walk,bike,pnrloc,
                 UTILITIESMW=481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,
                 DEMANDMW=_DMD,
                 ODEMANDMW=681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,
                 STARTMW=980,
           ;     Model Structure
           ;     Top level nest
                 SPLIT = Total NC_1 auto NC_1 transit NC_1 nonmot,
                 SPLITCOMP=560,
                 ;SPLITCOMP=525,
           ;     Auto nest
                 SPLIT = auto NC_2 da NC_2 sr NC_2 drvsky,
                 SPLITCOMP=557,
                 ;SPLITCOMP=545,
           ;     Shared-ride nest
                 SPLIT = sr NC_3 sr2 NC_3 sr3,
                 SPLITCOMP=553,
           ;     Transit nest
                 SPLIT = transit NC_2 wlktrn NC_2 pnrtrn NC_2 knrtrn,
                 SPLITCOMP=558,
           ;     Walk to Transit nest
                 SPLIT = wlktrn NC_3 walksky NC_3 walkloc NC_3 walkexp NC_3 walkbrt NC_3 walkcom,
                 SPLITCOMP=554,
           ;     PNR to Transit nest
                 SPLIT = pnrtrn  NC_3 pnrloc NC_3 pnrexp NC_3 pnrbrt NC_3 pnrcom,
                 SPLITCOMP=555,
           ;     KNR to Transit nest
                 SPLIT = knrtrn NC_3 knrloc NC_3 knrexp NC_3 knrbrt NC_3 knrcom,
                 SPLITCOMP=556,
           ;     Non-Motorized nest
                 SPLIT= nonmot NC_2 walk NC_2 bike,
                 SPLITCOMP=559
           :next
           
           ; Aggregate trips for all access markets
           LOOP _m=1,@MARKETS@              ; For each auto sufficiency market
               LOOP _c=1,19                 ; 19 choices
                   _n=700+_c+(_m-1)*20      ; 701 to 719: Zero auto market trips, 721 - 739 is auto insufficient low inc...
                   _d=600+_c + (_m-1)*20    
                   MW[_n]= MW[_n] + MW[_d]  ; MW[_n] --> MW(701 to 799)
               ENDLOOP
           ENDLOOP
           
           ; Store logsums for each access market 
           LOOP _m = 1, @MARKETS@
             IF (ACC==1) 
               MW[800+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 800 = ZA, 820 = A<W Low, 840 = A<W Hi, 860 = A>W Lo, 880 = A>w Hi) 
               MW[801+(_m-1)*20] = MW[522+(_m-1)*8]    ; Util_WTrn   
               MW[802+(_m-1)*20] = MW[523+(_m-1)*8]    ; Util_DTrn   
               MW[803+(_m-1)*20] = MW[524+(_m-1)*8]    ; Util_KTrn   
               MW[804+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[805+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[806+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[807+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums                        
             ELSEIF(ACC==2)
               MW[808+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 808 = ZA, 828 = A<W Low, 848 = A<W Hi, 868 = A>W Lo, 888 = A>w Hi) 
               ; MW[808+(_m-1)*20] = MW[522+(_m-1)*8]  ; Util_WTrn   
               MW[809+(_m-1)*20] = MW[523+(_m-1)*8]    ; Util_DTrn   
               MW[810+(_m-1)*20] = MW[524+(_m-1)*8]    ; Util_KTrn   
               MW[811+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[812+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[813+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[814+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums   
             ELSEIF(ACC==3)
               MW[815+(_m-1)*20] = MW[521+(_m-1)*8]    ; Util_SR   (MWs => 815 = ZA, 835 = A<W Low, 855 = A<W Hi, 875 = A>W Lo, 895 = A>w Hi) 
              ; MW[808+(_m-1)*20] = MW[522+(_m-1)*8]   ; Util_WTrn   
              ; MW[809+(_m-1)*20] = MW[523+(_m-1)*8]   ; Util_DTrn   
              ; MW[810+(_m-1)*20] = MW[524+(_m-1)*8]   ; Util_KTrn   
               MW[816+(_m-1)*20] = MW[525+(_m-1)*8]    ; Util_Auto            
               MW[817+(_m-1)*20] = MW[526+(_m-1)*8]    ; Util_Trn    
               MW[818+(_m-1)*20] = MW[527+(_m-1)*8]    ; Util_NonMot 
               MW[819+(_m-1)*20] = MW[528+(_m-1)*8]    ; Logsums 
            ENDIF
          ENDLOOP
         
           
           ; Store probabilities for each transit access category
           ;  IF (ACC == 1)
           ;      LOOP _m=1,@MARKETS@
           ;          LOOP _c=1,11
           ;              _n=320+_c+(_m-1)*11
           ;              _d=600+_c + (_m-1)*20
           ;              MW[_n]=MW[_d]         ; MW[_n] --> MW(321 to 397)
           ;          ENDLOOP
           ;      ENDLOOP
           ;  ELSEIF (ACC == 2)
           ;      LOOP _m=1,@MARKETS@
           ;          LOOP _c=1,11
           ;;             _n=320+_c+(_m-1)*11
           ;              _n=740+_c+(_m-1)*11
           ;              _d=600+_c + (_m-1)*20
           ;              MW[_n]=MW[_d]         ; MW[_n] --> MW(741 to 817)
           ;          ENDLOOP
           ;      ENDLOOP
           ;  ENDIF
    
            ; exponentiated auto utility -- for user benefits
            LOOP _m=1,@MARKETS@
              MW[560+_m]=exp(NC_1 * MW[525+(_m-1)*8])     
            ENDLOOP                               

            ; Calculate access market shares
            ARRAY TYPE=F ACCShare=ZONES,ZONES,3
            JLOOP
              IF (ACC==1)
                  ACCShare[I][J][ACC] = (ZI.1.PCWPRD@PERIOD@[I] * 0.01) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)         ; Can Walk
              ELSEIF (ACC==2)
                  ACCShare[I][J][ACC] = (1 - (ZI.1.PCWPRD@PERIOD@[I] * 0.01)) * (ZI.1.PCWATT@PERIOD@[J] * 0.01)   ; Must Drive
              ELSEIF (ACC==3)
                  ACCShare[I][J][ACC] = 1 - ACCShare[I][J][1] - ACCShare[I][J][2]                                 ; No Transit
              ENDIF
            ENDJLOOP
           
            ; Calculate logit average of the mode choice logsums (composite utilities) across access markets
            LOOP _m=1,@MARKETS@
             JLOOP
               MW[570+_m] = MW[570+_m] + EXP(MW[528+(_m-1)*8]) * ACCShare[I][J][ACC]
               IF(ACC==3)
                if (MW[570+_m]> 0) 
                  MW[570+_m] = LN(MW[570+_m])
                else 
                  MW[570+_m] = 0
                endif
               ENDIF
             ENDJLOOP
             
            ENDLOOP
        ENDLOOP ; end access loop
ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

EndDistributeMultiStep
; End of PILOT Script

ENDLOOP

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
 Wait4Files Files=NERPM1.script.end, NERPM2.script.end, NERPM3.script.end,
   NERPM4.script.end, NERPM5.script.end, NERPM6.script.end,                                 
   NERPM7.script.end, NERPM8.script.end, NERPM9.script.end,                                 
   NERPM10.script.end, NERPM11.script.end, NERPM12.script.end,                              
   NERPM13.script.end, NERPM14.script.end, NERPM15.script.end,                              
   NERPM16.script.end,                                                
printfiles=MERGE, checkReturnCode=T   
*Cluster NERPM 1-16 Close Exit

; *Cluster NERPM 1-%NUMBER_OF_PROCESSORS% Close Exit; End of PILOT Script

LOOP per = 1, 2, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
    IF (per ==1)
     todToken = 'PK'
    Else
     todToken = 'OP'
    EndIF

; End of PILOT Script

  LOOP pur = 1, 4, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


    IF(pur==1)
       purposeToken = 'HBW'
       mkt = 5
    Elseif (pur==2)
       purposeToken = 'HBO'
       mkt = 5
    ElseIf (pur==3)
       purposeToken = 'HBSH'
       mkt = 5
    ElseIf (pur==4)
       purposeToken = 'HBSR'
       mkt = 5        
    Endif; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\CNMAT00F.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX
FILEO MATO[1] = "{SCENARIO_DIR}\output\@purposeToken@@todToken@_MCALL.mat",
MO=1-19,DEC=19*D, NAME=DA,SR2,SR3,DRVSKY,WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM,PNREXP,PNRBRT,PNRCOM,KNRLOC,KNREXP,KNRBRT,KNRCOM,WALK,BIKE,PNRLOC

FILEI MATI[5] = "{SCENARIO_DIR}\output\@purposeToken@@todToken@_MC5.mat"
FILEI MATI[4] = "{SCENARIO_DIR}\output\@purposeToken@@todToken@_MC4.mat"
FILEI MATI[3] = "{SCENARIO_DIR}\output\@purposeToken@@todToken@_MC3.mat"
FILEI MATI[2] = "{SCENARIO_DIR}\output\@purposeToken@@todToken@_MC2.mat"
FILEI MATI[1] = "{SCENARIO_DIR}\output\@purposeToken@@todToken@_MC1.mat"

         
MW[1 ] = MI.1.1 + MI.2.1 + MI.3.1 + MI.4.1 + MI.5.1 
           MW[2 ] = MI.1.2 + MI.2.2 + MI.3.2 + MI.4.2 + MI.5.2 
           MW[3 ] = MI.1.3 + MI.2.3 + MI.3.3 + MI.4.3 + MI.5.3 
           MW[4 ] = MI.1.4 + MI.2.4 + MI.3.4 + MI.4.4 + MI.5.4 
           MW[5 ] = MI.1.5 + MI.2.5 + MI.3.5 + MI.4.5 + MI.5.5 
           MW[6 ] = MI.1.6 + MI.2.6 + MI.3.6 + MI.4.6 + MI.5.6 
           MW[7 ] = MI.1.7 + MI.2.7 + MI.3.7 + MI.4.7 + MI.5.7 
           MW[8 ] = MI.1.8 + MI.2.8 + MI.3.8 + MI.4.8 + MI.5.8 
           MW[9 ] = MI.1.9 + MI.2.9 + MI.3.9 + MI.4.9 + MI.5.9 
           MW[10] = MI.1.10+ MI.2.10+ MI.3.10+ MI.4.10+ MI.5.10
           MW[11] = MI.1.11+ MI.2.11+ MI.3.11+ MI.4.11+ MI.5.11
           MW[12] = MI.1.12+ MI.2.12+ MI.3.12+ MI.4.12+ MI.5.12
           MW[13] = MI.1.13+ MI.2.13+ MI.3.13+ MI.4.13+ MI.5.13
           MW[14] = MI.1.14+ MI.2.14+ MI.3.14+ MI.4.14+ MI.5.14
           MW[15] = MI.1.15+ MI.2.15+ MI.3.15+ MI.4.15+ MI.5.15
           MW[16] = MI.1.16+ MI.2.16+ MI.3.16+ MI.4.16+ MI.5.16
           MW[17] = MI.1.17+ MI.2.17+ MI.3.17+ MI.4.17+ MI.5.17
           MW[18] = MI.1.18+ MI.2.18+ MI.3.18+ MI.4.18+ MI.5.18
           MW[19] = MI.1.19+ MI.2.19+ MI.3.19+ MI.4.19+ MI.5.19
           
ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


; End of PILOT Script

  ENDLOOP

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\CNMAT00J.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX

FILEI MATI[8] = "{SCENARIO_DIR}\output\NHBO@todToken@_MC1.mat"
FILEI MATI[7] = "{SCENARIO_DIR}\output\NHBW@todToken@_MC1.mat"
FILEI MATI[6] = "{SCENARIO_DIR}\output\HBCU@todToken@_MC1.mat"
FILEI MATI[5] = "{SCENARIO_DIR}\output\HBSC@todToken@_MC1.mat"
FILEI MATI[4] = "{SCENARIO_DIR}\output\HBSR@todToken@_MCALL.mat"
FILEI MATI[3] = "{SCENARIO_DIR}\output\HBSH@todToken@_MCALL.mat"
FILEI MATI[2] = "{SCENARIO_DIR}\output\HBO@todToken@_MCALL.mat"
FILEI MATI[1] = "{SCENARIO_DIR}\output\HBW@todToken@_MCALL.mat"

FILEO MATO[3] = "{SCENARIO_DIR}\output\tload_@todToken@_KNR.mat",mo =20,13-16, DEC=5*D,
             NAME= KNRSKY,KNRLOC,KNREXP,KNRBRT,KNRCOM

FILEO MATO[2] = "{SCENARIO_DIR}\output\tload_@todToken@_temp_PNR.mat",  mo = 4,19,10-12, DEC=5*D,
             NAME= PNRSKY,PNRLOC,PNREXP,PNRBRT,PNRCOM
             
FILEO MATO[1] = "{SCENARIO_DIR}\output\tload_@todToken@_temp_Walk.mat", mo = 5-9, DEC=5*D,
             NAME= WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM
             
 
       ; Add matrices across purposes
       /*
                 Skyway   Local   Express     BRT/LRT    ComRail
        Walk       5        6        7           8           9
        PNR        4       19       10          11          12
        KNR                13       14          15          16
       */  
                                                                                         
       ; MW[1 ] = MI.1.1 + MI.2.1 + MI.3.1 + MI.4.1 + MI.5.1 + MI.6.1  + MI.7.1  + MI.8.1
       ; MW[2 ] = MI.1.2 + MI.2.2 + MI.3.2 + MI.4.2 + MI.5.2 + MI.6.2  + MI.7.2  + MI.8.2
       ; MW[3 ] = MI.1.3 + MI.2.3 + MI.3.3 + MI.4.3 + MI.5.3 + MI.6.3  + MI.7.3  + MI.8.3
       MW[4 ] = MI.1.4 + MI.2.4 + MI.3.4 + MI.4.4 + MI.5.4 + MI.6.4  + MI.7.4  + MI.8.4  
       MW[5 ] = MI.1.5 + MI.2.5 + MI.3.5 + MI.4.5 + MI.5.5 + MI.6.5  + MI.7.5  + MI.8.5  
       MW[6 ] = MI.1.6 + MI.2.6 + MI.3.6 + MI.4.6 + MI.5.6 + MI.6.6  + MI.7.6  + MI.8.6  
       MW[7 ] = MI.1.7 + MI.2.7 + MI.3.7 + MI.4.7 + MI.5.7 + MI.6.7  + MI.7.7  + MI.8.7  
       MW[8 ] = MI.1.8 + MI.2.8 + MI.3.8 + MI.4.8 + MI.5.8 + MI.6.8  + MI.7.8  + MI.8.8  
       MW[9 ] = MI.1.9 + MI.2.9 + MI.3.9 + MI.4.9 + MI.5.9 + MI.6.9  + MI.7.9  + MI.8.9  
       MW[10] = MI.1.10+ MI.2.10+ MI.3.10+ MI.4.10+ MI.5.10+ MI.6.10 + MI.7.10 + MI.8.10 
       MW[11] = MI.1.11+ MI.2.11+ MI.3.11+ MI.4.11+ MI.5.11+ MI.6.11 + MI.7.11 + MI.8.11 
       MW[12] = MI.1.12+ MI.2.12+ MI.3.12+ MI.4.12+ MI.5.12+ MI.6.12 + MI.7.12 + MI.8.12 
       MW[13] = MI.1.13+ MI.2.13+ MI.3.13+ MI.4.13+ MI.5.13+ MI.6.13 + MI.7.13 + MI.8.13 
       MW[14] = MI.1.14+ MI.2.14+ MI.3.14+ MI.4.14+ MI.5.14+ MI.6.14 + MI.7.14 + MI.8.14 
       MW[15] = MI.1.15+ MI.2.15+ MI.3.15+ MI.4.15+ MI.5.15+ MI.6.15 + MI.7.15 + MI.8.15 
       MW[16] = MI.1.16+ MI.2.16+ MI.3.16+ MI.4.16+ MI.5.16+ MI.6.16 + MI.7.16 + MI.8.16 
       MW[17] = MI.1.17+ MI.2.17+ MI.3.17+ MI.4.17+ MI.5.17+ MI.6.17 + MI.7.17 + MI.8.17 
       MW[18] = MI.1.18+ MI.2.18+ MI.3.18+ MI.4.18+ MI.5.18+ MI.6.18 + MI.7.18 + MI.8.18 
       MW[19] = MI.1.19+ MI.2.19+ MI.3.19+ MI.4.19+ MI.5.19+ MI.6.19 + MI.7.19 + MI.8.19 
       MW[20] = 0 ; Dummy matrix            
             

ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


; End of PILOT Script

ENDLOOP

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\CNMAT00G.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX MSG='Combine HBW PK & OP'
FILEO MATO[1] = "{SCENARIO_DIR}\output\HBW_{alt}{year}.MAT",mo = 1-12, NAME = DA, SR2, SR3P  
  
FILEI MATI[2] = "{SCENARIO_DIR}\output\HBWOP_MCALL.mat"
FILEI MATI[1] = "{SCENARIO_DIR}\output\HBWPK_MCALL.mat"

   MW[1] = Mi.1.1 + mi.2.1
   MW[2] = Mi.1.2 + mi.2.2   
   MW[3] = Mi.1.3 + mi.2.3 

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\CNMAT00H.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX MSG='Combine HBNW PK & OP'
FILEI MATI[10] = "{SCENARIO_DIR}\output\HBSCOP_MC1.MAT"
FILEI MATI[9] = "{SCENARIO_DIR}\output\HBSCPK_MC1.mat"
FILEI MATI[8] = "{SCENARIO_DIR}\output\HBCUOP_MC1.mat"
FILEI MATI[7] = "{SCENARIO_DIR}\output\HBCUPK_MC1.mat"
FILEI MATI[6] = "{SCENARIO_DIR}\output\HBSHOP_MCALL.mat"
FILEI MATI[5] = "{SCENARIO_DIR}\output\HBSHPK_MCALL.mat"
FILEI MATI[4] = "{SCENARIO_DIR}\output\HBSROP_MCALL.mat"
FILEI MATI[3] = "{SCENARIO_DIR}\output\HBSRPK_MCALL.mat"

FILEI MATI[2] = "{SCENARIO_DIR}\output\HBOOP_MCALL.mat"
FILEI MATI[1] = "{SCENARIO_DIR}\output\HBOPK_MCALL.mat"
FILEO MATO[1] = "{SCENARIO_DIR}\output\HBNW_{alt}{year}.MAT",
 mo = 1-12, NAME = DA, SR2, SR3P  

   MW[1] = Mi.1.1 + mi.2.1 +mi.3.1+mi.4.1+mi.5.1+mi.6.1+mi.7.1+mi.8.1+mi.9.1 + mi.10.1
   MW[2] = Mi.1.2 + mi.2.2 +mi.3.2+mi.4.2+mi.5.2+mi.6.2+mi.7.2+mi.8.2+mi.9.2 + mi.10.2  
   MW[3] = Mi.1.3 + mi.2.3 +mi.3.1+mi.4.3+mi.5.3+mi.6.3+mi.7.3+mi.8.3+mi.9.3 + mi.10.3 
       

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\CNMAT00I.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX MSG='Combine NHB PK & OP'
FILEI MATI[4] = "{SCENARIO_DIR}\output\NHBOOP_MC1.mat"
FILEI MATI[3] = "{SCENARIO_DIR}\output\NHBOPK_MC1.mat"
FILEI MATI[2] = "{SCENARIO_DIR}\output\NHBWOP_MC1.mat"
FILEI MATI[1] = "{SCENARIO_DIR}\output\NHBWPK_MC1.mat"

FILEO MATO[1] = "{SCENARIO_DIR}\output\NHB_{alt}{year}.mat", mo = 1-12, NAME = DA, SR2, SR3P  
   MW[1] = Mi.1.1 + mi.2.1 + Mi.3.1 + mi.4.1
   MW[2] = Mi.1.2 + mi.2.2 + Mi.3.2 + mi.4.2   
   MW[3] = Mi.1.3 + mi.2.3 + Mi.3.3 + mi.4.3  

ENDRUN


LOOP per = 1, 2, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


    IF (per =1)
     todToken = 'PK'
    Else
     todToken = 'OP'
    EndIF; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\DRMAT00A.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\drive-to-skyway.csv"
FILEI MATI[2] = "{SCENARIO_DIR}\output\tload_@todToken@_temp_PNR.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\output\@todToken@_DRV_SKYWAY_ZONES.MAT"

      MW[1] = mi.1.1 ; PNR Zone
      MW[2] = mi.2.1 ; drive-to-skyway
      
      ; Add header
      IF (I=1 & J =1) PRINT PRINTO=1 CSV=T LIST='I' 'J' 'P' 'Trips'
       
      ; Add 1.01 trips to avoid null matrix (885 is PNR Skyway zone)
      IF (I=1 & J =1) PRINT PRINTO=1 CSV=T FORM=0 LIST= I(5), J(5), '665', '1.01'
      
      JLOOP
        PRINT PRINTO=1 CSV=T FORM=0 LIST= I(5), J(5), MW[1](5), MW[2](8.6)
      ENDJLOOP

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\DRMAT00B.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX
FILEO RECO[1] = "{SCENARIO_DIR}\output\temp_drive-to-skyway.DBF",FIELDS=I,J,Trips
FILEI DBI[1] = "{SCENARIO_DIR}\output\drive-to-skyway.csv", DELIMITER=',' IZONE =1, JZONE = 2, PZONE =3, TRIPS = 4, SORT=PZONE, JZONE

ZONES=1                  
       LOOP K=2,DBI.1.NUMRECORDS
         X1=DBIReadRecord(1,K)
         ;IF(DI.1.PZONE>0 & DI.1.TRIPS >0.001) 
         IF(DI.1.PZONE>0) 
            RO.I = DI.1.PZONE
            RO.J = DI.1.JZONE
            RO.Trips = DI.1.TRIPS
            WRITE RECO=1
         ENDIF
       ENDLOOP

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\DRMAT00C.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX
FILEO MATO[1] = "{SCENARIO_DIR}\output\@todToken@_rebuild_drive_to_skyway.MAT", MO=1, DEC= 1*d
FILEI MATI[1] = "{SCENARIO_DIR}\output\temp_drive-to-skyway.dbf", PATTERN=I:JV, FIELDS= I,J,Trips

      zones=2578
        mw[1] = mi.1.1

ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\DRMAT00D.S"
;;<<Default Template>><<MATRIX>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX

FILEI MATI[3] = "{SCENARIO_DIR}\output\tload_@todToken@_temp_PNR.mat"
FILEI MATI[2] = "{SCENARIO_DIR}\output\tload_@todToken@_temp_Walk.mat"
FILEI MATI[1] = "{SCENARIO_DIR}\output\@todToken@_rebuild_drive_to_skyway.MAT"

FILEO MATO[2] = "{SCENARIO_DIR}\output\tload_@todToken@_PNR.mat",mo = 6-10, DEC=5*D,
                 NAME= PNRSKY,PNRLOC,PNREXP,PNRBRT,PNRCOM
FILEO MATO[1] = "{SCENARIO_DIR}\output\tload_@todToken@_Walk.mat",mo = 1-5, DEC=5*D,
                 NAME= WALKSKY,WALKLOC,WALKEXP,WALKBRT,WALKCOM
    

      MW[1] = mi.1.1 + mi.2.1        ; Drive (portion of pnr to jzome) + walk to skyway
      FILLMW MW[2] = mi.2.2(4)
      
      MW[6] = 0
      FILLMW MW[7]= mi.3.2(4)

ENDRUN


ENDLOOP

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="{SCENARIO_DIR}\output\TTMAT00A.PRN" MSG='Combine trip tables for 24-Hour Assignment'
FILEI MATI[7] = "{SCENARIO_DIR}\output\PORT_TRK_24H_{Year}.MAT"
FILEI MATI[5] = "{SCENARIO_DIR}\output\EETRIPS.MAT"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEO MATO[1] = "{SCENARIO_DIR}\output\HWYTTAB_{alt}{year}.MAT",
MO=121-128, NAME=DA_IEII,SR_IEII,TRK_IEII,TRK_EE,
                 DA_EE,SR_EE,PortTrk,24H_Total, DEC=8*s
                 
FILEI MATI[4] = "{SCENARIO_DIR}\Output\VTRIP1.MAT"
FILEI MATI[3] = "{SCENARIO_DIR}\output\NHB_{alt}{year}.MAT"
FILEI MATI[2] = "{SCENARIO_DIR}\output\HBNW_{alt}{year}.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\output\HBW_{alt}{year}.MAT"

PAR ZONEMSG=100

FILLMW MW[1]  = MI.1.1,2,3,4,5,6,7,8,9,10,11,12   ; - HBW trips
FILLMW MW[21] = MI.2.1,2,3,4,5,6,7,8,9,10,11,12   ; - HBNW trips
FILLMW MW[41] = MI.3.1,2,3,4,5,6,7,8,9,10,11,12   ; - NHB trips
FILLMW MW[61] = MI.4.1,2,3,4,5,6,7                ; Veh Trips (TRK - LT,MT,HT & IE - SO,HO,LD,HD)
FILLMW MW[81] = MI.5.1,2,3,4,5                    ; EE Trips (SOV,HOV,LT,HT,Tot)


; DRIVE ALONE
 MW[101]=(MW[1] + MW[21] + MW[41] + MW[64] + MI.1.1.T + MI.2.1.T + MI.3.1.T + MI.4.4.T )*0.5

; AUTO 2
;===Mistake to include MW[12] instead of MW[22]==>MW[102]=(MW[2] + MW[12] + MW[42] + MW[92] + MI.1.2.T + MI.2.2.T + MI.3.2.T + MI.6.2.T)/2*0.5
 MW[102]=(MW[2] + MW[22] + MW[42] + MI.1.2.T + MI.2.2.T + MI.3.2.T )/2*0.5

; AUTO 3+ HBW
MW[103]=(MW[3] + MI.1.3.T)/{OC3VHBW}*0.5   ; include this modifier if model is revalidated
; AUTO 3+ HBO
MW[104]=(MW[23] + MI.2.3.T)/{OC3VHBNW}*0.5  ; include this modifier if model is revalidated
; AUTO 3+ NHB
;===Another Mistake to include MW[3] instead of MW[43] ==> MW[105]=(MW[3] + MI.3.3.T)/{OC3VNHB}*0.5   ;  include this modifier if model is revalidated
MW[105]=(MW[43] + MI.3.3.T)/{OC3VNHB}*0.5   ;  include this modifier if model is revalidated
; HOV IE
MW[106]=(MW[65] + MI.4.5.T)*0.5
; II/IE TRK
MW[107]=(MW[61] + MW[62] + MW[63] + MW[66] + MW[67] + MI.4.1.T + MI.4.2.T + MI.4.3.T + MI.4.6.T + MI.4.7.T)*0.5
; EE TRUCK
MW[108]=(MW[83] + MW[84] + MI.5.3.T + MI.5.4.T)*0.5
; EE SOV
MW[109]=(MW[81] + MI.5.1.T)*0.5
; EE HOV
MW[110]=(MW[82] + MI.5.2.T)*0.5

; FINAL TABLE ORDERING FOR HIGHWAY SIDE
MW[121]=MW[101]                                  ; DA_IEII
MW[122]=MW[102]+MW[103]+MW[104]+MW[105]+MW[106]  ; SR_IEII
MW[123]=MW[107]                                  ; TRK_IEII
MW[124]=MW[108]                                  ; TRK_EE
MW[125]=MW[109]                                  ; DA_EE
MW[126]=MW[110]                                  ; SR_EE
MW[127]=MI.7.1                                   ; JaxPortTrucks

LOOP K=121,127
  MW[128]=MW[128]+MW[K]                          ;TotVeh
ENDLOOP

ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


if({TOD_HwyMdl}=1)   ;Time of Day (4 periods) Highway Model
; End of PILOT Script

; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00B.PRN" MSG='Create HBW Period Hwy Pax TT by Mode/Dir'
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEO MATO[4] = "{SCENARIO_DIR}\output\HBW_NT_TEM.MAT",
  MO=61-66, NAME= NT_HBW_DA_P2A, NT_HBW_SR2_P2A, NT_HBW_SR3_P2A,
                  NT_HBW_DA_A2P, NT_HBW_SR2_A2P, NT_HBW_SR3_A2P, dec=6*S

FILEO MATO[3] = "{SCENARIO_DIR}\output\HBW_PM_TEM.MAT",
  MO=51-56, NAME= PM_HBW_DA_P2A, PM_HBW_SR2_P2A, PM_HBW_SR3_P2A,
                  PM_HBW_DA_A2P, PM_HBW_SR2_A2P, PM_HBW_SR3_A2P, dec=6*S

FILEO MATO[2] = "{SCENARIO_DIR}\output\HBW_MD_TEM.MAT",
  MO=41-46, NAME= MD_HBW_DA_P2A, MD_HBW_SR2_P2A, MD_HBW_SR3_P2A,
                  MD_HBW_DA_A2P, MD_HBW_SR2_A2P, MD_HBW_SR3_A2P, dec=6*S

FILEO MATO[1] = "{SCENARIO_DIR}\output\HBW_AM_TEM.MAT",
  MO=31-36, NAME= AM_HBW_DA_P2A, AM_HBW_SR2_P2A, AM_HBW_SR3_P2A,
                  AM_HBW_DA_A2P, AM_HBW_SR2_A2P, AM_HBW_SR3_A2P, dec=6*S

FILEI MATI[1] = "{SCENARIO_DIR}\output\HBW_{alt}{year}.MAT"

PAR ZONEMSG=100

FILLMW MW[1]=MI.1.1,2,3                 ;1/2/3: HBW-DA,SR2,SR3
;FILLMW MW[11]=MI.2.1,2,3                ;11/12/13: HBNW-DA,SR2,SR3   
;FILLMW MW[21]=MI.3.1,2,3                ;21/22/23: NHB-DA,SR2,SR3  

FILLMW MW[101]=MI.1.1.T,2.T,3.T         ;101/102/103: HBW-DA,SR2,SR3-Transposeed
;FILLMW MW[111]=MI.2.1.T,2.T,3.T         ;111/112/113: HBNW-DA,SR2,SR3-Transposed   
;FILLMW MW[121]=MI.3.1.T,2.T,3.T         ;121/122/123: NHB-DA,SR2,SR3-Transposed  


HBW_NT_Frac=1-({HBW_AM_Frac}+{HBW_MD_Frac}+{HBW_PM_Frac})
;HBNW_NT_Frac=1-({HBNW_AM_Frac}+{HBNW_MD_Frac}+{HBNW_PM_Frac})
;NHB_NT_Frac=1-({NHB_AM_Frac}+{NHB_MD_Frac}+{NHB_PM_Frac})


;AMPK-HBW: 31=DA_PA, 32=SR2_PA, 33=SR3_PA, 34=DA_AP, 35=SR2_AP, 36=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=30+K
  _KAP=33+K
  MW[_KPA]=MW[K]*{HBW_AM_Frac}*{HBW_AM_PA_Fac}
  MW[_KAP]=MW[KK]*{HBW_AM_Frac}*(1.0-{HBW_AM_PA_Fac})
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;MidDay-HBW: 41=DA_PA, 42=SR2_PA, 43=SR3_PA, 44=DA_AP, 45=SR2_AP, 46=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=40+K
  _KAP=43+K
  MW[_KPA]=MW[K]*{HBW_MD_Frac}*{HBW_MD_PA_Fac}
  MW[_KAP]=MW[KK]*{HBW_MD_Frac}*(1.0-{HBW_MD_PA_Fac})
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;PMPK-HBW: 51=DA_PA, 52=SR2_PA, 53=SR3_PA, 54=DA_AP, 55=SR2_AP, 56=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=50+K
  _KAP=53+K
  MW[_KPA]=MW[K]*{HBW_PM_Frac}*{HBW_PM_PA_Fac}
  MW[_KAP]=MW[KK]*{HBW_PM_Frac}*(1.0-{HBW_PM_PA_Fac})
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;OverNight-HBW: 61=DA_PA, 62=SR2_PA, 63=SR3_PA, 64=DA_AP, 65=SR2_AP, 66=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=60+K
  _KAP=63+K
  MW[_KPA]=MW[K]*HBW_NT_Frac*{HBW_NT_PA_Fac}
  MW[_KAP]=MW[KK]*HBW_NT_Frac*(1.0-{HBW_NT_PA_Fac})
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP





ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00C.PRN" MSG='Create HBNW Period Hwy Pax TT by Mode/Dir'
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEO MATO[4] = "{SCENARIO_DIR}\output\HBNW_NT_TEM.MAT",
  MO=61-66, NAME= NT_HBNW_DA_P2A, NT_HBNW_SR2_P2A, NT_HBNW_SR3_P2A,
                  NT_HBNW_DA_A2P, NT_HBNW_SR2_A2P, NT_HBNW_SR3_A2P, dec=6*S

FILEO MATO[3] = "{SCENARIO_DIR}\output\HBNW_PM_TEM.MAT",
  MO=51-56, NAME= PM_HBNW_DA_P2A, PM_HBNW_SR2_P2A, PM_HBNW_SR3_P2A,
                  PM_HBNW_DA_A2P, PM_HBNW_SR2_A2P, PM_HBNW_SR3_A2P, dec=6*S

FILEO MATO[2] = "{SCENARIO_DIR}\output\HBNW_MD_TEM.MAT",
  MO=41-46, NAME= MD_HBNW_DA_P2A, MD_HBNW_SR2_P2A, MD_HBNW_SR3_P2A,
                  MD_HBNW_DA_A2P, MD_HBNW_SR2_A2P, MD_HBNW_SR3_A2P, dec=6*S

FILEO MATO[1] = "{SCENARIO_DIR}\output\HBNW_AM_TEM.MAT",
  MO=31-36, NAME= AM_HBNW_DA_P2A, AM_HBNW_SR2_P2A, AM_HBNW_SR3_P2A,
                  AM_HBNW_DA_A2P, AM_HBNW_SR2_A2P, AM_HBNW_SR3_A2P, dec=6*S

FILEI MATI[1] = "{SCENARIO_DIR}\output\HBNW_{alt}{year}.MAT"

PAR ZONEMSG=100

FILLMW MW[1]=MI.1.1,2,3                 ;1/2/3: HBNW-DA,SR2,SR3

FILLMW MW[101]=MI.1.1.T,2.T,3.T         ;101/102/103: HBNW-DA,SR2,SR3-Transposed


HBNW_NT_Frac=1-({HBNW_AM_Frac}+{HBNW_MD_Frac}+{HBNW_PM_Frac})


;AMPK-HBNW: 31=DA_PA, 32=SR2_PA, 33=SR3_PA, 34=DA_AP, 35=SR2_AP, 36=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=30+K
  _KAP=33+K
  MW[_KPA]=MW[K]*{HBNW_AM_Frac}*{HBNW_AM_PA_Fac}
  MW[_KAP]=MW[KK]*{HBNW_AM_Frac}*(1.0-{HBNW_AM_PA_Fac})
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;MidDay-HBNW: 41=DA_PA, 42=SR2_PA, 43=SR3_PA, 44=DA_AP, 45=SR2_AP, 46=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=40+K
  _KAP=43+K
  MW[_KPA]=MW[K]*{HBNW_MD_Frac}*{HBNW_MD_PA_Fac}
  MW[_KAP]=MW[KK]*{HBNW_MD_Frac}*(1.0-{HBNW_MD_PA_Fac})
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;PMPK-HBNW: 51=DA_PA, 52=SR2_PA, 53=SR3_PA, 54=DA_AP, 55=SR2_AP, 56=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=50+K
  _KAP=53+K
  MW[_KPA]=MW[K]*{HBNW_PM_Frac}*{HBNW_PM_PA_Fac}
  MW[_KAP]=MW[KK]*{HBNW_PM_Frac}*(1.0-{HBNW_PM_PA_Fac})
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;OverNight-HBNW: 61=DA_PA, 62=SR2_PA, 63=SR3_PA, 64=DA_AP, 65=SR2_AP, 66=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=60+K
  _KAP=63+K
  MW[_KPA]=MW[K]*HBNW_NT_Frac*{HBNW_NT_PA_Fac}
  MW[_KAP]=MW[KK]*HBNW_NT_Frac*(1.0-{HBNW_NT_PA_Fac})
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP





ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00D.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00D.PRN" MSG='Create NHB Period Hwy Pax TT by Mode/Dir'
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEO MATO[4] = "{SCENARIO_DIR}\output\NHB_NT_TEM.MAT",
  MO=61-66, NAME= NT_NHB_DA_P2A, NT_NHB_SR2_P2A, NT_NHB_SR3_P2A,
                  NT_NHB_DA_A2P, NT_NHB_SR2_A2P, NT_NHB_SR3_A2P, dec=6*S

FILEO MATO[3] = "{SCENARIO_DIR}\output\NHB_PM_TEM.MAT",
  MO=51-56, NAME= PM_NHB_DA_P2A, PM_NHB_SR2_P2A, PM_NHB_SR3_P2A,
                  PM_NHB_DA_A2P, PM_NHB_SR2_A2P, PM_NHB_SR3_A2P, dec=6*S

FILEO MATO[2] = "{SCENARIO_DIR}\output\NHB_MD_TEM.MAT",
  MO=41-46, NAME= MD_NHB_DA_P2A, MD_NHB_SR2_P2A, MD_NHB_SR3_P2A,
                  MD_NHB_DA_A2P, MD_NHB_SR2_A2P, MD_NHB_SR3_A2P, dec=6*S

FILEO MATO[1] = "{SCENARIO_DIR}\output\NHB_AM_TEM.MAT",
  MO=31-36, NAME= AM_NHB_DA_P2A, AM_NHB_SR2_P2A, AM_NHB_SR3_P2A,
                  AM_NHB_DA_A2P, AM_NHB_SR2_A2P, AM_NHB_SR3_A2P, dec=6*S

FILEI MATI[1] = "{SCENARIO_DIR}\output\NHB_{alt}{year}.MAT"

PAR ZONEMSG=100

FILLMW MW[1]=MI.1.1,2,3                 ;1/2/3: NHB-DA,SR2,SR3

FILLMW MW[101]=MI.1.1.T,2.T,3.T         ;101/102/103: NHB-DA,SR2,SR3-Transposed


NHB_NT_Frac=1-({NHB_AM_Frac}+{NHB_MD_Frac}+{NHB_PM_Frac})


;AMPK-NHB: 31=DA_PA, 32=SR2_PA, 33=SR3_PA, 34=DA_AP, 35=SR2_AP, 36=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=30+K
  _KAP=33+K
  MW[_KPA]=MW[K]*{NHB_AM_Frac}*0.5
  MW[_KAP]=MW[KK]*{NHB_AM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;MidDay-NHB: 41=DA_PA, 42=SR2_PA, 43=SR3_PA, 44=DA_AP, 45=SR2_AP, 46=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=40+K
  _KAP=43+K
  MW[_KPA]=MW[K]*{NHB_MD_Frac}*0.5
  MW[_KAP]=MW[KK]*{NHB_MD_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;PMPK-NHB: 51=DA_PA, 52=SR2_PA, 53=SR3_PA, 54=DA_AP, 55=SR2_AP, 56=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=50+K
  _KAP=53+K
  MW[_KPA]=MW[K]*{NHB_PM_Frac}*0.5
  MW[_KAP]=MW[KK]*{NHB_PM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;OverNight-NHB: 61=DA_PA, 62=SR2_PA, 63=SR3_PA, 64=DA_AP, 65=SR2_AP, 66=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=60+K
  _KAP=63+K
  MW[_KPA]=MW[K]*NHB_NT_Frac*0.5
  MW[_KAP]=MW[KK]*NHB_NT_Frac*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP





ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00E.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00E.PRN" MSG='Create IECar Period Hwy Veh TT by Mode/Dir'
FILEI MATI[1] = "{SCENARIO_DIR}\output\VTRIP1.mat"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEO MATO[4] = "{SCENARIO_DIR}\output\IECar_NT_TEM.MAT",
  MO=61-66, NAME= NT_IECar_DA_P2A, NT_IECar_SR2_P2A, NT_IECar_SR3_P2A,
                  NT_IECar_DA_A2P, NT_IECar_SR2_A2P, NT_IECar_SR3_A2P, dec=6*S

FILEO MATO[3] = "{SCENARIO_DIR}\output\IECar_PM_TEM.MAT",
  MO=51-56, NAME= PM_IECar_DA_P2A, PM_IECar_SR2_P2A, PM_IECar_SR3_P2A,
                  PM_IECar_DA_A2P, PM_IECar_SR2_A2P, PM_IECar_SR3_A2P, dec=6*S

FILEO MATO[2] = "{SCENARIO_DIR}\output\IECar_MD_TEM.MAT",
  MO=41-46, NAME= MD_IECar_DA_P2A, MD_IECar_SR2_P2A, MD_IECar_SR3_P2A,
                  MD_IECar_DA_A2P, MD_IECAr_SR2_A2P, MD_IECAr_SR3_A2P, dec=6*S

FILEO MATO[1] = "{SCENARIO_DIR}\output\IECar_AM_TEM.MAT",
  MO=31-36, NAME= AM_IECar_DA_P2A, AM_IECar_SR2_P2A, AM_IECar_SR3_P2A,
                  AM_IECAr_DA_A2P, AM_IECar_SR2_A2P, AM_IECar_SR3_A2P, dec=6*S


PAR ZONEMSG=100

FILLMW MW[201]=MI.1.4,5               ;201/202: IE-SO,HO

FILLMW MW[301]=MI.1.4.T,5.T           ;301/302: IE-SO,HO -Transposed


MW[1]=MW[201]                           ; IECarVeh - DA
MW[2]=MW[202]*(1.0-{EXTHOV_SR3_Fac})    ; IECarVeh - SR2
MW[3]=MW[202]*{EXTHOV_SR3_Fac}          ; IECarVeh - SR3

MW[101]=MW[301]                           ; IECarVeh - DA - Transposed
MW[102]=MW[302]*(1.0-{EXTHOV_SR3_Fac})    ; IECarVeh - SR2 - Transposed
MW[103]=MW[302]*{EXTHOV_SR3_Fac}          ; IECarVeh - SR3 - Transposed

EXT_NT_Frac=1-({EXT_AM_Frac}+{EXT_MD_Frac}+{EXT_PM_Frac})

;AMPK-IECar: 31=DA_PA, 32=SR2_PA, 33=SR3_PA, 34=DA_AP, 35=SR2_AP, 36=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=30+K
  _KAP=33+K
  MW[_KPA]=MW[K]*{EXT_AM_Frac}*0.5
  MW[_KAP]=MW[KK]*{EXT_AM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;MidDay-IECar: 41=DA_PA, 42=SR2_PA, 43=SR3_PA, 44=DA_AP, 45=SR2_AP, 46=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=40+K
  _KAP=43+K
  MW[_KPA]=MW[K]*{EXT_MD_Frac}*0.5
  MW[_KAP]=MW[KK]*{EXT_MD_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;PMPK-IECar: 51=DA_PA, 52=SR2_PA, 53=SR3_PA, 54=DA_AP, 55=SR2_AP, 56=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=50+K
  _KAP=53+K
  MW[_KPA]=MW[K]*{EXT_PM_Frac}*0.5
  MW[_KAP]=MW[KK]*{EXT_PM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;OverNight-IECar: 61=DA_PA, 62=SR2_PA, 63=SR3_PA, 64=DA_AP, 65=SR2_AP, 66=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=60+K
  _KAP=63+K
  MW[_KPA]=MW[K]*EXT_NT_Frac*0.5
  MW[_KAP]=MW[KK]*EXT_NT_Frac*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00F.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00F.PRN" MSG='Create IETrk Period Hwy Veh TT by CLS (LD/HD)/Dir'
FILEI MATI[1] = "{SCENARIO_DIR}\output\VTRIP1.mat"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4


FILEO MATO[4] = "{SCENARIO_DIR}\output\IETrk_NT_TEM.MAT",
  MO=61-64, NAME= NT_IETrk_LD_P2A, NT_IETrk_HD_P2A,
                  NT_IETrk_LD_A2P, NT_IETrk_HD_A2P, dec=4*S

FILEO MATO[3] = "{SCENARIO_DIR}\output\IETrk_PM_TEM.MAT",
  MO=51-54, NAME= PM_IETrk_LD_P2A, PM_IETrk_HD_P2A,
                  PM_IETrk_LD_A2P, PM_IETrk_HD_A2P, dec=4*S


FILEO MATO[2] = "{SCENARIO_DIR}\output\IETrk_MD_TEM.MAT",
  MO=41-44, NAME= MD_IETrk_LD_P2A, MD_IETrk_HD_P2A,
                  MD_IETrk_LD_A2P, MD_IETrk_HD_A2P, dec=4*S


FILEO MATO[1] = "{SCENARIO_DIR}\output\IETrk_AM_TEM.MAT",
  MO=31-34, NAME= AM_IETrk_LD_P2A, AM_IETrk_HD_P2A,
                  AM_IETrk_LD_A2P, AM_IETrk_HD_A2P, dec=4*S

PAR ZONEMSG=100

FILLMW MW[1]=MI.1.6,7                 ;1/2: IETrk-LD,HD

FILLMW MW[101]=MI.1.6.T,7.T           ;101/102: IETrk-LD,HD -Transposed


LDTRK_NT_Frac=1-({LDTRK_AM_Frac}+{LDTRK_MD_Frac}+{LDTRK_PM_Frac})
HDTRK_NT_Frac=1-({HDTRK_AM_Frac}+{HDTRK_MD_Frac}+{HDTRK_PM_Frac})

;AMPK-IETrk: 31=LD_PA, 32=HD_PA, 33=LD_AP, 34=HD_AP
LOOP K=1,2
  KK=100+K 
  _KPA=30+K
  _KAP=32+K
  if (_KPA=31) MW[_KPA]=MW[K]*{LDTRK_AM_Frac}*0.5
  if (_KPA=32) MW[_KPA]=MW[K]*{HDTRK_AM_Frac}*0.5
  if (_KAP=33) MW[_KAP]=MW[KK]*{LDTRK_AM_Frac}*0.5
  if (_KAP=34) MW[_KAP]=MW[KK]*{HDTRK_AM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;MidDay-IETrk: 41=LD_PA, 42=HD_PA, 43=LD_AP, 44=HD_AP
LOOP K=1,2
  KK=100+K 
  _KPA=40+K
  _KAP=42+K
  if (_KPA=41) MW[_KPA]=MW[K]*{LDTRK_MD_Frac}*0.5
  if (_KPA=42) MW[_KPA]=MW[K]*{HDTRK_MD_Frac}*0.5
  if (_KAP=43) MW[_KAP]=MW[KK]*{LDTRK_MD_Frac}*0.5
  if (_KAP=44) MW[_KAP]=MW[KK]*{HDTRK_MD_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;PMPK-IETrk: 51=LD_PA, 52=HD_PA, 53=LD_AP, 54=HD_AP
LOOP K=1,2
  KK=100+K 
  _KPA=50+K
  _KAP=52+K
  if (_KPA=51) MW[_KPA]=MW[K]*{LDTRK_PM_Frac}*0.5
  if (_KPA=52) MW[_KPA]=MW[K]*{HDTRK_PM_Frac}*0.5
  if (_KAP=53) MW[_KAP]=MW[KK]*{LDTRK_PM_Frac}*0.5
  if (_KAP=54) MW[_KAP]=MW[KK]*{HDTRK_PM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;OverNight-IETrk: 61=LD_PA, 62=HD_PA, 63=LD_AP, 64=HD_AP
LOOP K=1,2
  KK=100+K 
  _KPA=60+K
  _KAP=62+K
  if (_KPA=61) MW[_KPA]=MW[K]*LDTRK_NT_Frac*0.5
  if (_KPA=62) MW[_KPA]=MW[K]*HDTRK_NT_Frac*0.5
  if (_KAP=63) MW[_KAP]=MW[KK]*LDTRK_NT_Frac*0.5
  if (_KAP=64) MW[_KAP]=MW[KK]*HDTRK_NT_Frac*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00G.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00G.PRN" MSG='Create InternalTrk Period Hwy Veh TT by CLS (LT/MT/HT)/Dir'
FILEI MATI[1] = "{SCENARIO_DIR}\output\VTRIP1.mat"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4


FILEO MATO[4] = "{SCENARIO_DIR}\output\IITrk_NT_TEM.MAT",
  MO=61-66, NAME= NT_IITRK_LT_P2A, NT_IITRK_MT_P2A, NT_IITRK_HT_P2A,
                  NT_IITRK_LT_A2P, NT_IITRK_MT_A2P, NT_IITRK_HT_A2P, dec=6*S

FILEO MATO[3] = "{SCENARIO_DIR}\output\IITrk_PM_TEM.MAT",
  MO=51-56, NAME= PM_IITRK_LT_P2A, PM_IITRK_MT_P2A, PM_IITRK_HT_P2A,
                  PM_IITRK_LT_A2P, PM_IITRK_MT_A2P, PM_IITRK_HT_A2P, dec=6*S


FILEO MATO[2] = "{SCENARIO_DIR}\output\IITrk_MD_TEM.MAT",
  MO=41-46, NAME= MD_IITRK_LT_P2A, MD_IITRK_MT_P2A, MD_IITRK_HT_P2A,
                  MD_IITRK_LT_A2P, MD_IITRK_MT_A2P, MD_IITRK_HT_A2P, dec=6*S

FILEO MATO[1] = "{SCENARIO_DIR}\output\IITrk_AM_TEM.MAT",
  MO=31-36, NAME= AM_IITRK_LT_P2A, AM_IITRK_MT_P2A, AM_IITRK_HT_P2A,
                  AM_IITRK_LT_A2P, AM_IITRK_MT_A2P, AM_IITRK_HT_A2P, dec=6*S

PAR ZONEMSG=100

FILLMW MW[1]=MI.1.1,2,3               ;1/2/3: IntTrk-LT-4Tire,MT-SU,HT-COMB

FILLMW MW[101]=MI.1.1.T,2.T,3.T       ;101/102/103: IntTrk-LT-4Tire,MT-SU,HT-COMB -Transposed


LDTRK_NT_Frac=1-({LDTRK_AM_Frac}+{LDTRK_MD_Frac}+{LDTRK_PM_Frac})
HDTRK_NT_Frac=1-({HDTRK_AM_Frac}+{HDTRK_MD_Frac}+{HDTRK_PM_Frac})

;AMPK-IITrk: 31=LT_PA, 32=MT_PA, 33=HT_PA, 34=LT_AP, 35=LT_AP, 36=HD_AP
LOOP K=1,3
  KK=100+K 
  _KPA=30+K
  _KAP=33+K
  if (_KPA=31,32) MW[_KPA]=MW[K]*{LDTRK_AM_Frac}*0.5
  if (_KPA=33)    MW[_KPA]=MW[K]*{HDTRK_AM_Frac}*0.5
  if (_KAP=34,35) MW[_KAP]=MW[KK]*{LDTRK_AM_Frac}*0.5
  if (_KAP=36)    MW[_KAP]=MW[KK]*{HDTRK_AM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;MidDay-IITrk: 41=LT_PA, 42=MT_PA, 43=HT_PA, 44=LT_AP, 45=LT_AP, 46=HD_AP
LOOP K=1,3
  KK=100+K 
  _KPA=40+K
  _KAP=43+K
  if (_KPA=41,42) MW[_KPA]=MW[K]*{LDTRK_MD_Frac}*0.5
  if (_KPA=43)    MW[_KPA]=MW[K]*{HDTRK_MD_Frac}*0.5
  if (_KAP=44,45) MW[_KAP]=MW[KK]*{LDTRK_MD_Frac}*0.5
  if (_KAP=46)    MW[_KAP]=MW[KK]*{HDTRK_MD_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;PMPK-IITrk: 51=LT_PA, 52=MT_PA, 53=HT_PA, 54=LT_AP, 55=LT_AP, 56=HD_AP
LOOP K=1,3
  KK=100+K 
  _KPA=50+K
  _KAP=53+K
  if (_KPA=51,52) MW[_KPA]=MW[K]*{LDTRK_PM_Frac}*0.5
  if (_KPA=53)    MW[_KPA]=MW[K]*{HDTRK_PM_Frac}*0.5
  if (_KAP=54,55) MW[_KAP]=MW[KK]*{LDTRK_PM_Frac}*0.5
  if (_KAP=56)    MW[_KAP]=MW[KK]*{HDTRK_PM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;OverNight-IITrk: 61=LT_PA, 62=MT_PA, 63=HT_PA, 64=LT_AP, 65=LT_AP, 66=HD_AP
LOOP K=1,3
  KK=100+K 
  _KPA=60+K
  _KAP=63+K
  if (_KPA=61,62) MW[_KPA]=MW[K]*LDTRK_NT_Frac*0.5
  if (_KPA=63)    MW[_KPA]=MW[K]*HDTRK_NT_Frac*0.5
  if (_KAP=64,65) MW[_KAP]=MW[KK]*LDTRK_NT_Frac*0.5
  if (_KAP=66)    MW[_KAP]=MW[KK]*HDTRK_NT_Frac*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00H.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00H.PRN" MSG='Create EECar Period Hwy Veh TT by Mode/Dir'
FILEI MATI[1] = "{SCENARIO_DIR}\output\EETRIPS.MAT"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4


FILEO MATO[4] = "{SCENARIO_DIR}\output\EECar_NT_TEM.MAT",
  MO=61-66, NAME= NT_EECar_DA_P2A, NT_EECar_SR2_P2A, NT_EECar_SR3_P2A,
                  NT_EECar_DA_A2P, NT_EECar_SR2_A2P, NT_EECar_SR3_A2P, dec=6*S

FILEO MATO[3] = "{SCENARIO_DIR}\output\EECar_PM_TEM.MAT",
  MO=51-56, NAME= PM_EECar_DA_P2A, PM_EECar_SR2_P2A, PM_EECar_SR3_P2A,
                  PM_EECar_DA_A2P, PM_EECar_SR2_A2P, PM_EECar_SR3_A2P, dec=6*S

FILEO MATO[2] = "{SCENARIO_DIR}\output\EECar_MD_TEM.MAT",
  MO=41-46, NAME= MD_EECar_DA_P2A, MD_EECar_SR2_P2A, MD_EECar_SR3_P2A,
                  MD_EECar_DA_A2P, MD_EECAr_SR2_A2P, MD_EECAr_SR3_A2P, dec=6*S

FILEO MATO[1] = "{SCENARIO_DIR}\output\EECar_AM_TEM.MAT",
  MO=31-36, NAME= AM_EECar_DA_P2A, AM_EECar_SR2_P2A, AM_EECar_SR3_P2A,
                  AM_EECAr_DA_A2P, AM_EECar_SR2_A2P, AM_EECar_SR3_A2P, dec=6*S


PAR ZONEMSG=100

FILLMW MW[201]=MI.1.1,2               ;201/202: EE-SO,HO

FILLMW MW[301]=MI.1.1.T,2.T           ;301/302: EE-SO,HO -Transposed


MW[1]=MW[201]                           ; EECarVeh - DA
MW[2]=MW[202]*(1.0-{EXTHOV_SR3_Fac})    ; EECarVeh - SR2
MW[3]=MW[202]*{EXTHOV_SR3_Fac}          ; EECarVeh - SR3

MW[101]=MW[301]                           ; EECarVeh - DA - Transposed
MW[102]=MW[302]*(1.0-{EXTHOV_SR3_Fac})    ; EECarVeh - SR2 - Transposed
MW[103]=MW[302]*{EXTHOV_SR3_Fac}          ; EECarVeh - SR3 - Transposed

EXT_NT_Frac=1-({EXT_AM_Frac}+{EXT_MD_Frac}+{EXT_PM_Frac})

;AMPK-EECar: 31=DA_PA, 32=SR2_PA, 33=SR3_PA, 34=DA_AP, 35=SR2_AP, 36=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=30+K
  _KAP=33+K
  MW[_KPA]=MW[K]*{EXT_AM_Frac}*0.5
  MW[_KAP]=MW[KK]*{EXT_AM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;MidDay-EECar: 41=DA_PA, 42=SR2_PA, 43=SR3_PA, 44=DA_AP, 45=SR2_AP, 46=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=40+K
  _KAP=43+K
  MW[_KPA]=MW[K]*{EXT_MD_Frac}*0.5
  MW[_KAP]=MW[KK]*{EXT_MD_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;PMPK-EECar: 51=DA_PA, 52=SR2_PA, 53=SR3_PA, 54=DA_AP, 55=SR2_AP, 56=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=50+K
  _KAP=53+K
  MW[_KPA]=MW[K]*{EXT_PM_Frac}*0.5
  MW[_KAP]=MW[KK]*{EXT_PM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;OverNight-EECar: 61=DA_PA, 62=SR2_PA, 63=SR3_PA, 64=DA_AP, 65=SR2_AP, 66=SR3_AP
LOOP K=1,3
  KK=100+K 
  _KPA=60+K
  _KAP=63+K
  MW[_KPA]=MW[K]*EXT_NT_Frac*0.5
  MW[_KAP]=MW[KK]*EXT_NT_Frac*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00I.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00I.PRN" MSG='Create EETrk Period Hwy Veh TT by CLS (LD/HD)/Dir'
FILEI MATI[1] = "{SCENARIO_DIR}\output\EETRIPS.MAT"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4


FILEO MATO[4] = "{SCENARIO_DIR}\output\EETrk_NT_TEM.MAT",
  MO=61-64, NAME= NT_EETrk_LD_P2A, NT_EETrk_HD_P2A,
                  NT_EETrk_LD_A2P, NT_EETrk_HD_A2P, dec=4*S

FILEO MATO[3] = "{SCENARIO_DIR}\output\EETrk_PM_TEM.MAT",
  MO=51-54, NAME= PM_EETrk_LD_P2A, PM_EETrk_HD_P2A,
                  PM_EETrk_LD_A2P, PM_EETrk_HD_A2P, dec=4*S


FILEO MATO[2] = "{SCENARIO_DIR}\output\EETrk_MD_TEM.MAT",
  MO=41-44, NAME= MD_EETrk_LD_P2A, MD_EETrk_HD_P2A,
                  MD_EETrk_LD_A2P, MD_EETrk_HD_A2P, dec=4*S


FILEO MATO[1] = "{SCENARIO_DIR}\output\EETrk_AM_TEM.MAT",
  MO=31-34, NAME= AM_EETrk_LD_P2A, AM_EETrk_HD_P2A,
                  AM_EETrk_LD_A2P, AM_EETrk_HD_A2P, dec=4*S

PAR ZONEMSG=100

FILLMW MW[1]=MI.1.3,4                 ;1/2: EETrk-LD,HD

FILLMW MW[101]=MI.1.3.T,4.T           ;101/102: EETrk-LD,HD -Transposed


LDTRK_NT_Frac=1-({LDTRK_AM_Frac}+{LDTRK_MD_Frac}+{LDTRK_PM_Frac})
HDTRK_NT_Frac=1-({HDTRK_AM_Frac}+{HDTRK_MD_Frac}+{HDTRK_PM_Frac})

;AMPK-EETrk: 31=LD_PA, 32=HD_PA, 33=LD_AP, 34=HD_AP
LOOP K=1,2
  KK=100+K 
  _KPA=30+K
  _KAP=32+K
  if (_KPA=31) MW[_KPA]=MW[K]*{LDTRK_AM_Frac}*0.5
  if (_KPA=32) MW[_KPA]=MW[K]*{HDTRK_AM_Frac}*0.5
  if (_KAP=33) MW[_KAP]=MW[KK]*{LDTRK_AM_Frac}*0.5
  if (_KAP=34) MW[_KAP]=MW[KK]*{HDTRK_AM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;MidDay-EETrk: 41=LD_PA, 42=HD_PA, 43=LD_AP, 44=HD_AP
LOOP K=1,2
  KK=100+K 
  _KPA=40+K
  _KAP=42+K
  if (_KPA=41) MW[_KPA]=MW[K]*{LDTRK_MD_Frac}*0.5
  if (_KPA=42) MW[_KPA]=MW[K]*{HDTRK_MD_Frac}*0.5
  if (_KAP=43) MW[_KAP]=MW[KK]*{LDTRK_MD_Frac}*0.5
  if (_KAP=44) MW[_KAP]=MW[KK]*{HDTRK_MD_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;PMPK-EETrk: 51=LD_PA, 52=HD_PA, 53=LD_AP, 54=HD_AP
LOOP K=1,2
  KK=100+K 
  _KPA=50+K
  _KAP=52+K
  if (_KPA=51) MW[_KPA]=MW[K]*{LDTRK_PM_Frac}*0.5
  if (_KPA=52) MW[_KPA]=MW[K]*{HDTRK_PM_Frac}*0.5
  if (_KAP=53) MW[_KAP]=MW[KK]*{LDTRK_PM_Frac}*0.5
  if (_KAP=54) MW[_KAP]=MW[KK]*{HDTRK_PM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;OverNight-EETrk: 61=LD_PA, 62=HD_PA, 63=LD_AP, 64=HD_AP
LOOP K=1,2
  KK=100+K 
  _KPA=60+K
  _KAP=62+K
  if (_KPA=61) MW[_KPA]=MW[K]*LDTRK_NT_Frac*0.5
  if (_KPA=62) MW[_KPA]=MW[K]*HDTRK_NT_Frac*0.5
  if (_KAP=63) MW[_KAP]=MW[KK]*LDTRK_NT_Frac*0.5
  if (_KAP=64) MW[_KAP]=MW[KK]*HDTRK_NT_Frac*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00K.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00K.PRN" MSG='Create JaxPortTrk Period Hwy Veh TT by Direction'
FILEI MATI[1] = "{SCENARIO_DIR}\output\PORT_TRK_24H_10.mat"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4


FILEO MATO[4] = "{SCENARIO_DIR}\output\JaxPrtTrk_NT_TEM.MAT",
  MO=61-62, NAME= NT_JPRTTrk_P2A, NT_JPRTTrk_A2P, dec=2*S

FILEO MATO[3] = "{SCENARIO_DIR}\output\JaxPrtTrk_PM_TEM.MAT",
  MO=51-52, NAME= PM_JPRTTrk_P2A, PM_JPRTTrk_A2P, dec=2*S

FILEO MATO[2] = "{SCENARIO_DIR}\output\JaxPrtTrk_MD_TEM.MAT",
 MO=41-42, NAME= MD_JPRTTrk_P2A, MD_JPRTTrk_A2P, dec=2*S

FILEO MATO[1] = "{SCENARIO_DIR}\output\JaxPrtTrk_AM_TEM.MAT",
   MO=31-32, NAME= AM_JPRTTrk_P2A, AM_JPRTTrk_A2P, dec=2*S


PAR ZONEMSG=100

FILLMW MW[1]=MI.1.1               ;1: JPRTTrk

FILLMW MW[101]=MI.1.1.T           ;101: JPRTTrk-Transposed


HDTRK_NT_Frac=1-({HDTRK_AM_Frac}+{HDTRK_MD_Frac}+{HDTRK_PM_Frac})

;AMPK-JPRTTrk: 31=JPrtTrk_PA, 32=JPrtTrk_AP
LOOP K=1
  KK=100+K 
  _KPA=30+K
  _KAP=31+K
  if (_KPA=31) MW[_KPA]=MW[K]*{HDTRK_AM_Frac}*0.5
  if (_KAP=32) MW[_KAP]=MW[KK]*{HDTRK_AM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP

;MidDay-JPRTTrk: 41=JPrtTrk_PA, 42=JPrtTrk_AP
LOOP K=1
  KK=100+K 
  _KPA=40+K
  _KAP=41+K
  if (_KPA=41) MW[_KPA]=MW[K]*{HDTRK_MD_Frac}*0.5
  if (_KAP=42) MW[_KAP]=MW[KK]*{HDTRK_MD_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;PMPK-JPRTTrk: 51=JPrtTrk_PA, 52=JPrtTrk_AP
LOOP K=1
  KK=100+K 
  _KPA=50+K
  _KAP=51+K
  if (_KPA=51) MW[_KPA]=MW[K]*{HDTRK_PM_Frac}*0.5
  if (_KAP=52) MW[_KAP]=MW[KK]*{HDTRK_PM_Frac}*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


;OverNight-JPRTTrk: 61=JPrtTrk_PA, 62=JPrtTrk_AP
LOOP K=1
  KK=100+K 
  _KPA=60+K
  _KAP=61+K
  if (_KPA=61) MW[_KPA]=MW[K]*HDTRK_NT_Frac*0.5
  if (_KAP=62) MW[_KAP]=MW[KK]*HDTRK_NT_Frac*0.5
  JLOOP
    if (MW[_KPA]<0.0) MW[_KPA]=0.0  
    if (MW[_KAP]<0.0) MW[_KAP]=0.0
  ENDJLOOP
ENDLOOP


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00L.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00L.PRN" MSG='Combine HWY trip tables - AM Period'
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI MATI[10] = "{SCENARIO_DIR}\output\JaxPrtTrk_AM_TEM.MAT"
FILEI MATI[8] = "{SCENARIO_DIR}\output\EETrk_AM_TEM.MAT"
FILEI MATI[7] = "{SCENARIO_DIR}\output\EECar_AM_TEM.MAT"
FILEI MATI[6] = "{SCENARIO_DIR}\output\IITrk_AM_TEM.MAT"
FILEI MATI[5] = "{SCENARIO_DIR}\output\IETrk_AM_TEM.MAT"
FILEI MATI[4] = "{SCENARIO_DIR}\output\IECar_AM_TEM.MAT"
FILEI MATI[3] = "{SCENARIO_DIR}\output\NHB_AM_TEM.MAT"
FILEI MATI[2] = "{SCENARIO_DIR}\output\HBNW_AM_TEM.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\output\HBW_AM_TEM.MAT"

FILEO MATO[1] = "{SCENARIO_DIR}\output\HWYTTAB_AM_{alt}{year}.MAT",
 MO=121-130, NAME=AM_DA_IEII,AM_SR2_IEII,AM_SR3_IEII,AM_TRK_IEII,AM_TRK_EE,
                  AM_DA_EE,AM_SR2_EE,AM_SR3_EE,AM_PortTrk,AM_Total, DEC=10*s

FILEO MATO[2] = "{SCENARIO_DIR}\output\HWYTTBP_AM_{alt}{year}.MAT",
 MO=211-213,221-223,231-233, NAME=AM_HBW_DA,AM_HBW_SR2,AM_HBW_SR3P,
                                  AM_HBO_DA,AM_HBO_SR2,AM_HBO_SR3P,
                                  AM_NHB_DA,AM_NHB_SR2,AM_NHB_SR3P, DEC=9*s


PAR ZONEMSG=100

FILLMW MW[11]  = MI.1.1,2,3,4,5,6   ;HBW:     11/12/13-DA_P2A,SR2_P2A,SR3_P2A |14/15/16-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[21]  = MI.2.1,2,3,4,5,6   ;HBNW:    21/22/23-DA_P2A,SR2_P2A,SR3_P2A |24/25/26-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[31]  = MI.3.1,2,3,4,5,6   ;NHB:     31/32/33-DA_P2A,SR2_P2A,SR3_P2A |34/35/36-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[41]  = MI.4.1,2,3,4,5,6   ;IE-Cars: 41/42/43-DA_P2A,SR2_P2A,SR3_P2A |44/45/46-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[51]  = MI.5.1,2,3,4       ;IE-Trks: 51/52   -LD_P2A,HD_P2A          |53/54   -LD_A2P,HD_A2P
FILLMW MW[61]  = MI.6.1,2,3,4,5,6   ;II-Trks: 61/62/63-LT_P2A,MT_P2A,HT_P2A   |64/65/66-LT_A2P,MT_A2P,HT_A2P
FILLMW MW[71]  = MI.7.1,2,3,4,5,6   ;EE-Cars: 71/72/73-DA_P2A,SR2_P2A,SR3_P2A |74/75/76-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[81]  = MI.8.1,2,3,4       ;EE-Trks: 81/82   -LD_P2A,HD_P2A          |83/84   -LD_A2P,HD_A2P
;FILLMW MW[91]  = MI.9.1,2,3,4,5,6   ;TRN-DRV: 91/92/93-DA_P2A,SR2_P2A,SR3_P2A |94/95/96-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[98]  = MI.10.1,2          ;JaxPort-FreightTrucks: 98-JPRTTrk_P2A    |99      -JPRTTrk_A2P

MW[91] = 0
MW[92] = 0
MW[93] = 0
MW[94] = 0
MW[95] = 0
MW[96] = 0


; DRIVE ALONE
MW[101]=(MW[11] + MW[21] + MW[31] + MW[41] +  MW[91]) +
        (MW[14] + MW[24] + MW[34] + MW[44] +  MW[94]) 

; AUTO 2 (SR2)
MW[102]=((MW[12] + MW[22] + MW[32] +  MW[92]) +
         (MW[15] + MW[25] + MW[35] +  MW[95]))/2 

; AUTO 3+ (SR3+)
MW[103]=((MW[13] + MW[93]) +(MW[16] + MW[96]))/{OC3VHBW} +        ;HBW & Transit-AutoAccess
        (MW[23] + MW[26])/{OC3VHBNW} +                            ;HBNW
        (MW[33] + MW[36])/{OC3VNHB}                               ;NHB

; SR2_IE
MW[104]= MW[42]+
         MW[45] 

; SR3_IE
MW[105]= MW[43]+
         MW[46] 

; II/IE TRK
MW[106]= (MW[61] + MW[62] + MW[63] + MW[51] +  MW[52]) +
         (MW[64] + MW[65] + MW[66] + MW[53] +  MW[54]) 

; EE TRUCK
MW[107]= (MW[81] + MW[82])+
         (MW[83] + MW[84]) 

; EE SOV/DA
MW[108]= MW[71] +
         MW[74]

; EE SR2
MW[109]= MW[72]+
         MW[75] 

; EE SR3
MW[110]= MW[73]+
         MW[76] 

; JaxPort Freight TRUCK
MW[111]= MW[98] +
         MW[99]

; FINAL TABLE ORDERING FOR Period HIGHWAY Assignnment
MW[121]=MW[101]              ;DA_IEII
MW[122]=MW[102]+MW[104]      ;SR2_IEII
MW[123]=MW[103]+MW[105]      ;SR3_IEII
MW[124]=MW[106]                        ;TRK_IEII
MW[125]=MW[107]                        ;TRK_EE
MW[126]=MW[108]                        ;DA_EE
MW[127]=MW[109]                        ;SR2_EE
MW[128]=MW[110]                        ;SR3_EE
MW[129]=MW[111]                        ;JaxPortTrk

LOOP K=121,129
  MW[130]=MW[130]+MW[K]                ;TotVeh for Period XX
ENDLOOP

;==============Purpose Specific Matrices by Mode=====================

;HBW DA Trips (vehicles)
MW[211]=(MW[11]+(MW[14]+MW[41]+ MW[44]+MW[91])+MW[94])     ;PtoA + AtoP Trips - HBW & IE & TranDRV
;HBO DA Trips (vehicles)
MW[221]=(MW[21] + MW[24])                                  ;PtoA + AtoP Trips - HBO
;NHB DA Trips (vehicles)
MW[231]=(MW[31] + MW[34])                                  ;PtoA + AtoP Trips - NHB
    
;HBW SR2 Trips (vehicles)
MW[212]=((MW[12]+MW[15]+MW[92]+MW[95])/2)+(MW[42]+ MW[45]) ;PtoA + AtoP Trips - HBW  & TranDRV & IE
;HBO SR2 Trips (vehicles)
MW[222]=(MW[22]+MW[25])/2                                  ;PtoA + AtoP Trips - HBO
;NHB SR2 Trips (vehicles)
MW[232]=(MW[32]+MW[35])/2                                  ;PtoA + AtoP Trips - NHB

;HBW SR3+ Trips (vehicles)
MW[213]=((MW[13]+MW[16]+MW[93]+MW[96])/{OC3VHBW})+(MW[43]+ MW[46]) ;PtoA + AtoP Trips - HBW  & TranDRV & IE
;HBO SR3+ Trips (vehicles)
MW[223]=(MW[23]+MW[26])/{OC3VHBNW}                                 ;PtoA + AtoP Trips - HBO
;NHB SR3+ Trips (vehicles)
MW[233]=(MW[33]+MW[36])/{OC3VNHB}                                  ;PtoA + AtoP Trips - NHB


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00M.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00M.PRN" MSG='Combine HWY trip tables - Mid-Day Period'
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI MATI[10] = "{SCENARIO_DIR}\output\JaxPrtTrk_MD_TEM.MAT"
FILEI MATI[8] = "{SCENARIO_DIR}\output\EETrk_MD_TEM.MAT"
FILEI MATI[7] = "{SCENARIO_DIR}\output\EECar_MD_TEM.MAT"
FILEI MATI[6] = "{SCENARIO_DIR}\output\IITrk_MD_TEM.MAT"
FILEI MATI[5] = "{SCENARIO_DIR}\output\IETrk_MD_TEM.MAT"
FILEI MATI[4] = "{SCENARIO_DIR}\output\IECar_MD_TEM.MAT"
FILEI MATI[3] = "{SCENARIO_DIR}\output\NHB_MD_TEM.MAT"
FILEI MATI[2] = "{SCENARIO_DIR}\output\HBNW_MD_TEM.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\output\HBW_MD_TEM.MAT"

FILEO MATO[1] = "{SCENARIO_DIR}\output\HWYTTAB_MD_{alt}{year}.MAT",
 MO=121-130, NAME=MD_DA_IEII,MD_SR2_IEII,MD_SR3_IEII,MD_TRK_IEII,MD_TRK_EE,
                  MD_DA_EE,MD_SR2_EE,MD_SR3_EE,MD_PortTrk,MD_Total, DEC=10*s

FILEO MATO[2] = "{SCENARIO_DIR}\output\HWYTTBP_MD_{alt}{year}.MAT",
 MO=211-213,221-223,231-233, NAME=MD_HBW_DA,MD_HBW_SR2,MD_HBW_SR3P,
                                  MD_HBO_DA,MD_HBO_SR2,MD_HBO_SR3P,
                                  MD_NHB_DA,MD_NHB_SR2,MD_NHB_SR3P, DEC=9*s



PAR ZONEMSG=100

FILLMW MW[11]  = MI.1.1,2,3,4,5,6   ;HBW:     11/12/13-DA_P2A,SR2_P2A,SR3_P2A |14/15/16-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[21]  = MI.2.1,2,3,4,5,6   ;HBNW:    21/22/23-DA_P2A,SR2_P2A,SR3_P2A |24/25/26-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[31]  = MI.3.1,2,3,4,5,6   ;NHB:     31/32/33-DA_P2A,SR2_P2A,SR3_P2A |34/35/36-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[41]  = MI.4.1,2,3,4,5,6   ;IE-Cars: 41/42/43-DA_P2A,SR2_P2A,SR3_P2A |44/45/46-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[51]  = MI.5.1,2,3,4       ;IE-Trks: 51/52   -LD_P2A,HD_P2A          |53/54   -LD_A2P,HD_A2P
FILLMW MW[61]  = MI.6.1,2,3,4,5,6   ;II-Trks: 61/62/63-LT_P2A,MT_P2A,HT_P2A   |64/65/66-LT_A2P,MT_A2P,HT_A2P
FILLMW MW[71]  = MI.7.1,2,3,4,5,6   ;EE-Cars: 71/72/73-DA_P2A,SR2_P2A,SR3_P2A |74/75/76-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[81]  = MI.8.1,2,3,4       ;EE-Trks: 81/82   -LD_P2A,HD_P2A          |83/84   -LD_A2P,HD_A2P
; FILLMW MW[91]  = MI.9.1,2,3,4,5,6   ;TRN-DRV: 91/92/93-DA_P2A,SR2_P2A,SR3_P2A |94/95/96-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[98]  = MI.10.1,2          ;JaxPort-FreightTrucks: 98-JPRTTrk_P2A    |99      -JPRTTrk_A2P

MW[91] = 0
MW[92] = 0
MW[93] = 0
MW[94] = 0
MW[95] = 0
MW[96] = 0


; DRIVE ALONE
MW[101]=(MW[11] + MW[21] + MW[31] + MW[41] +  MW[91]) +
        (MW[14] + MW[24] + MW[34] + MW[44] +  MW[94]) 

; AUTO 2 (SR2)
MW[102]=((MW[12] + MW[22] + MW[32] +  MW[92]) +
         (MW[15] + MW[25] + MW[35] +  MW[95]))/2 

; AUTO 3+ (SR3+)
MW[103]=((MW[13] + MW[93]) +(MW[16] + MW[96]))/{OC3VHBW} +        ;HBW & Transit-AutoAccess
        (MW[23] + MW[26])/{OC3VHBNW} +                            ;HBNW
        (MW[33] + MW[36])/{OC3VNHB}                               ;NHB

; SR2_IE
MW[104]= MW[42]+
         MW[45] 

; SR3_IE
MW[105]= MW[43]+
         MW[46] 

; II/IE TRK
MW[106]= (MW[61] + MW[62] + MW[63] + MW[51] +  MW[52]) +
         (MW[64] + MW[65] + MW[66] + MW[53] +  MW[54]) 

; EE TRUCK
MW[107]= (MW[81] + MW[82])+
         (MW[83] + MW[84]) 

; EE SOV/DA
MW[108]= MW[71] +
         MW[74]

; EE SR2
MW[109]= MW[72]+
         MW[75] 

; EE SR3
MW[110]= MW[73]+
         MW[76] 

; JaxPort Freight TRUCK
MW[111]= MW[98] +
         MW[99]

; FINAL TABLE ORDERING FOR Period HIGHWAY Assignnment
MW[121]=MW[101]              ;DA_IEII
MW[122]=MW[102]+MW[104]      ;SR2_IEII
MW[123]=MW[103]+MW[105]      ;SR3_IEII
MW[124]=MW[106]                        ;TRK_IEII
MW[125]=MW[107]                        ;TRK_EE
MW[126]=MW[108]                        ;DA_EE
MW[127]=MW[109]                        ;SR2_EE
MW[128]=MW[110]                        ;SR3_EE
MW[129]=MW[111]                        ;JaxPortTrk

LOOP K=121,129
  MW[130]=MW[130]+MW[K]                ;TotVeh for Period XX
ENDLOOP

;==============Purpose Specific Matrices by Mode=====================

;HBW DA Trips (vehicles)
MW[211]=(MW[11]+(MW[14]+MW[41]+ MW[44]+MW[91])+MW[94])     ;PtoA + AtoP Trips - HBW & IE & TranDRV
;HBO DA Trips (vehicles)
MW[221]=(MW[21] + MW[24])                                  ;PtoA + AtoP Trips - HBO
;NHB DA Trips (vehicles)
MW[231]=(MW[31] + MW[34])                                  ;PtoA + AtoP Trips - NHB
 
;HBW SR2 Trips (vehicles)
MW[212]=((MW[12]+MW[15]+MW[92]+MW[95])/2)+(MW[42]+ MW[45]) ;PtoA + AtoP Trips - HBW  & TranDRV & IE
;HBO SR2 Trips (vehicles)
MW[222]=(MW[22]+MW[25])/2                                  ;PtoA + AtoP Trips - HBO
;NHB SR2 Trips (vehicles)
MW[232]=(MW[32]+MW[35])/2                                  ;PtoA + AtoP Trips - NHB

;HBW SR3+ Trips (vehicles)
MW[213]=((MW[13]+MW[16]+MW[93]+MW[96])/{OC3VHBW})+(MW[43]+ MW[46]) ;PtoA + AtoP Trips - HBW  & TranDRV & IE
;HBO SR3+ Trips (vehicles)
MW[223]=(MW[23]+MW[26])/{OC3VHBNW}                                 ;PtoA + AtoP Trips - HBO
;NHB SR3+ Trips (vehicles)
MW[233]=(MW[33]+MW[36])/{OC3VNHB}                                  ;PtoA + AtoP Trips - NHB


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00N.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00N.PRN" MSG='Combine HWY trip tables - PM Period'
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI MATI[10] = "{SCENARIO_DIR}\output\JaxPrtTrk_PM_TEM.MAT"
FILEI MATI[8] = "{SCENARIO_DIR}\output\EETrk_PM_TEM.MAT"
FILEI MATI[7] = "{SCENARIO_DIR}\output\EECar_PM_TEM.MAT"
FILEI MATI[6] = "{SCENARIO_DIR}\output\IITrk_PM_TEM.MAT"
FILEI MATI[5] = "{SCENARIO_DIR}\output\IETrk_PM_TEM.MAT"
FILEI MATI[4] = "{SCENARIO_DIR}\output\IECar_PM_TEM.MAT"
FILEI MATI[3] = "{SCENARIO_DIR}\output\NHB_PM_TEM.MAT"
FILEI MATI[2] = "{SCENARIO_DIR}\output\HBNW_PM_TEM.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\output\HBW_PM_TEM.MAT"

FILEO MATO[1] = "{SCENARIO_DIR}\output\HWYTTAB_PM_{alt}{year}.MAT",
 MO=121-130, NAME=PM_DA_IEII,PM_SR2_IEII,PM_SR3_IEII,PM_TRK_IEII,PM_TRK_EE,
                  PM_DA_EE,PM_SR2_EE,PM_SR3_EE,PM_PortTrk,PM_Total, DEC=10*s

FILEO MATO[2] = "{SCENARIO_DIR}\output\HWYTTBP_PM_{alt}{year}.MAT",
 MO=211-213,221-223,231-233, NAME=PM_HBW_DA,PM_HBW_SR2,PM_HBW_SR3P,
                                  PM_HBO_DA,PM_HBO_SR2,PM_HBO_SR3P,
                                  PM_NHB_DA,PM_NHB_SR2,PM_NHB_SR3P, DEC=9*s

PAR ZONEMSG=100

FILLMW MW[11]  = MI.1.1,2,3,4,5,6   ;HBW:     11/12/13-DA_P2A,SR2_P2A,SR3_P2A |14/15/16-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[21]  = MI.2.1,2,3,4,5,6   ;HBNW:    21/22/23-DA_P2A,SR2_P2A,SR3_P2A |24/25/26-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[31]  = MI.3.1,2,3,4,5,6   ;NHB:     31/32/33-DA_P2A,SR2_P2A,SR3_P2A |34/35/36-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[41]  = MI.4.1,2,3,4,5,6   ;IE-Cars: 41/42/43-DA_P2A,SR2_P2A,SR3_P2A |44/45/46-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[51]  = MI.5.1,2,3,4       ;IE-Trks: 51/52   -LD_P2A,HD_P2A          |53/54   -LD_A2P,HD_A2P
FILLMW MW[61]  = MI.6.1,2,3,4,5,6   ;II-Trks: 61/62/63-LT_P2A,MT_P2A,HT_P2A   |64/65/66-LT_A2P,MT_A2P,HT_A2P
FILLMW MW[71]  = MI.7.1,2,3,4,5,6   ;EE-Cars: 71/72/73-DA_P2A,SR2_P2A,SR3_P2A |74/75/76-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[81]  = MI.8.1,2,3,4       ;EE-Trks: 81/82   -LD_P2A,HD_P2A          |83/84   -LD_A2P,HD_A2P
; FILLMW MW[91]  = MI.9.1,2,3,4,5,6   ;TRN-DRV: 91/92/93-DA_P2A,SR2_P2A,SR3_P2A |94/95/96-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[98]  = MI.10.1,2          ;JaxPort-FreightTrucks: 98-JPRTTrk_P2A    |99      -JPRTTrk_A2P

MW[91] = 0
MW[92] = 0
MW[93] = 0
MW[94] = 0
MW[95] = 0
MW[96] = 0


; DRIVE ALONE
MW[101]=(MW[11] + MW[21] + MW[31] + MW[41] +  MW[91]) +
        (MW[14] + MW[24] + MW[34] + MW[44] +  MW[94]) 

; AUTO 2 (SR2)
MW[102]=((MW[12] + MW[22] + MW[32] +  MW[92]) +
         (MW[15] + MW[25] + MW[35] +  MW[95]))/2 

; AUTO 3+ (SR3+)
MW[103]=((MW[13] + MW[93]) +(MW[16] + MW[96]))/{OC3VHBW} +        ;HBW & Transit-AutoAccess
        (MW[23] + MW[26])/{OC3VHBNW} +                            ;HBNW
        (MW[33] + MW[36])/{OC3VNHB}                               ;NHB

; SR2_IE
MW[104]= MW[42]+
         MW[45] 

; SR3_IE
MW[105]= MW[43]+
         MW[46] 

; II/IE TRK
MW[106]= (MW[61] + MW[62] + MW[63] + MW[51] +  MW[52]) +
         (MW[64] + MW[65] + MW[66] + MW[53] +  MW[54]) 

; EE TRUCK
MW[107]= (MW[81] + MW[82])+
         (MW[83] + MW[84]) 

; EE SOV/DA
MW[108]= MW[71] +
         MW[74]

; EE SR2
MW[109]= MW[72]+
         MW[75] 

; EE SR3
MW[110]= MW[73]+
         MW[76] 

; JaxPort Freight TRUCK
MW[111]= MW[98] +
         MW[99]

; FINAL TABLE ORDERING FOR Period HIGHWAY Assignnment
MW[121]=MW[101]              ;DA_IEII
MW[122]=MW[102]+MW[104]      ;SR2_IEII
MW[123]=MW[103]+MW[105]      ;SR3_IEII
MW[124]=MW[106]                        ;TRK_IEII
MW[125]=MW[107]                        ;TRK_EE
MW[126]=MW[108]                        ;DA_EE
MW[127]=MW[109]                        ;SR2_EE
MW[128]=MW[110]                        ;SR3_EE
MW[129]=MW[111]                        ;JaxPortTrk

LOOP K=121,129
  MW[130]=MW[130]+MW[K]                ;TotVeh for Period XX
ENDLOOP

;==============Purpose Specific Matrices by Mode=====================

;HBW DA Trips (vehicles)
MW[211]=(MW[11]+(MW[14]+MW[41]+ MW[44]+MW[91])+MW[94])     ;PtoA + AtoP Trips - HBW & IE & TranDRV
;HBO DA Trips (vehicles)
MW[221]=(MW[21] + MW[24])                                  ;PtoA + AtoP Trips - HBO
;NHB DA Trips (vehicles)
MW[231]=(MW[31] + MW[34])                                  ;PtoA + AtoP Trips - NHB
    
;HBW SR2 Trips (vehicles)
MW[212]=((MW[12]+MW[15]+MW[92]+MW[95])/2)+(MW[42]+ MW[45]) ;PtoA + AtoP Trips - HBW  & TranDRV & IE
;HBO SR2 Trips (vehicles)
MW[222]=(MW[22]+MW[25])/2                                  ;PtoA + AtoP Trips - HBO
;NHB SR2 Trips (vehicles)
MW[232]=(MW[32]+MW[35])/2                                  ;PtoA + AtoP Trips - NHB

;HBW SR3+ Trips (vehicles)
MW[213]=((MW[13]+MW[16]+MW[93]+MW[96])/{OC3VHBW})+(MW[43]+ MW[46]) ;PtoA + AtoP Trips - HBW  & TranDRV & IE
;HBO SR3+ Trips (vehicles)
MW[223]=(MW[23]+MW[26])/{OC3VHBNW}                                 ;PtoA + AtoP Trips - HBO
;NHB SR3+ Trips (vehicles)
MW[233]=(MW[33]+MW[36])/{OC3VNHB}                                  ;PtoA + AtoP Trips - NHB



ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00O.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00O.PRN" MSG='Combine HWY trip tables - NT Period'
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI MATI[10] = "{SCENARIO_DIR}\output\JaxPrtTrk_NT_TEM.MAT"
FILEI MATI[8] = "{SCENARIO_DIR}\output\EETrk_NT_TEM.MAT"
FILEI MATI[7] = "{SCENARIO_DIR}\output\EECar_NT_TEM.MAT"
FILEI MATI[6] = "{SCENARIO_DIR}\output\IITrk_NT_TEM.MAT"
FILEI MATI[5] = "{SCENARIO_DIR}\output\IETrk_NT_TEM.MAT"
FILEI MATI[4] = "{SCENARIO_DIR}\output\IECar_NT_TEM.MAT"
FILEI MATI[3] = "{SCENARIO_DIR}\output\NHB_NT_TEM.MAT"
FILEI MATI[2] = "{SCENARIO_DIR}\output\HBNW_NT_TEM.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\output\HBW_NT_TEM.MAT"

FILEO MATO[1] = "{SCENARIO_DIR}\output\HWYTTAB_NT_{alt}{year}.MAT",
 MO=121-130, NAME=NT_DA_IEII,NT_SR2_IEII,NT_SR3_IEII,NT_TRK_IEII,NT_TRK_EE,
                  NT_DA_EE,NT_SR2_EE,NT_SR3_EE,NT_PortTrk,NT_Total, DEC=10*s

FILEO MATO[2] = "{SCENARIO_DIR}\output\HWYTTBP_NT_{alt}{year}.MAT",
 MO=211-213,221-223,231-233, NAME=NT_HBW_DA,NT_HBW_SR2,NT_HBW_SR3P,
                                  NT_HBO_DA,NT_HBO_SR2,NT_HBO_SR3P,
                                  NT_NHB_DA,NT_NHB_SR2,NT_NHB_SR3P, DEC=9*s

PAR ZONEMSG=100

FILLMW MW[11]  = MI.1.1,2,3,4,5,6   ;HBW:     11/12/13-DA_P2A,SR2_P2A,SR3_P2A |14/15/16-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[21]  = MI.2.1,2,3,4,5,6   ;HBNW:    21/22/23-DA_P2A,SR2_P2A,SR3_P2A |24/25/26-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[31]  = MI.3.1,2,3,4,5,6   ;NHB:     31/32/33-DA_P2A,SR2_P2A,SR3_P2A |34/35/36-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[41]  = MI.4.1,2,3,4,5,6   ;IE-Cars: 41/42/43-DA_P2A,SR2_P2A,SR3_P2A |44/45/46-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[51]  = MI.5.1,2,3,4       ;IE-Trks: 51/52   -LD_P2A,HD_P2A          |53/54   -LD_A2P,HD_A2P
FILLMW MW[61]  = MI.6.1,2,3,4,5,6   ;II-Trks: 61/62/63-LT_P2A,MT_P2A,HT_P2A   |64/65/66-LT_A2P,MT_A2P,HT_A2P
FILLMW MW[71]  = MI.7.1,2,3,4,5,6   ;EE-Cars: 71/72/73-DA_P2A,SR2_P2A,SR3_P2A |74/75/76-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[81]  = MI.8.1,2,3,4       ;EE-Trks: 81/82   -LD_P2A,HD_P2A          |83/84   -LD_A2P,HD_A2P
; FILLMW MW[91]  = MI.9.1,2,3,4,5,6   ;TRN-DRV: 91/92/93-DA_P2A,SR2_P2A,SR3_P2A |94/95/96-DA_A2P,SR2_A2P,SR3_A2P
FILLMW MW[98]  = MI.10.1,2          ;JaxPort-FreightTrucks: 98-JPRTTrk_P2A    |99      -JPRTTrk_A2P

MW[91] = 0
MW[92] = 0
MW[93] = 0
MW[94] = 0
MW[95] = 0
MW[96] = 0


; DRIVE ALONE
MW[101]=(MW[11] + MW[21] + MW[31] + MW[41] +  MW[91]) +
        (MW[14] + MW[24] + MW[34] + MW[44] +  MW[94]) 

; AUTO 2 (SR2)
MW[102]=((MW[12] + MW[22] + MW[32] +  MW[92]) +
         (MW[15] + MW[25] + MW[35] +  MW[95]))/2 

; AUTO 3+ (SR3+)
MW[103]=((MW[13] + MW[93]) +(MW[16] + MW[96]))/{OC3VHBW} +        ;HBW & Transit-AutoAccess
        (MW[23] + MW[26])/{OC3VHBNW} +                            ;HBNW
        (MW[33] + MW[36])/{OC3VNHB}                               ;NHB

; SR2_IE
MW[104]= MW[42]+
         MW[45] 

; SR3_IE
MW[105]= MW[43]+
         MW[46] 

; II/IE TRK
MW[106]= (MW[61] + MW[62] + MW[63] + MW[51] +  MW[52]) +
         (MW[64] + MW[65] + MW[66] + MW[53] +  MW[54]) 

; EE TRUCK
MW[107]= (MW[81] + MW[82])+
         (MW[83] + MW[84]) 

; EE SOV/DA
MW[108]= MW[71] +
         MW[74]

; EE SR2
MW[109]= MW[72]+
         MW[75] 

; EE SR3
MW[110]= MW[73]+
         MW[76] 

; JaxPort Freight TRUCK
MW[111]= MW[98] +
         MW[99]

; FINAL TABLE ORDERING FOR Period HIGHWAY Assignnment
MW[121]=MW[101]              ;DA_IEII
MW[122]=MW[102]+MW[104]      ;SR2_IEII
MW[123]=MW[103]+MW[105]      ;SR3_IEII
MW[124]=MW[106]                        ;TRK_IEII
MW[125]=MW[107]                        ;TRK_EE
MW[126]=MW[108]                        ;DA_EE
MW[127]=MW[109]                        ;SR2_EE
MW[128]=MW[110]                        ;SR3_EE
MW[129]=MW[111]                        ;JaxPortTrk

LOOP K=121,129
  MW[130]=MW[130]+MW[K]                ;TotVeh for Period XX
ENDLOOP

;==============Purpose Specific Matrices by Mode=====================

;HBW DA Trips (vehicles)
MW[211]=(MW[11]+(MW[14]+MW[41]+ MW[44]+MW[91])+MW[94])     ;PtoA + AtoP Trips - HBW & IE & TranDRV
;HBO DA Trips (vehicles)
MW[221]=(MW[21] + MW[24])                                  ;PtoA + AtoP Trips - HBO
;NHB DA Trips (vehicles)
MW[231]=(MW[31] + MW[34])                                  ;PtoA + AtoP Trips - NHB
 
;HBW SR2 Trips (vehicles)
MW[212]=((MW[12]+MW[15]+MW[92]+MW[95])/2)+(MW[42]+ MW[45]) ;PtoA + AtoP Trips - HBW  & TranDRV & IE
;HBO SR2 Trips (vehicles)
MW[222]=(MW[22]+MW[25])/2                                  ;PtoA + AtoP Trips - HBO
;NHB SR2 Trips (vehicles)
MW[232]=(MW[32]+MW[35])/2                                  ;PtoA + AtoP Trips - NHB

;HBW SR3+ Trips (vehicles)
MW[213]=((MW[13]+MW[16]+MW[93]+MW[96])/{OC3VHBW})+(MW[43]+ MW[46]) ;PtoA + AtoP Trips - HBW  & TranDRV & IE
;HBO SR3+ Trips (vehicles)
MW[223]=(MW[23]+MW[26])/{OC3VHBNW}                                 ;PtoA + AtoP Trips - HBO
;NHB SR3+ Trips (vehicles)
MW[233]=(MW[33]+MW[36])/{OC3VNHB}                                  ;PtoA + AtoP Trips - NHB


ENDRUN


; Script for program MATRIX in file "C:\NERPM43\APPLICATIONS\TTMAT00Q.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=MATRIX PRNFILE="C:\NERPM43\APPLICATIONS\TTMAT00Q.PRN" MSG='Sum 4 Period Tables for Check'
FILEO MATO[1] = "{SCENARIO_DIR}\output\HWYTTAB_AllPeriod_Chk_{alt}{year}.MAT",
 MO=11-20, NAME=AD_DA_IEII,AD_SR2_IEII,AD_SR3_IEII,AD_TRK_IEII,AD_TRK_EE,
               AD_DA_EE,AD_SR2_EE,AD_SR3_EE,AD_PortTrk,AD_Total, DEC=10*s

FILEI MATI[4] = "{SCENARIO_DIR}\output\HWYTTAB_NT_{alt}{year}.MAT"
FILEI MATI[3] = "{SCENARIO_DIR}\output\HWYTTAB_PM_{alt}{year}.MAT"
FILEI MATI[2] = "{SCENARIO_DIR}\output\HWYTTAB_MD_{alt}{year}.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\output\HWYTTAB_AM_{alt}{year}.MAT"

PAR ZONEMSG=100

MW[11]=MI.1.1+MI.2.1+MI.3.1+MI.4.1
MW[12]=MI.1.2+MI.2.2+MI.3.2+MI.4.2
MW[13]=MI.1.3+MI.2.3+MI.3.3+MI.4.3
MW[14]=MI.1.4+MI.2.4+MI.3.4+MI.4.4
MW[15]=MI.1.5+MI.2.5+MI.3.5+MI.4.5
MW[16]=MI.1.6+MI.2.6+MI.3.6+MI.4.6
MW[17]=MI.1.7+MI.2.7+MI.3.7+MI.4.7
MW[18]=MI.1.8+MI.2.8+MI.3.8+MI.4.8
MW[19]=MI.1.9+MI.2.9+MI.3.9+MI.4.9

MW[20]=MI.1.10+MI.2.10+MI.3.10+MI.4.10

; The MATRIX module does not have any explicit phases.  The module does run within an implied ILOOP
; where I is the origin zones.  All user statements in the module are processed once for each origin.
; Matrix computation (MW[#]=) are solved for all values of J for each I.  Thus for a given origin zone I
; the values for all destination zones J are automatically computed.  The user can control the computations
; at each J by using a JLOOP.

ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

endif           ;Time of Day (4 periods) Highway Model
; End of PILOT Script

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


if({AllDay_HwyMdl}=1)   ;All Day (24-Hour) Highway Model

; End of PILOT Script

; Script for program HIGHWAY in file "C:\NERPM43\APPLICATIONS\HAHWY00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=HIGHWAY PRNFILE="{SCENARIO_DIR}\output\HAHWY00A.PRN" MSG='Final 24-hour Assignment'
FILEI NETI = "{SCENARIO_DIR}\output\UNLOADED.NET"
FILEI MATI[1] = "{SCENARIO_DIR}\Output\HWYTTAB_{alt}{year}.MAT"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEO PATHO[1] = "{SCENARIO_DIR}\output\fullpath{alt}{year}.pth"
FILEI TURNPENI = "{SCENARIO_DIR}\input\tcards_{Year}{alt}.pen"
FILEO TURNVOLO[1] = "{SCENARIO_DIR}\output\TURNS.BIN"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\HAHWY00B.PRN"
FILEO NETO = "{SCENARIO_DIR}\output\FINAL ASGN.NET"

PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} RAAD=0.00000 AAD=0.000000 RMSE=0.000000 GAP=0.00025; RELATIVEGAP=0.001
;PAR ZONEMSG=100 COMBINE=EQUI MAXITERS={iter} GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;
;PAR ZONEMSG=100 COMBINE=EQUI MAXITERS=7 GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;


;TURNS N=1-999999
TURNS N=39782,40555,40265,40258,40241,40568

; look up deceleration rate based on approach speed
LOOKUP,
 INTERPOLATE=Y, LIST=Y, NAME=DECEL,
        LOOKUP[1]=1,RESULT=2,
R = '30 4',
    '70 6.2'

PROCESS PHASE=LINKREAD
  lw.distance=li.distance
  DISTANCE=LW.DISTANCE
  T0=li.TIME
  LW.FFTIME=LI.TIME ; USE FOR PRELOAD PURPOSES (FFTIME)
  C=LI.CAPACITY*LI.NUM_LANES*LI.UROADFACTOR/LI.CONFAC

;Save 24-hour total capacity
  CAPACITY_24H=C

  IF (li.FACILITY_TYPE=80-89) ADDTOGROUP=1 ; HOV FACILITIES
  IF (li.EECODE>0) ADDTOGROUP=2 ; EE PROHIBITED LINKS
  IF (LI.{PATHGROUP}) ADDTOGROUP=7 ; DEFINE A SUBSET FOR PATHFILE
  IF (li.FACILITY_TYPE=49,59,69) ADDTOGROUP=9 ; TRANSIT ONLY FACILITIES
; classify links based on presence/absence of tolls
      LINKCLASS=1 ; no toll
      if (li.cartoll>0)
       LINKCLASS=2 ; with toll
       T0=({CTOLL}*LI.CARTOLL)*60 ; + LI.SVCMINUTES + LI.SVCSECONDS/60
/*
       if (iteration=0)
        LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFAC/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
        LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)             ; Plaza lane service time in minutes per vehicle
        LW.SERVR=(1/LW.SERVT)*60                              ; Plaza lane service rate in vehicle per hour
        PRINT LIST='ARRIVR= ',LW.ARRIVR
        PRINT LIST='SERVT= ',LW.SERVT
        PRINT LIST='SERVR= ',LW.SERVR
        if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR      ; prevent infinite or negative queue
       endif
*/
      endif
;sks- /*
      if (li.TOLL_ACC>0)
       LINKCLASS=3 ; Toll Plaza Acceleration link
       T0= T0 + (LI.SPEED/2.5)/60
      endif

      if (li.TOLL_DEC>0)
       LINKCLASS=4 ; Toll Plaza Deceleration link
       T0 = T0 + (LI.SPEED/DECEL(1,LI.SPEED))/60
      endif
;sks- */
ENDPROCESS

PROCESS PHASE=ILOOP

;Trip Tables=>>  T1=DA_IEII, T2:SR_IEII, T3: TRK_IEII, T4: TRK_EE, T5:DA_EE, T6:SR_EE, T7:PortTrk

if ({SELLINK}=1)  ;Select Zone/Link Analysis

    PATHLOAD PATH=TIME, PENI=1, VOL[1]=MI.1.1, VOL[3]=MI.1.3,  EXCLUDEGROUP=1,9,                       ;IE&II- SOV(1) & TRK(3) 
       MW[8]=MI.1.1, SELECTLINK=({SEL_LINK}), MW[10]=MI.1.3, SELECTLINK=({SEL_LINK}),
       VOL[8]=MW[8], VOL[10]=MW[10]                                                                    ;SEl_IE&II- SOV(8) & TRK(10)

    PATHLOAD PATH=TIME, PENI=1, VOL[2]=MI.1.2, EXCLUDEGROUP=9,                                         ;IE&II - HOV(2)
       MW[9]=MI.1.2, SELECTLINK=({SEL_LINK}),
       VOL[9]=MW[9]                                                                                    ;SEL_IE&II - HOV(9)

    PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[4]=MI.1.4, VOL[5]=MI.1.5, VOL[7]=MI.1.7, EXCLUDEGROUP=1-2,9,  ;EE -TRK(4) & SOV(5); JaxPrtTrk(7)
       MW[11]=MI.1.4, SELECTLINK=({SEL_LINK}), MW[12]=MI.1.5, SELECTLINK=({SEL_LINK}),
       MW[14]=MI.1.7, SELECTLINK=({SEL_LINK}),
       VOL[11]=MW[11], VOL[12]=MW[12], VOL[14]=MW[14]                                                  ;SEL_EE -TRK(11) & SOV(12); JaxPrtTrk(14)

   PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[6]=MI.1.6, EXCLUDEGROUP=2,9,                                   ;EE - HOV(6) 
       MW[13]=MI.1.6, SELECTLINK=({SEL_LINK}),
       VOL[13]=MW[13]                                                                                  ;SEL_EE - HOV(13)
else

if ({pathfile}=1)
/* -sks: comment this block to initiate cluster run...
  PATHLOAD PATH=TIME, PENI=1, VOL[1]=MI.1.1, VOL[3]=MI.1.3, EXCLUDEGROUP=1,9, patho=1, name='DA_TRKIEII',ALLJ=F,INCLUDECOSTS=F, PATHOGROUP=7
  PATHLOAD PATH=TIME, PENI=1, VOL[2]=MI.1.2, EXCLUDEGROUP=9, patho=1, name='HOVIEII',ALLJ=F,INCLUDECOSTS=F, PATHOGROUP=7
  PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[4]=MI.1.4, VOL[5]=MI.1.5, VOL[7]=MI.1.7, EXCLUDEGROUP=1-2,9, patho=1, name='TRKEE_PRTTRK',ALLJ=F,INCLUDECOSTS=F, PATHOGROUP=7
  PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[6]=MI.1.6, EXCLUDEGROUP=2,9, patho=1, name='HOVEE',ALLJ=F,INCLUDECOSTS=F, PATHOGROUP=7
*/
else
  PATHLOAD PATH=TIME, PENI=1, VOL[1]=MI.1.1, VOL[3]=MI.1.3, EXCLUDEGROUP=1,9                       ;IE&II- SOV(1) & TRK(3)      
  PATHLOAD PATH=TIME, PENI=1, VOL[2]=MI.1.2, EXCLUDEGROUP=9                                        ;IE&II - HOV(2)
  PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[4]=MI.1.4, VOL[5]=MI.1.5, VOL[7]=MI.1.7, EXCLUDEGROUP=1-2,9 ;EE -TRK(4) & SOV (5); JaxportTrk(7)
  PATHLOAD PATH=LW.FFTIME, PENI=1, VOL[6]=MI.1.6, EXCLUDEGROUP=2,9                                 ;EE - HOV(6)
 
endif

endif

ENDPROCESS


PROCESS PHASE=ADJUST

if (time>0) LW.CGSTSPEED=(LW.DISTANCE/TIME)*60
/*
if (li.cartoll>0)
 LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFAC/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
 LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)             ; Plaza lane service time in minutes per vehicle
 LW.SERVR=(1/LW.SERVT)*60                              ; Plaza lane service rate in vehicle per hour
 if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR      ; prevent infinite or negative queue
PRINT LIST='ARRIVR= ',LW.ARRIVR
PRINT LIST='SERVT= ',LW.SERVT
PRINT LIST='SERVR= ',LW.SERVR
PRINT LIST='TOLLTIME= ',TIME
endif
*/
 FUNCTION   TC[1]=LI.TIME*(1+LI.BPRCOEFFICIENT*MIN((V/C),{VCMAX})^LI.BPREXPONENT) ; congested time for non-toll links
; FUNCTION   TC[2]=(1/(LW.SERVR-LW.ARRIVR))*60 + {CTOLL}*LI.CARTOLL*60 ; congested time for toll links
 FUNCTION   TC[2]={CTOLL}*LI.CARTOLL*60 ; congested time for toll links
 FUNCTION   TC[3]=LI.TIME*(1+LI.BPRCOEFFICIENT*MIN((V/C),{VCMAX})^LI.BPREXPONENT) + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links
 FUNCTION   TC[4]=LI.TIME*(1+LI.BPRCOEFFICIENT*MIN((V/C),{VCMAX})^LI.BPREXPONENT) + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 FUNCTION   V=VOL[1]+VOL[2]+VOL[3]+VOL[4]+VOL[5]+VOL[6]+VOL[7]
if (li.cartoll>0) print list="Iter:",iteration(2.0)," TOLLFM Summary, A=",A(6.0)," B=",B(6.0)," PLAZAID=",li.TOLL(3.0)," NAME=",li.PLAZADESC(24)," MAX LNS=",li.PLZALNSMAX," GCOST=",TIME(6.2),
        printo=1


ENDPROCESS

; Converge phase is new for Cube 4.0.
PHASE=CONVERGE
  IF (ITERATION < 6) BREAK; Do not even test for Iterations 2-5
  IF (GAP[ITERATION]<GAPCUTOFF & GAP[ITERATION-1]<GAPCUTOFF & GAP[ITERATION-2]<GAPCUTOFF)
;  IF (RGAP[ITERATION]<RGAPCUTOFF & RGAP[ITERATION-1]<RGAPCUTOFF & RGAP[ITERATION-2]<RGAPCUTOFF)
     BALANCE = 1
  ENDIF

ENDPROCESS




ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\HANET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\HANET00A.PRN" MSG='Rename Variables and Minor Calculations'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\FINAL ASGN.NET"
FILEO NETO = "{SCENARIO_DIR}\output\LOADED_24H.NET",
 EXCLUDE=    V_1    TIME_1,     VC_1,
    CSPD_1    VDT_1    VHT_1    V1_1    V2_1    V3_1    V4_1    V5_1    V6_1     V7_1,
    VT_1    V1T_1    V2T_1    V3T_1    V4T_1    V5T_1    V6T_1    V7T_1, 
    V8_1    V9_1    V10_1    V11_1    V12_1    V13_1    V14_1,
    V8T_1    V9T_1    V10T_1    V11T_1    V12T_1    V13T_1    V14T_1 

AD_VL_TOT_{YEAR}{ALT}=V_1                  ;Total
AD_VL_SOV_{YEAR}{ALT}=V1_1+V5_1            ;DA-II&IE+EE 
AD_VL_HOV_{YEAR}{ALT}=V2_1+V6_1            ;SR-II&IE+EE
AD_VL_Trk_{YEAR}{ALT}=V3_1+V4_1+V7_1       ;Truck-II&IE+EE+Port 
AD_VL_PrtTk_{YEAR}{ALT}=V7_1               ;Port-Truck 
AD_VL_EXT_{YEAR}{ALT}=V4_1+V5_1+V6_1       ;EXT-TRK+DA+SR (Does not include ext-ext of Port Truck) 
 

AD_SVL_TOT_{YEAR}{ALT}=V8_1+V9_1+V10_1+V11_1+V12_1+V13_1+V14_1   ;Selected Total
AD_SVL_SOV_{YEAR}{ALT}=V8_1+V12_1                                ;Selected DA-II&IE+EE
AD_SVL_HOV_{YEAR}{ALT}=V9_1+V13_1                                ;Selected SR-II&IE+EE
AD_SVL_Trk_{YEAR}{ALT}=V10_1+V11_1+V14_1                         ;Selected Truck-II&IE+EE+Port
AD_SVL_PrTk_{YEAR}{ALT}=V14_1                                    ;Selected Port-Truck
AD_SVL_EXT_{YEAR}{ALT}=V11_1+V12_1+V13_1                         ;EXT-TRK+DA+SR (Does not include ext-ext of Port Truck) 


AD_CGSPEED_{YEAR}{ALT}=CSPD_1
AD_VMT_{YEAR}{ALT}=VDT_1
AD_VHT_{YEAR}{ALT}=VHT_1

;CGTIME{YEAR}{ALT}=60*DISTANCE/CGSPEED{YEAR}{ALT}

;sks -8/22/08 - Remove computation errors for ZERO congested speed and Flag the link.
if (AD_CGSPEED_{YEAR}{ALT}>0)
   AD_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/AD_CGSPEED_{YEAR}{ALT}
 else 
   AD_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/(AD_CGSPEED_{YEAR}{ALT}+0.01)
   AD_FlgCGSPDZero=1
endif

;sks -8/22/08 - For link with year 2005 traffic counts.
if ('{Year}'='05')
   if (Li.1.Count>0)
      AD_VOLCNTRTO= V_1/LI.1.COUNT
     else
      AD_VOLCNTRTO=0.0
   endif 
endif

if (LI.1.CAPACITY>0 & LI.1.NUM_LANES>0)
  AD_VCapRTO=(V_1*LI.1.CONFAC)/(LI.1.CAPACITY*LI.1.NUM_LANES)
 else
  AD_VCapRTO=9999.0
endif



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

endif           ;All Day (24-Hour) Highway Model
; End of PILOT Script

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


if({TOD_HwyMdl}=1)   ;Time of Day (4 periods) Highway Model
; End of PILOT Script

; Script for program HIGHWAY in file "C:\NERPM43\APPLICATIONS\HTHWY00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=HIGHWAY PRNFILE="{SCENARIO_DIR}\output\HTHWY00A.PRN" MSG='AM Period Hwy Assignment'
FILEI MATI[2] = "{SCENARIO_DIR}\Output\HWYTTBP_AM_A10.MAT"
FILEI NETI = "{SCENARIO_DIR}\output\UNLOADED.NET"
FILEI MATI[1] = "{SCENARIO_DIR}\Output\HWYTTAB_AM_A10.MAT"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI LOOKUPI[2] = "{CATALOG_DIR}\parameters\HOT_TOLL.dbf"
FILEI LOOKUPI[1] = "{CATALOG_DIR}\parameters\TCHOICE_AM.dbf"

FILEI TURNPENI = "{SCENARIO_DIR}\input\tcards_{Year}{alt}.pen"
FILEO TURNVOLO[1] = "{SCENARIO_DIR}\output\TURNS_AM.BIN"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\AMPeriod_TollReport.PRN"
FILEO NETO = "{SCENARIO_DIR}\output\FINAL_ASGN_AM.NET"

PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} RAAD=0.00000 AAD=0.000000 RMSE=0.000000 GAP=0.00025; RELATIVEGAP=0.001
;PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;
;PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS=7 GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;

;TURNS N=1-999999
TURNS N=39782,40555,40265,40258,40241,40568

;Per-KDK
LOOKUP LOOKUPI=1,
       NAME=KON,
       LOOKUP[1]=REC, RESULT=CT,
       LOOKUP[2]=REC, RESULT=CC,
       LOOKUP[3]=REC, RESULT=TFK,
       FAIL[1]=0,FAIL[2]=0,FAIL[3]=0

LOOKUP LOOKUPI=2,
       NAME=HOTTOLL,
       LOOKUP[1]=HOT, RESULT=AM_TOLL_MI,
       FAIL[1]=0,FAIL[2]=0,FAIL[3]=0

; look up deceleration rate based on approach speed
LOOKUP,
 INTERPOLATE=Y, LIST=Y, NAME=DECEL,
        LOOKUP[1]=1,RESULT=2,
R = '30 4',
    '70 6.2'

PROCESS PHASE=LINKREAD

;Basics...
  lw.distance=li.distance
  DISTANCE=LW.DISTANCE
  T0=li.TIME
  LW.FFTIME=LI.TIME                                         ; USE FOR PRELOAD PURPOSES (FFTIME)
 C=LI.CAPACITY*LI.NUM_LANES*LI.UROADFACTOR/LI.CONFACAMP
;Save AM Period Total capacity
  CAPACITY_AMP=C

;Per-KDK
; HOT TOLL RATE/mile from lookup table
HOT_TOLL_PMILE = HOTTOLL(1,LI.HOT)
IF(LI.HOT>=1)
  LW.HOTTOLL = DISTANCE*HOT_TOLL_PMILE
ELSE
    LW.HOTTOLL=0
ENDIF
LW.MYTOLL=LW.HOTTOLL+LI.CARTOLL
LW.MYTOLL2=0.5*LW.MYTOLL

;Set EXCLUDE VOLUME GROUP for PATHLOAD...
  IF (li.FACILITY_TYPE=86,87,89 & LI.HOT=0) ADDTOGROUP=1         ;HOV 2 & 3+ Facilities (FT=88 PM Only) => Exclude DA and Truck Volume Groups  
  IF (li.FACILITY_TYPE=82 & LI.HOT=0) ADDTOGROUP=3               ;HOV 3+ Facilities => Exclude HOV2 Volume Groups
;Note Dummy HOT ramps are coded as HOT=-1 and their facility_type changed to 69 (transit only)
;  IF (li.HOT=2) ADDTOGROUP=4                                     ;Dummy Entrance and Exit from HOT facility

  IF (li.EECODE>0) ADDTOGROUP=2                                  ;EE PROHIBITED LINKS =>Exclude External Volume Groups
;  IF (LI.{PATHGROUP}) ADDTOGROUP=7 ; DEFINE A SUBSET FOR PATHFILE

  IF (li.HOT>=1) ADDTOGROUP=8                                    ;HOT Lane Facility
  IF (li.FACILITY_TYPE=49,59,69) ADDTOGROUP=9                    ;TRANSIT ONLY FACILITIES =>Exclude all Highway Volume Groups

;Per-KDK
   IF (LI.HOT>=1 | li.FACILITY_TYPE=91-99) ADDTOGROUP=5       ;Any kind of toll road -- KDK
   IF (li.FACILITY_TYPE=91-99) ADDTOGROUP=6                   ;Non-HOT toll road -- KDK

; classify links based on presence/absence of tolls
      LINKCLASS=1                                        ;no toll
      if (li.cartoll>0)           
       LINKCLASS=2                                       ;with toll

       T0=({CTOLL}*LI.CARTOLL)*60 + LI.SVCMINUTES + LI.SVCSECONDS/60

       if (iteration=0)
        LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFACAMP/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
        LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)                ; Plaza lane service time in minutes per vehicle
        LW.SERVR=(1/LW.SERVT)*60                                 ; Plaza lane service rate in vehicle per hour
        PRINT LIST='ARRIVR= ',LW.ARRIVR
        PRINT LIST='SERVT= ',LW.SERVT
        PRINT LIST='SERVR= ',LW.SERVR
        if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR         ; prevent infinite or negative queue
       endif

      endif

      if (li.TOLL_ACC>0)
       LINKCLASS=3                                               ; Toll Plaza Acceleration link
       T0= T0 + (LI.SPEED/2.5)/60
      endif

      if (li.TOLL_DEC>0)
       LINKCLASS=4                                               ; Toll Plaza Deceleration link
       T0 = T0 + (LI.SPEED/DECEL(1,LI.SPEED))/60
      endif

     IF (li.FACILITY_TYPE=49,59,69) LINKCLASS=5                   ;Transit non-Highway optional links


ENDPROCESS

PROCESS PHASE=ILOOP

  MW[2]=MI.2.AM_HBW_DA             ;Table 2 
  MW[3]=MI.2.AM_HBW_SR2            ;Table 3 
  MW[4]=MI.2.AM_HBW_SR3P           ;Table 4 
  MW[5]=MI.2.AM_HBO_DA             ;Table 5 
  MW[6]=MI.2.AM_HBO_SR2            ;Table 6 
  MW[7]=MI.2.AM_HBO_SR3P           ;Table 7 
  MW[8]=MI.2.AM_NHB_DA             ;Table 8 
  MW[9]=MI.2.AM_NHB_SR2            ;Table 9 
  MW[10]=MI.2.AM_NHB_SR3P          ;Table 10 

;                                           MW>VOL
  MW[1]=MI.1.AM_TRK_IEII             ;Table 1 >7
  MW[11]=MI.1.AM_TRK_EE              ;Table 11 >8
  MW[12]=MI.1.AM_DA_EE               ;Table 12 >9
  MW[13]=MI.1.AM_SR2_EE              ;Table 13 >10
  MW[14]=MI.1.AM_SR3_EE              ;Table 14 >11
  MW[15]=MI.1.AM_PortTrk             ;Table 15 >12

;=====================
;Per-KDK
;Skim Time and Cost, assuming auto operating costs is the same for toll and free links
; Get straight time skim for free paths (toll links excluded)
; Get straight time skim for free paths (toll links excluded)
PATHLOAD PATH=TIME PENI=1, EXCLUDEGROUP=5,9,MW[21]=PATHTRACE(TIME),NOACCESS=999
; Get time and cost skims for DA, which may include tolls
PATHLOAD PATH=TIME PENI=1, EXCLUDEGROUP=9,  MW[22]=PATHTRACE(TIME),NOACCESS=999,MW[23]=PATHTRACE(LW.MYTOLL),NOACCESS=999,
; Get time and cost skims for SR3+, which may include non-HOT tolls (HOT is free)
                                      MW[27]=PATHTRACE(LI.CARTOLL),NOACCESS=999,
; Set flag for use of HOT lanes
                                      MW[99]=PATHTRACE(LI.HOT),NOACCESS=0
; Get time and cost skims for SR2, which may include tolls
  MW[24]=MW[22]                  ;time- non-free
  MW[25]=0.5*MW[23]              ;mytoll=hottoll+cartoll
; Get time skims for SR3+
  MW[26]=MW[22]                  ;time- non-free 
; Get cost skims for SR3+, which may include non-HOT tolls
  MW[27]=0.3125*MW[27] ; assume 3.2 occ
;
; CHOICE MODEL
;kdk-S65:  c_o=CNTY(1,i);get county number
;  combinations by o & d
   loop p=1,3
   jloop
     if((MW[23]<=0) && (MW[21]<999)) ; if there is no toll skim, all must be free
       SfreeDA  = 1.0  
       SfreeSR2 = 1.0  
       SfreeSR3 = 1.0
     elseif(MW[21]>=999) ; if there is no free skim, all must be placed in the "toll" table
       SfreeDA  = 0.0  
       SfreeSR2 = 0.0  
       SfreeSR3 = 0.0
     else  
;kdk-S65:      c_d=CNTY(1,j)
       ;get coefficients
;xx       dexi = 3*(c_o-1)+p
;kdk-S65:       dexj = 3*(c_d-1)+p
;xx       cti =KON(1,dexi); time coef for i
;xx       cci =KON(2,dexi); cost coef for i
;xx       tfki=KON(3,dexi); toll free constant for i
;kdk-S65:       ctj =KON(1,dexj); time coef for j
;kdk-S65:       ccj =KON(2,dexj); cost coef for j
;kdk-S65:       tfkj=KON(3,dexj); toll free constant for j

       ctp =KON(1,p); time coef for purpose p
       ccp =KON(2,p); cost coef for purpose p
       tfkp=KON(3,p); toll free constant for purpose p

;xx
;xx
;xx       if(dexi=dexj) ; both ends in the same county
;xx          ct=cti
;xx          cc=cci
;xx         tfk=tfki
;xx       else          ; average 2 counties because true Home zone in O-D format is unknown
;xx          ct =0.5*(cti+ctj)
;xx          cc =0.5*(cci+ccj)
;xx          tfk=0.5*(tfki+tfkj)
;xx       endif
;xx
;xx
; SET HOT LANES USE BIAS - 
       if(mw[99]>0) 
          hbias=KON(3,5); HOT bias stored in 5th record
       else
          hbias=0.0
       endif
; OVERRIDE EVERYTHING FOR TEST OF USING CONSTANTS FROM THE *DESTINATION* ZONE ****************
;     rationale - most origins are the non-home end in the PM peak
;kdk-S65:          ct=ctj
;kdk-S65:          cc=ccj
;kdk-S65:         tfk=tfkj + hbias
          ct=ctp
          cc=ccp
          tfk=tfkp + hbias
; ***************************************************************************************
       UfreeDA = ct*MW[21] + tfk
       UfreeSR2= UfreeDA;     ct*MW[21] + tfk
       UfreeSR3= UfreeDA;     ct*MW[21] + tfk
       UtollDA = ct*MW[22] + cc*MW[23]
       UtollSR2= ct*MW[24] + cc*MW[25]
       UtollSR3= ct*MW[26] + cc*MW[27]

       SfreeDA = 1.0/(1.0+exp(UtollDA-UfreeDA)); binary logit form
       ;StollDA = 1.0 - SfreeDA
       SfreeSR2= 1.0/(1.0+exp(UtollSR2-UfreeSR2))
       ;StollSR2= 1.0 - SfreeSR2
       SfreeSR3= 1.0/(1.0+exp(UtollSR3-UfreeSR3))
       ;StollSR3= 1.0 - SfreeSR3
; for test ****************************************************************************
;       if(mw[99]>0) 
;            SfreeDA =0
;            SfreeSR2=0
;            SfreeSR3=0
;       endif
; for test ****************************************************************************
     endif 
 
       dex = 3*(p-1)+2
       k3=3*(p-1)+31
       k4=k3+10; 2*(p-1)+41
       mw[k3] = mw[dex]*SfreeDA  ; free DA
       mw[k4] = mw[dex] - mw[k3] ; toll DA

       dex2 = dex+1; 3*(p-1)+3
       k5=k3+1;      3*(p-1)+32
       k6=k5+10;     2*(p-1)+42
       mw[k5] = mw[dex2]*SfreeSR2 ; free SR2
       mw[k6] = mw[dex2] - mw[k5] ; toll SR2

       dex3 = dex+2; 3*(p-1)+3
       k7=k5+1;      3*(p-1)+33
       k8=k7+10;     2*(p-1)+42
       mw[k7] = mw[dex3]*SfreeSR3 ; free SR3+
       mw[k8] = mw[dex3] - mw[k7] ; toll SR3+

       if(MW[23]<> 0);tabluate free trips when there is a choice - some toll on the path
          kf3=k3+70
          mw[kf3]=mw[k3]; choice free DA

          kf5=kf3+1
          mw[kf5]=mw[k5]; choice free SR2

          kf7=kf5+1
          mw[kf7]=mw[k7]; choice free SR3+
       endif

;EETRIPS Block- Using HBO shares for EE trips...
       if(p=2) ; use HBO shares
          mw[51]=mw[12]*SfreeDA  ; EE DA free
          mw[52]=mw[12]-mw[51]   ; EE DA toll

          mw[53]=mw[13]*SfreeSR2  ; EE SR2 free
          mw[54]=mw[13]-mw[53]   ; EE SR2 toll

          mw[55]=mw[14]*SfreeSR3  ; EE SR3 free
          mw[56]=mw[14]-mw[55]   ; EE SR3 toll
       endif
;EETRIPS Block

   endjloop
   endloop
 
   MW[61] = mw[31] +mw[34] + mw[37] ;drive alone free
   MW[62] = mw[32] +mw[35] + mw[38] ;SR2 free
   MW[63] = mw[33] +mw[36] + mw[39] ;SR3+free
   MW[64] = mw[41] +mw[44] + mw[47] ;drive alone toll
   MW[65] = mw[42] +mw[45] + mw[48] ;SR2 toll
   MW[66] = mw[43] +mw[46] + mw[49] ;SR3+toll
 
;kdk-S65: MW[01] = MW[01]/[PCE-TRK]        ;truck vehicles

;=====================
;SKS- The Select Link Volume sets exceed the maximimum limitation of 20. So assignment with select link was turned off here...
;Per CV documentation, Volume set index range is 1-20; there may be up to 20 volume sets in a single application of Highway. 

 ;FREE LINKS - toll links probibited
  PATHLOAD PATH=TIME, VOL[1]=MW[61], PENI=1, EXCLUDEGROUP=1,5,9  ;Without HOV (DA-Free)
  PATHLOAD PATH=TIME, VOL[2]=MW[62], PENI=1, EXCLUDEGROUP=3,5,9  ;With HOV2 (SR2-Free)
 ;ALL links -toll allowed
  PATHLOAD PATH=TIME, VOL[3]=MW[64], PENI=1, EXCLUDEGROUP=1,9    ;Without HOV (DA-Toll)
  PATHLOAD PATH=TIME, VOL[4]=MW[65], PENI=1, EXCLUDEGROUP=3,9    ;With HOV2  (SR2-Toll)
 ;SR3+ free
  PATHLOAD PATH=TIME, VOL[5]=MW[63], PENI=1, EXCLUDEGROUP=6,9    ;With HOV3+ (SR3-Free)
 ;SR3+ toll
  PATHLOAD PATH=TIME, VOL[6]=MW[66], PENI=1, EXCLUDEGROUP=9      ;With HOV3+ (SR3-Toll)

 ;Trucks
  PATHLOAD PATH=COST, PENI=1, VOL[7]=MW[1],   EXCLUDEGROUP=1,3,8,9    ;IE&II- TRK(7<1) - Not on HOV/HOT  
  PATHLOAD PATH=COST, PENI=1, VOL[12]=MW[15], EXCLUDEGROUP=1,2,3,8,9  ;JaxportTrk(12<15) -Not on HOV/HOT

 ;EE Trips
  if(i>{ZONESI})
   PATHLOAD PATH=COST, PENI=1, VOL[8]=MW[11],EXCLUDEGROUP=1,2,3,8,9, excludej=1-{ZONESI} ;EE- TRK(8<11)-Not on HOV/HOT
   PATHLOAD PATH=TIME, PENI=1, VOL[9]=MW[51],  EXCLUDEGROUP=1,2,5,9, excludej=1-{ZONESI} ;EE-DA-Free(9<51)
   PATHLOAD PATH=TIME, PENI=1, VOL[13]=MW[52], EXCLUDEGROUP=1,2,9,   excludej=1-{ZONESI} ;EE-DA-Toll(13<52)
   PATHLOAD PATH=TIME, PENI=1, VOL[10]=MW[53], EXCLUDEGROUP=2,3,5,9, excludej=1-{ZONESI} ;EE-SR2-Free(10<53)
   PATHLOAD PATH=TIME, PENI=1, VOL[14]=MW[54], EXCLUDEGROUP=2,3,9,   excludej=1-{ZONESI} ;EE-SR2-Toll(14<54)
   PATHLOAD PATH=TIME, PENI=1, VOL[11]=MW[55], EXCLUDEGROUP=2,6,9,   excludej=1-{ZONESI} ;EE-SR3-Free(11<55)
   PATHLOAD PATH=TIME, PENI=1, VOL[15]=MW[56], EXCLUDEGROUP=2,9,     excludej=1-{ZONESI} ;EE-SR3-Free(11<56)
  endif

ENDPROCESS


PROCESS PHASE=ADJUST
;Define volume to be used for V/C calculation
FUNCTION   V=VOL[1]+VOL[2]+VOL[3]+VOL[4]+VOL[5]+VOL[6]+VOL[7]+VOL[8]+VOL[9]+VOL[10]+VOL[11]+VOL[12]+VOL[13]+VOL[14]+VOL[15]


if (time>0) LW.CGSTSPEED=(LW.DISTANCE/TIME)*60

if (li.cartoll>0)
 LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFACAMP/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
 LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)                ; Plaza lane service time in minutes per vehicle
 LW.SERVR=(1/LW.SERVT)*60                                 ; Plaza lane service rate in vehicle per hour
 if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR         ; prevent infinite or negative queue
PRINT LIST='ARRIVR= ',LW.ARRIVR
PRINT LIST='SERVT= ',LW.SERVT
PRINT LIST='SERVR= ',LW.SERVR
PRINT LIST='TOLLTIME= ',TIME
endif
if (lw.servr-lw.arrivr=0.0) lw.servr=lw.servr+0.01

;Update Time and Cost for PATHLOAD
;---TIME is TIME plus regular toll time and toll equivalent time
;---COST is Time plus HOT toll time equivalent
;Capture HOT toll time equivalent

; Dynamic HOTTOLL removed - now a fixed rate per mile in linkread
;IF(LI.HOT=1)
;  LW.VCVAL=V/C ; V/C CALCULATION
;  MINHOTTOLL=0.12          ; Minimum HOT lane toll 12 cents per mile
;  MAXHOTTOLL=0.25          ; Maximum HOT lane toll 25 cents per mile
;  LW.HOTTOLL = MINHOTTOLL+(MAXHOTTOLL-MINHOTTOLL)/(1+EXP(6-9*LW.VCVAL))    ;LOGIT EQN APPLIED
;ELSE
;    LW.HOTTOLL=0
;ENDIF

;KDK replace LI.TIME with T0 for toll choice
;Define EACH LINKCLASS TC and COST Functions
; Link Class 1 - Non Regular Toll (it may be a HOT link)
 FUNCTION TC[1]   = T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT)
 FUNCTION COST[1] = T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT)+LI.DISTANCE*(LW.HOTTOLL)*60*{CTOLL}

;Link Class 2 - Regular Tollplaza Link (Never HOT link)
 ;FUNCTION   TC[2]=MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) + {CTOLL}*LI.CARTOLL*60        ; congested time for toll links
 FUNCTION   TC[2]=T0; MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) ; don't include toll in toll choice time; congested time for toll links
;Ommit service time from toll choice: 
 FUNCTION COST[2]=MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) + {CTOLL}*LI.CARTOLL*60        ; congested time for toll links

; Link Class 3 - Regular Toll Accln Link (Never HOT link)
 FUNCTION   TC[3]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) ;Omit accel from toll choice: + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links
 FUNCTION COST[3]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links

; Link Class 4 - Regular Toll Decln Link (Never HOT link)
 FUNCTION   TC[4]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) ;Omit deccel from toll choice: + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 FUNCTION COST[4]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 
; Link Class 5 - Transit Optional Link 
 FUNCTION   TC[5]=T0                                                            ;congested time transit-only optional links
 FUNCTION COST[5]=T0                                                            ;congested time transit-only optional links

 
if (li.cartoll>0) print list="Iter:",iteration(2.0)," TOLLFM Summary, A=",A(6.0)," B=",B(6.0)," PLAZAID=",li.TOLL(3.0)," NAME=",li.PLAZADESC(24)," MAX LNS=",li.PLZALNSMAX," GCOST=",TIME(6.2),
        printo=1


ENDPROCESS

; Converge phase is new for Cube 4.0.
PHASE=CONVERGE
  IF (ITERATION < 6) BREAK; Do not even test for Iterations 2-5
  IF (GAP[ITERATION]<GAPCUTOFF & GAP[ITERATION-1]<GAPCUTOFF & GAP[ITERATION-2]<GAPCUTOFF)
;  IF (RGAP[ITERATION]<RGAPCUTOFF & RGAP[ITERATION-1]<RGAPCUTOFF & RGAP[ITERATION-2]<RGAPCUTOFF)
     BALANCE = 1
  ENDIF

ENDPROCESS


ENDRUN


; Script for program HIGHWAY in file "C:\NERPM43\APPLICATIONS\HTHWY00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=HIGHWAY PRNFILE="{SCENARIO_DIR}\output\HTHWY00B.PRN" MSG='Mid_Day Period Hwy Assignment'
FILEI NETI = "{SCENARIO_DIR}\output\UNLOADED.NET"
FILEI MATI[2] = "{SCENARIO_DIR}\Output\HWYTTBP_MD_A10.MAT"
FILEI MATI[1] = "{SCENARIO_DIR}\Output\HWYTTAB_MD_A10.MAT"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI LOOKUPI[2] = "{CATALOG_DIR}\parameters\HOT_TOLL.dbf"
FILEI LOOKUPI[1] = "{CATALOG_DIR}\parameters\TCHOICE_MD.dbf"

FILEI TURNPENI = "{SCENARIO_DIR}\input\tcards_{Year}{alt}.pen"
FILEO TURNVOLO[1] = "{SCENARIO_DIR}\output\TURNS_MD.BIN"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\MDPeriod_TollReport.PRN"
FILEO NETO = "{SCENARIO_DIR}\output\FINAL_ASGN_MD.NET"

PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} RAAD=0.00000 AAD=0.000000 RMSE=0.000000 GAP=0.00025; RELATIVEGAP=0.001
;PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;
;PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS=7 GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;

;TURNS N=1-999999
TURNS N=39782,40555,40265,40258,40241,40568

;Per-KDK
LOOKUP LOOKUPI=1,
       NAME=KON,
       LOOKUP[1]=REC, RESULT=CT,
       LOOKUP[2]=REC, RESULT=CC,
       LOOKUP[3]=REC, RESULT=TFK,
       FAIL[1]=0,FAIL[2]=0,FAIL[3]=0

LOOKUP LOOKUPI=2,
       NAME=HOTTOLL,
       LOOKUP[1]=HOT, RESULT=MD_TOLL_MI,
       FAIL[1]=0,FAIL[2]=0,FAIL[3]=0

; look up deceleration rate based on approach speed
LOOKUP,
 INTERPOLATE=Y, LIST=Y, NAME=DECEL,
        LOOKUP[1]=1,RESULT=2,
R = '30 4',
    '70 6.2'

PROCESS PHASE=LINKREAD

;Basics...
  lw.distance=li.distance
  DISTANCE=LW.DISTANCE
  T0=li.TIME
  LW.FFTIME=LI.TIME                                         ; USE FOR PRELOAD PURPOSES (FFTIME)
  C=LI.CAPACITY*LI.NUM_LANES*LI.UROADFACTOR/LI.CONFACMDP
;Save Mid-Day Period Total capacity
  CAPACITY_MDP=C

;Per-KDK
; HOT TOLL RATE/mile from lookup table
HOT_TOLL_PMILE = HOTTOLL(1,LI.HOT)
IF(LI.HOT>=1)
  LW.HOTTOLL = DISTANCE*HOT_TOLL_PMILE
ELSE
    LW.HOTTOLL=0
ENDIF
LW.MYTOLL=LW.HOTTOLL+LI.CARTOLL
LW.MYTOLL2=0.5*LW.MYTOLL

;Set EXCLUDE VOLUME GROUP for PATHLOAD...
  IF (li.FACILITY_TYPE=89 & LI.HOT=0) ADDTOGROUP=1               ;HOV 2 & 3+ Facilities (FT=89 All Day) => Exclude DA and Truck Volume Groups  
  IF (li.FACILITY_TYPE=82 & LI.HOT=0) ADDTOGROUP=3               ;HOV 3+ Facilities => Exclude HOV2 Volume Groups
;Note Dummy HOT ramps are coded as HOT=-1 and their facility_type changed to 69 (transit only)
;  IF (li.HOT=2) ADDTOGROUP=4                                     ;Dummy Entrance and Exit from HOT facility

  IF (li.EECODE>0) ADDTOGROUP=2                                  ;EE PROHIBITED LINKS =>Exclude External Volume Groups
;  IF (LI.{PATHGROUP}) ADDTOGROUP=7 ; DEFINE A SUBSET FOR PATHFILE

  IF (li.HOT>=1) ADDTOGROUP=8                                     ;HOT Lane Facility
  IF (li.FACILITY_TYPE=49,59,69) ADDTOGROUP=9                    ;TRANSIT ONLY FACILITIES =>Exclude all Highway Volume Groups

;Per-KDK
   IF (LI.HOT>=1 | li.FACILITY_TYPE=91-99) ADDTOGROUP=5       ;Any kind of toll road -- KDK
   IF (li.FACILITY_TYPE=91-99) ADDTOGROUP=6                   ;Non-HOT toll road -- KDK

; classify links based on presence/absence of tolls
      LINKCLASS=1                                        ;no toll
      if (li.cartoll>0)           
       LINKCLASS=2                                       ;with toll

       T0=({CTOLL}*LI.CARTOLL)*60 + LI.SVCMINUTES + LI.SVCSECONDS/60

       if (iteration=0)
        LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFACMDP/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
        LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)                ; Plaza lane service time in minutes per vehicle
        LW.SERVR=(1/LW.SERVT)*60                                 ; Plaza lane service rate in vehicle per hour
        PRINT LIST='ARRIVR= ',LW.ARRIVR
        PRINT LIST='SERVT= ',LW.SERVT
        PRINT LIST='SERVR= ',LW.SERVR
        if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR         ; prevent infinite or negative queue
       endif

      endif

      if (li.TOLL_ACC>0)
       LINKCLASS=3                                               ; Toll Plaza Acceleration link
       T0= T0 + (LI.SPEED/2.5)/60
      endif

      if (li.TOLL_DEC>0)
       LINKCLASS=4                                               ; Toll Plaza Deceleration link
       T0 = T0 + (LI.SPEED/DECEL(1,LI.SPEED))/60
      endif

     IF (li.FACILITY_TYPE=49,59,69) LINKCLASS=5                   ;Transit non-Highway optional links


ENDPROCESS

PROCESS PHASE=ILOOP

  MW[2]=MI.2.MD_HBW_DA             ;Table 2 
  MW[3]=MI.2.MD_HBW_SR2            ;Table 3 
  MW[4]=MI.2.MD_HBW_SR3P           ;Table 4 
  MW[5]=MI.2.MD_HBO_DA             ;Table 5 
  MW[6]=MI.2.MD_HBO_SR2            ;Table 6 
  MW[7]=MI.2.MD_HBO_SR3P           ;Table 7 
  MW[8]=MI.2.MD_NHB_DA             ;Table 8 
  MW[9]=MI.2.MD_NHB_SR2            ;Table 9 
  MW[10]=MI.2.MD_NHB_SR3P          ;Table 10 

;                                           MW>VOL
  MW[1]=MI.1.MD_TRK_IEII             ;Table 1 >7
  MW[11]=MI.1.MD_TRK_EE              ;Table 11 >8
  MW[12]=MI.1.MD_DA_EE               ;Table 12 >9
  MW[13]=MI.1.MD_SR2_EE              ;Table 13 >10
  MW[14]=MI.1.MD_SR3_EE              ;Table 14 >11
  MW[15]=MI.1.MD_PortTrk             ;Table 15 >12

;=====================
;Per-KDK
;Skim Time and Cost, assuming auto operating costs is the same for toll and free links
; Get straight time skim for free paths (toll links excluded)
; Get straight time skim for free paths (toll links excluded)
PATHLOAD PATH=TIME PENI=1, EXCLUDEGROUP=5,9,MW[21]=PATHTRACE(TIME),NOACCESS=999
; Get time and cost skims for DA, which may include tolls
PATHLOAD PATH=TIME PENI=1, EXCLUDEGROUP=9,  MW[22]=PATHTRACE(TIME),NOACCESS=999,MW[23]=PATHTRACE(LW.MYTOLL),NOACCESS=999,
; Get time and cost skims for SR3+, which may include non-HOT tolls (HOT is free)
                                      MW[27]=PATHTRACE(LI.CARTOLL),NOACCESS=999,
; Set flag for use of HOT lanes
                                      MW[99]=PATHTRACE(LI.HOT),NOACCESS=0
; Get time and cost skims for SR2, which may include tolls
  MW[24]=MW[22]                  ;time- non-free
  MW[25]=0.5*MW[23]              ;mytoll=hottoll+cartoll
; Get time skims for SR3+
  MW[26]=MW[22]                  ;time- non-free 
; Get cost skims for SR3+, which may include non-HOT tolls
  MW[27]=0.3125*MW[27] ; assume 3.2 occ
;
; CHOICE MODEL
;kdk-S65:  c_o=CNTY(1,i);get county number
;  combinations by o & d
   loop p=1,3
   jloop
     if((MW[23]<=0) && (MW[21]<999)) ; if there is no toll skim, all must be free
       SfreeDA  = 1.0  
       SfreeSR2 = 1.0  
       SfreeSR3 = 1.0
     elseif(MW[21]>=999) ; if there is no free skim, all must be placed in the "toll" table
       SfreeDA  = 0.0  
       SfreeSR2 = 0.0  
       SfreeSR3 = 0.0
     else  
;kdk-S65:      c_d=CNTY(1,j)
       ;get coefficients
;xx       dexi = 3*(c_o-1)+p
;kdk-S65:       dexj = 3*(c_d-1)+p
;xx       cti =KON(1,dexi); time coef for i
;xx       cci =KON(2,dexi); cost coef for i
;xx       tfki=KON(3,dexi); toll free constant for i
;kdk-S65:       ctj =KON(1,dexj); time coef for j
;kdk-S65:       ccj =KON(2,dexj); cost coef for j
;kdk-S65:       tfkj=KON(3,dexj); toll free constant for j

       ctp =KON(1,p); time coef for purpose p
       ccp =KON(2,p); cost coef for purpose p
       tfkp=KON(3,p); toll free constant for purpose p

;xx
;xx
;xx       if(dexi=dexj) ; both ends in the same county
;xx          ct=cti
;xx          cc=cci
;xx         tfk=tfki
;xx       else          ; average 2 counties because true Home zone in O-D format is unknown
;xx          ct =0.5*(cti+ctj)
;xx          cc =0.5*(cci+ccj)
;xx          tfk=0.5*(tfki+tfkj)
;xx       endif
;xx
;xx
; SET HOT LANES USE BIAS - 
       if(mw[99]>0) 
          hbias=KON(3,5); HOT bias stored in 5th record
       else
          hbias=0.0
       endif
; OVERRIDE EVERYTHING FOR TEST OF USING CONSTANTS FROM THE *DESTINATION* ZONE ****************
;     rationale - most origins are the non-home end in the PM peak
;kdk-S65:          ct=ctj
;kdk-S65:          cc=ccj
;kdk-S65:         tfk=tfkj + hbias
          ct=ctp
          cc=ccp
          tfk=tfkp + hbias
; ***************************************************************************************
       UfreeDA = ct*MW[21] + tfk
       UfreeSR2= UfreeDA;     ct*MW[21] + tfk
       UfreeSR3= UfreeDA;     ct*MW[21] + tfk
       UtollDA = ct*MW[22] + cc*MW[23]
       UtollSR2= ct*MW[24] + cc*MW[25]
       UtollSR3= ct*MW[26] + cc*MW[27]

       SfreeDA = 1.0/(1.0+exp(UtollDA-UfreeDA)); binary logit form
       ;StollDA = 1.0 - SfreeDA
       SfreeSR2= 1.0/(1.0+exp(UtollSR2-UfreeSR2))
       ;StollSR2= 1.0 - SfreeSR2
       SfreeSR3= 1.0/(1.0+exp(UtollSR3-UfreeSR3))
       ;StollSR3= 1.0 - SfreeSR3
; for test ****************************************************************************
;       if(mw[99]>0) 
;            SfreeDA =0
;            SfreeSR2=0
;            SfreeSR3=0
;       endif
; for test ****************************************************************************
     endif 
 
       dex = 3*(p-1)+2
       k3=3*(p-1)+31
       k4=k3+10; 2*(p-1)+41
       mw[k3] = mw[dex]*SfreeDA  ; free DA
       mw[k4] = mw[dex] - mw[k3] ; toll DA

       dex2 = dex+1; 3*(p-1)+3
       k5=k3+1;      3*(p-1)+32
       k6=k5+10;     2*(p-1)+42
       mw[k5] = mw[dex2]*SfreeSR2 ; free SR2
       mw[k6] = mw[dex2] - mw[k5] ; toll SR2

       dex3 = dex+2; 3*(p-1)+3
       k7=k5+1;      3*(p-1)+33
       k8=k7+10;     2*(p-1)+42
       mw[k7] = mw[dex3]*SfreeSR3 ; free SR3+
       mw[k8] = mw[dex3] - mw[k7] ; toll SR3+

       if(MW[23]<> 0);tabluate free trips when there is a choice - some toll on the path
          kf3=k3+70
          mw[kf3]=mw[k3]; choice free DA

          kf5=kf3+1
          mw[kf5]=mw[k5]; choice free SR2

          kf7=kf5+1
          mw[kf7]=mw[k7]; choice free SR3+
       endif

;EETRIPS Block- Using HBO shares for EE trips...
       if(p=2) ; use HBO shares
          mw[51]=mw[12]*SfreeDA  ; EE DA free
          mw[52]=mw[12]-mw[51]   ; EE DA toll

          mw[53]=mw[13]*SfreeSR2  ; EE SR2 free
          mw[54]=mw[13]-mw[53]   ; EE SR2 toll

          mw[55]=mw[14]*SfreeSR3  ; EE SR3 free
          mw[56]=mw[14]-mw[55]   ; EE SR3 toll
       endif
;EETRIPS Block

   endjloop
   endloop
 
   MW[61] = mw[31] +mw[34] + mw[37] ;drive alone free
   MW[62] = mw[32] +mw[35] + mw[38] ;SR2 free
   MW[63] = mw[33] +mw[36] + mw[39] ;SR3+free
   MW[64] = mw[41] +mw[44] + mw[47] ;drive alone toll
   MW[65] = mw[42] +mw[45] + mw[48] ;SR2 toll
   MW[66] = mw[43] +mw[46] + mw[49] ;SR3+toll
 
;kdk-S65: MW[01] = MW[01]/[PCE-TRK]        ;truck vehicles

;=====================
;SKS- The Select Link Volume sets exceed the maximimum limitation of 20. So assignment with select link was turned off here...
;Per CV documentation, Volume set index range is 1-20; there may be up to 20 volume sets in a single application of Highway. 

 ;FREE LINKS - toll links probibited
  PATHLOAD PATH=TIME, VOL[1]=MW[61], PENI=1, EXCLUDEGROUP=1,5,9  ;Without HOV (DA-Free)
  PATHLOAD PATH=TIME, VOL[2]=MW[62], PENI=1, EXCLUDEGROUP=3,5,9  ;With HOV2 (SR2-Free)
 ;ALL links -toll allowed
  PATHLOAD PATH=TIME, VOL[3]=MW[64], PENI=1, EXCLUDEGROUP=1,9    ;Without HOV (DA-Toll)
  PATHLOAD PATH=TIME, VOL[4]=MW[65], PENI=1, EXCLUDEGROUP=3,9    ;With HOV2  (SR2-Toll)
 ;SR3+ free
  PATHLOAD PATH=TIME, VOL[5]=MW[63], PENI=1, EXCLUDEGROUP=6,9    ;With HOV3+ (SR3-Free)
 ;SR3+ toll
  PATHLOAD PATH=TIME, VOL[6]=MW[66], PENI=1, EXCLUDEGROUP=9      ;With HOV3+ (SR3-Toll)

 ;Trucks
  PATHLOAD PATH=COST, PENI=1, VOL[7]=MW[1],   EXCLUDEGROUP=1,3,8,9    ;IE&II- TRK(7<1) - Not on HOV/HOT  
  PATHLOAD PATH=COST, PENI=1, VOL[12]=MW[15], EXCLUDEGROUP=1,2,3,8,9  ;JaxportTrk(12<15) -Not on HOV/HOT

 ;EE Trips
  if(i>{ZONESI})
   PATHLOAD PATH=COST, PENI=1, VOL[8]=MW[11],EXCLUDEGROUP=1,2,3,8,9, excludej=1-{ZONESI} ;EE- TRK(8<11)-Not on HOV/HOT
   PATHLOAD PATH=TIME, PENI=1, VOL[9]=MW[51],  EXCLUDEGROUP=1,2,5,9, excludej=1-{ZONESI} ;EE-DA-Free(9<51)
   PATHLOAD PATH=TIME, PENI=1, VOL[13]=MW[52], EXCLUDEGROUP=1,2,9,   excludej=1-{ZONESI} ;EE-DA-Toll(13<52)
   PATHLOAD PATH=TIME, PENI=1, VOL[10]=MW[53], EXCLUDEGROUP=2,3,5,9, excludej=1-{ZONESI} ;EE-SR2-Free(10<53)
   PATHLOAD PATH=TIME, PENI=1, VOL[14]=MW[54], EXCLUDEGROUP=2,3,9,   excludej=1-{ZONESI} ;EE-SR2-Toll(14<54)
   PATHLOAD PATH=TIME, PENI=1, VOL[11]=MW[55], EXCLUDEGROUP=2,6,9,   excludej=1-{ZONESI} ;EE-SR3-Free(11<55)
   PATHLOAD PATH=TIME, PENI=1, VOL[15]=MW[56], EXCLUDEGROUP=2,9,     excludej=1-{ZONESI} ;EE-SR3-Free(11<56)
  endif

ENDPROCESS


PROCESS PHASE=ADJUST
;Define volume to be used for V/C calculation
FUNCTION   V=VOL[1]+VOL[2]+VOL[3]+VOL[4]+VOL[5]+VOL[6]+VOL[7]+VOL[8]+VOL[9]+VOL[10]+VOL[11]+VOL[12]+VOL[13]+VOL[14]+VOL[15]

if (time>0) LW.CGSTSPEED=(LW.DISTANCE/TIME)*60

if (li.cartoll>0)
 LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFACMDP/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
 LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)                ; Plaza lane service time in minutes per vehicle
 LW.SERVR=(1/LW.SERVT)*60                                 ; Plaza lane service rate in vehicle per hour
 if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR         ; prevent infinite or negative queue
PRINT LIST='ARRIVR= ',LW.ARRIVR
PRINT LIST='SERVT= ',LW.SERVT
PRINT LIST='SERVR= ',LW.SERVR
PRINT LIST='TOLLTIME= ',TIME
endif
if (lw.servr-lw.arrivr=0.0) lw.servr=lw.servr+0.01

;Update Time and Cost for PATHLOAD
;---TIME is TIME plus regular toll time and toll equivalent time
;---COST is Time plus HOT toll time equivalent
;Capture HOT toll time equivalent

; Dynamic HOTTOLL removed - now a fixed rate per mile in linkread
;IF(LI.HOT=1)
;  LW.VCVAL=V/C ; V/C CALCULATION
;  MINHOTTOLL=0.12          ; Minimum HOT lane toll 12 cents per mile
;  MAXHOTTOLL=0.25          ; Maximum HOT lane toll 25 cents per mile
;  LW.HOTTOLL = MINHOTTOLL+(MAXHOTTOLL-MINHOTTOLL)/(1+EXP(6-9*LW.VCVAL))    ;LOGIT EQN APPLIED
;ELSE
;    LW.HOTTOLL=0
;ENDIF

;KDK replace LI.TIME with T0 for toll choice
;Define EACH LINKCLASS TC and COST Functions
; Link Class 1 - Non Regular Toll (it may be a HOT link)
 FUNCTION TC[1]   = T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT)
 FUNCTION COST[1] = T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT)+LI.DISTANCE*(LW.HOTTOLL)*60*{CTOLL}

;Link Class 2 - Regular Tollplaza Link (Never HOT link)
 ;FUNCTION   TC[2]=MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) + {CTOLL}*LI.CARTOLL*60        ; congested time for toll links
 FUNCTION   TC[2]=T0; MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) ; don't include toll in toll choice time; congested time for toll links
;Ommit service time from toll choice: 
 FUNCTION COST[2]=MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) + {CTOLL}*LI.CARTOLL*60        ; congested time for toll links

; Link Class 3 - Regular Toll Accln Link (Never HOT link)
 FUNCTION   TC[3]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) ;Omit accel from toll choice: + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links
 FUNCTION COST[3]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links

; Link Class 4 - Regular Toll Decln Link (Never HOT link)
 FUNCTION   TC[4]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) ;Omit deccel from toll choice: + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 FUNCTION COST[4]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 
; Link Class 5 - Transit Optional Link 
 FUNCTION   TC[5]=T0                                                            ;congested time transit-only optional links
 FUNCTION COST[5]=T0                                                            ;congested time transit-only optional links

 
if (li.cartoll>0) print list="Iter:",iteration(2.0)," TOLLFM Summary, A=",A(6.0)," B=",B(6.0)," PLAZAID=",li.TOLL(3.0)," NAME=",li.PLAZADESC(24)," MAX LNS=",li.PLZALNSMAX," GCOST=",TIME(6.2),
        printo=1


ENDPROCESS

; Converge phase is new for Cube 4.0.
PHASE=CONVERGE
  IF (ITERATION < 6) BREAK; Do not even test for Iterations 2-5
  IF (GAP[ITERATION]<GAPCUTOFF & GAP[ITERATION-1]<GAPCUTOFF & GAP[ITERATION-2]<GAPCUTOFF)
;  IF (RGAP[ITERATION]<RGAPCUTOFF & RGAP[ITERATION-1]<RGAPCUTOFF & RGAP[ITERATION-2]<RGAPCUTOFF)
     BALANCE = 1
  ENDIF

ENDPROCESS


ENDRUN


; Script for program HIGHWAY in file "C:\NERPM43\APPLICATIONS\HTHWY00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=HIGHWAY PRNFILE="{SCENARIO_DIR}\output\HTHWY00C.PRN" MSG='PM Period Hwy Assignment'
FILEI NETI = "{SCENARIO_DIR}\output\UNLOADED.NET"
FILEI MATI[2] = "C:\NERPM43\Base2005\INT2010\Output\HWYTTBP_PM_A10.MAT"
FILEI MATI[1] = "C:\NERPM43\Base2005\INT2010\Output\HWYTTAB_PM.MAT"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI LOOKUPI[2] = "{CATALOG_DIR}\parameters\HOT_TOLL.dbf"
FILEI LOOKUPI[1] = "{CATALOG_DIR}\parameters\TCHOICE_PM.dbf"

FILEI TURNPENI = "{SCENARIO_DIR}\input\tcards_{Year}{alt}.pen"
FILEO TURNVOLO[1] = "{SCENARIO_DIR}\output\TURNS_PM.BIN"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\PMPeriod_TollReport.PRN"
FILEO NETO = "{SCENARIO_DIR}\output\FINAL_ASGN_PM.NET"

PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} RAAD=0.00000 AAD=0.000000 RMSE=0.000000 GAP=0.00025; RELATIVEGAP=0.001
;PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;
;PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS=7 GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;

;TURNS N=1-999999
TURNS N=39782,40555,40265,40258,40241,40568

;Per-KDK
LOOKUP LOOKUPI=1,
       NAME=KON,
       LOOKUP[1]=REC, RESULT=CT,
       LOOKUP[2]=REC, RESULT=CC,
       LOOKUP[3]=REC, RESULT=TFK,
       FAIL[1]=0,FAIL[2]=0,FAIL[3]=0

LOOKUP LOOKUPI=2,
       NAME=HOTTOLL,
       LOOKUP[1]=HOT, RESULT=PM_TOLL_MI,
       FAIL[1]=0,FAIL[2]=0,FAIL[3]=0

; look up deceleration rate based on approach speed
LOOKUP,
 INTERPOLATE=Y, LIST=Y, NAME=DECEL,
        LOOKUP[1]=1,RESULT=2,
R = '30 4',
    '70 6.2'

PROCESS PHASE=LINKREAD

;Basics...
  lw.distance=li.distance
  DISTANCE=LW.DISTANCE
  T0=li.TIME
  LW.FFTIME=LI.TIME                                         ; USE FOR PRELOAD PURPOSES (FFTIME)
  C=LI.CAPACITY*LI.NUM_LANES*LI.UROADFACTOR/LI.CONFACPMP
;Save PM Period Total capacity
  CAPACITY_PMP=C

;Per-KDK
; HOT TOLL RATE/mile from lookup table
HOT_TOLL_PMILE = HOTTOLL(1,LI.HOT)
IF(LI.HOT>=1)
  LW.HOTTOLL = DISTANCE*HOT_TOLL_PMILE
ELSE
    LW.HOTTOLL=0
ENDIF
LW.MYTOLL=LW.HOTTOLL+LI.CARTOLL
LW.MYTOLL2=0.5*LW.MYTOLL

;Set EXCLUDE VOLUME GROUP for PATHLOAD...
  IF (li.FACILITY_TYPE=86,88,89 & LI.HOT=0) ADDTOGROUP=1         ;HOV 2 & 3+ Facilities (FT=87 AM Only) => Exclude DA and Truck Volume Groups  
  IF (li.FACILITY_TYPE=82 & LI.HOT=0) ADDTOGROUP=3               ;HOV 3+ Facilities => Exclude HOV2 Volume Groups
;Note Dummy HOT ramps are coded as HOT=-1 and their facility_type changed to 69 (transit only)
;  IF (li.HOT=2) ADDTOGROUP=4                                     ;Dummy Entrance and Exit from HOT facility

  IF (li.EECODE>0) ADDTOGROUP=2                                  ;EE PROHIBITED LINKS =>Exclude External Volume Groups
;  IF (LI.{PATHGROUP}) ADDTOGROUP=7 ; DEFINE A SUBSET FOR PATHFILE

  IF (li.HOT>=1) ADDTOGROUP=8                                     ;HOT Lane Facility
  IF (li.FACILITY_TYPE=49,59,69) ADDTOGROUP=9                    ;TRANSIT ONLY FACILITIES =>Exclude all Highway Volume Groups

;Per-KDK
   IF (LI.HOT>=1 | li.FACILITY_TYPE=91-99) ADDTOGROUP=5       ;Any kind of toll road -- KDK
   IF (li.FACILITY_TYPE=91-99) ADDTOGROUP=6                   ;Non-HOT toll road -- KDK

; classify links based on presence/absence of tolls
      LINKCLASS=1                                        ;no toll
      if (li.cartoll>0)           
       LINKCLASS=2                                       ;with toll

       T0=({CTOLL}*LI.CARTOLL)*60 + LI.SVCMINUTES + LI.SVCSECONDS/60

       if (iteration=0)
        LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFACPMP/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
        LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)                ; Plaza lane service time in minutes per vehicle
        LW.SERVR=(1/LW.SERVT)*60                                 ; Plaza lane service rate in vehicle per hour
        PRINT LIST='ARRIVR= ',LW.ARRIVR
        PRINT LIST='SERVT= ',LW.SERVT
        PRINT LIST='SERVR= ',LW.SERVR
        if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR         ; prevent infinite or negative queue
       endif

      endif

      if (li.TOLL_ACC>0)
       LINKCLASS=3                                               ; Toll Plaza Acceleration link
       T0= T0 + (LI.SPEED/2.5)/60
      endif

      if (li.TOLL_DEC>0)
       LINKCLASS=4                                               ; Toll Plaza Deceleration link
       T0 = T0 + (LI.SPEED/DECEL(1,LI.SPEED))/60
      endif

     IF (li.FACILITY_TYPE=49,59,69) LINKCLASS=5                   ;Transit non-Highway optional links


ENDPROCESS

PROCESS PHASE=ILOOP

  MW[2]=MI.2.PM_HBW_DA             ;Table 2 
  MW[3]=MI.2.PM_HBW_SR2            ;Table 3 
  MW[4]=MI.2.PM_HBW_SR3P           ;Table 4 
  MW[5]=MI.2.PM_HBO_DA             ;Table 5 
  MW[6]=MI.2.PM_HBO_SR2            ;Table 6 
  MW[7]=MI.2.PM_HBO_SR3P           ;Table 7 
  MW[8]=MI.2.PM_NHB_DA             ;Table 8 
  MW[9]=MI.2.PM_NHB_SR2            ;Table 9 
  MW[10]=MI.2.PM_NHB_SR3P          ;Table 10 

;                                           MW>VOL
  MW[1]=MI.1.PM_TRK_IEII             ;Table 1 >7
  MW[11]=MI.1.PM_TRK_EE              ;Table 11 >8
  MW[12]=MI.1.PM_DA_EE               ;Table 12 >9
  MW[13]=MI.1.PM_SR2_EE              ;Table 13 >10
  MW[14]=MI.1.PM_SR3_EE              ;Table 14 >11
  MW[15]=MI.1.PM_PortTrk             ;Table 15 >12

;=====================
;Per-KDK
;Skim Time and Cost, assuming auto operating costs is the same for toll and free links
; Get straight time skim for free paths (toll links excluded)
PATHLOAD PATH=TIME PENI=1, EXCLUDEGROUP=5,9,MW[21]=PATHTRACE(TIME),NOACCESS=999
; Get time and cost skims for DA, which may include tolls
PATHLOAD PATH=TIME PENI=1, EXCLUDEGROUP=9,  MW[22]=PATHTRACE(TIME),NOACCESS=999,MW[23]=PATHTRACE(LW.MYTOLL),NOACCESS=999,
; Get time and cost skims for SR3+, which may include non-HOT tolls (HOT is free)
                                      MW[27]=PATHTRACE(LI.CARTOLL),NOACCESS=999,
; Set flag for use of HOT lanes
                                      MW[99]=PATHTRACE(LI.HOT),NOACCESS=0
; Get time and cost skims for SR2, which may include tolls
  MW[24]=MW[22]                  ;time- non-free
  MW[25]=0.5*MW[23]              ;mytoll=hottoll+cartoll
; Get time skims for SR3+
  MW[26]=MW[22]                  ;time- non-free 
; Get cost skims for SR3+, which may include non-HOT tolls
  MW[27]=0.3125*MW[27] ; assume 3.2 occ
;
; CHOICE MODEL
;kdk-S65:  c_o=CNTY(1,i);get county number
;  combinations by o & d
   loop p=1,3
   jloop
     if((MW[23]<=0) && (MW[21]<999)) ; if there is no toll skim, all must be free
       SfreeDA  = 1.0  
       SfreeSR2 = 1.0  
       SfreeSR3 = 1.0
     elseif(MW[21]>=999) ; if there is no free skim, all must be placed in the "toll" table
       SfreeDA  = 0.0  
       SfreeSR2 = 0.0  
       SfreeSR3 = 0.0
     else  
;kdk-S65:      c_d=CNTY(1,j)
       ;get coefficients
;xx       dexi = 3*(c_o-1)+p
;kdk-S65:       dexj = 3*(c_d-1)+p
;xx       cti =KON(1,dexi); time coef for i
;xx       cci =KON(2,dexi); cost coef for i
;xx       tfki=KON(3,dexi); toll free constant for i
;kdk-S65:       ctj =KON(1,dexj); time coef for j
;kdk-S65:       ccj =KON(2,dexj); cost coef for j
;kdk-S65:       tfkj=KON(3,dexj); toll free constant for j

       ctp =KON(1,p); time coef for purpose p
       ccp =KON(2,p); cost coef for purpose p
       tfkp=KON(3,p); toll free constant for purpose p

;xx
;xx
;xx       if(dexi=dexj) ; both ends in the same county
;xx          ct=cti
;xx          cc=cci
;xx         tfk=tfki
;xx       else          ; average 2 counties because true Home zone in O-D format is unknown
;xx          ct =0.5*(cti+ctj)
;xx          cc =0.5*(cci+ccj)
;xx          tfk=0.5*(tfki+tfkj)
;xx       endif
;xx
;xx
; SET HOT LANES USE BIAS - 
       if(mw[99]>0) 
          hbias=KON(3,5); HOT bias stored in 5th record
       else
          hbias=0.0
       endif
; OVERRIDE EVERYTHING FOR TEST OF USING CONSTANTS FROM THE *DESTINATION* ZONE ****************
;     rationale - most origins are the non-home end in the PM peak
;kdk-S65:          ct=ctj
;kdk-S65:          cc=ccj
;kdk-S65:         tfk=tfkj + hbias
          ct=ctp
          cc=ccp
          tfk=tfkp + hbias
; ***************************************************************************************
       UfreeDA = ct*MW[21] + tfk
       UfreeSR2= UfreeDA;     ct*MW[21] + tfk
       UfreeSR3= UfreeDA;     ct*MW[21] + tfk
       UtollDA = ct*MW[22] + cc*MW[23]
       UtollSR2= ct*MW[24] + cc*MW[25]
       UtollSR3= ct*MW[26] + cc*MW[27]

       SfreeDA = 1.0/(1.0+exp(UtollDA-UfreeDA)); binary logit form
       ;StollDA = 1.0 - SfreeDA
       SfreeSR2= 1.0/(1.0+exp(UtollSR2-UfreeSR2))
       ;StollSR2= 1.0 - SfreeSR2
       SfreeSR3= 1.0/(1.0+exp(UtollSR3-UfreeSR3))
       ;StollSR3= 1.0 - SfreeSR3
; for test ****************************************************************************
;       if(mw[99]>0) 
;            SfreeDA =0
;            SfreeSR2=0
;            SfreeSR3=0
;       endif
; for test ****************************************************************************
     endif 
 
       dex = 3*(p-1)+2
       k3=3*(p-1)+31
       k4=k3+10; 2*(p-1)+41
       mw[k3] = mw[dex]*SfreeDA  ; free DA
       mw[k4] = mw[dex] - mw[k3] ; toll DA

       dex2 = dex+1; 3*(p-1)+3
       k5=k3+1;      3*(p-1)+32
       k6=k5+10;     2*(p-1)+42
       mw[k5] = mw[dex2]*SfreeSR2 ; free SR2
       mw[k6] = mw[dex2] - mw[k5] ; toll SR2

       dex3 = dex+2; 3*(p-1)+3
       k7=k5+1;      3*(p-1)+33
       k8=k7+10;     2*(p-1)+42
       mw[k7] = mw[dex3]*SfreeSR3 ; free SR3+
       mw[k8] = mw[dex3] - mw[k7] ; toll SR3+

       if(MW[23]<> 0);tabluate free trips when there is a choice - some toll on the path
          kf3=k3+70
          mw[kf3]=mw[k3]; choice free DA

          kf5=kf3+1
          mw[kf5]=mw[k5]; choice free SR2

          kf7=kf5+1
          mw[kf7]=mw[k7]; choice free SR3+
       endif

;EETRIPS Block- Using HBO shares for EE trips...
       if(p=2) ; use HBO shares
          mw[51]=mw[12]*SfreeDA  ; EE DA free
          mw[52]=mw[12]-mw[51]   ; EE DA toll

          mw[53]=mw[13]*SfreeSR2  ; EE SR2 free
          mw[54]=mw[13]-mw[53]   ; EE SR2 toll

          mw[55]=mw[14]*SfreeSR3  ; EE SR3 free
          mw[56]=mw[14]-mw[55]   ; EE SR3 toll
       endif
;EETRIPS Block

   endjloop
   endloop
 
   MW[61] = mw[31] +mw[34] + mw[37] ;drive alone free
   MW[62] = mw[32] +mw[35] + mw[38] ;SR2 free
   MW[63] = mw[33] +mw[36] + mw[39] ;SR3+free
   MW[64] = mw[41] +mw[44] + mw[47] ;drive alone toll
   MW[65] = mw[42] +mw[45] + mw[48] ;SR2 toll
   MW[66] = mw[43] +mw[46] + mw[49] ;SR3+toll
 
;kdk-S65: MW[01] = MW[01]/[PCE-TRK]        ;truck vehicles

;=====================
;SKS- The Select Link Volume sets exceed the maximimum limitation of 20. So assignment with select link was turned off here...
;Per CV documentation, Volume set index range is 1-20; there may be up to 20 volume sets in a single application of Highway. 

 ;FREE LINKS - toll links probibited
  PATHLOAD PATH=TIME, VOL[1]=MW[61], PENI=1, EXCLUDEGROUP=1,5,9  ;Without HOV (DA-Free)
  PATHLOAD PATH=TIME, VOL[2]=MW[62], PENI=1, EXCLUDEGROUP=3,5,9  ;With HOV2 (SR2-Free)
 ;ALL links -toll allowed
  PATHLOAD PATH=TIME, VOL[3]=MW[64], PENI=1, EXCLUDEGROUP=1,9    ;Without HOV (DA-Toll)
  PATHLOAD PATH=TIME, VOL[4]=MW[65], PENI=1, EXCLUDEGROUP=3,9    ;With HOV2  (SR2-Toll)
 ;SR3+ free
  PATHLOAD PATH=TIME, VOL[5]=MW[63], PENI=1, EXCLUDEGROUP=6,9    ;With HOV3+ (SR3-Free)
 ;SR3+ toll
  PATHLOAD PATH=TIME, VOL[6]=MW[66], PENI=1, EXCLUDEGROUP=9      ;With HOV3+ (SR3-Toll)

 ;Trucks
  PATHLOAD PATH=COST, PENI=1, VOL[7]=MW[1],   EXCLUDEGROUP=1,3,8,9    ;IE&II- TRK(7<1) - Not on HOV/HOT  
  PATHLOAD PATH=COST, PENI=1, VOL[12]=MW[15], EXCLUDEGROUP=1,2,3,8,9  ;JaxportTrk(12<15) -Not on HOV/HOT

 ;EE Trips
  if(i>{ZONESI})
   PATHLOAD PATH=COST, PENI=1, VOL[8]=MW[11],EXCLUDEGROUP=1,2,3,8,9, excludej=1-{ZONESI} ;EE- TRK(8<11)-Not on HOV/HOT
   PATHLOAD PATH=TIME, PENI=1, VOL[9]=MW[51],  EXCLUDEGROUP=1,2,5,9, excludej=1-{ZONESI} ;EE-DA-Free(9<51)
   PATHLOAD PATH=TIME, PENI=1, VOL[13]=MW[52], EXCLUDEGROUP=1,2,9,   excludej=1-{ZONESI} ;EE-DA-Toll(13<52)
   PATHLOAD PATH=TIME, PENI=1, VOL[10]=MW[53], EXCLUDEGROUP=2,3,5,9, excludej=1-{ZONESI} ;EE-SR2-Free(10<53)
   PATHLOAD PATH=TIME, PENI=1, VOL[14]=MW[54], EXCLUDEGROUP=2,3,9,   excludej=1-{ZONESI} ;EE-SR2-Toll(14<54)
   PATHLOAD PATH=TIME, PENI=1, VOL[11]=MW[55], EXCLUDEGROUP=2,6,9,   excludej=1-{ZONESI} ;EE-SR3-Free(11<55)
   PATHLOAD PATH=TIME, PENI=1, VOL[15]=MW[56], EXCLUDEGROUP=2,9,     excludej=1-{ZONESI} ;EE-SR3-Free(11<56)
  endif

ENDPROCESS


PROCESS PHASE=ADJUST
;Define volume to be used for V/C calculation
FUNCTION   V=VOL[1]+VOL[2]+VOL[3]+VOL[4]+VOL[5]+VOL[6]+VOL[7]+VOL[8]+VOL[9]+VOL[10]+VOL[11]+VOL[12]+VOL[13]+VOL[14]+VOL[15]

if (time>0) LW.CGSTSPEED=(LW.DISTANCE/TIME)*60

if (li.cartoll>0)
 LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFACPMP/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
 LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)                ; Plaza lane service time in minutes per vehicle
 LW.SERVR=(1/LW.SERVT)*60                                 ; Plaza lane service rate in vehicle per hour
 if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR         ; prevent infinite or negative queue
PRINT LIST='ARRIVR= ',LW.ARRIVR
PRINT LIST='SERVT= ',LW.SERVT
PRINT LIST='SERVR= ',LW.SERVR
PRINT LIST='TOLLTIME= ',TIME
endif
if (lw.servr-lw.arrivr=0.0) lw.servr=lw.servr+0.01

;Update Time and Cost for PATHLOAD
;---TIME is TIME plus regular toll time and toll equivalent time
;---COST is Time plus HOT toll time equivalent
;Capture HOT toll time equivalent

; Dynamic HOTTOLL removed - now a fixed rate per mile in linkread
;IF(LI.HOT=1)
;  LW.VCVAL=V/C ; V/C CALCULATION
;  MINHOTTOLL=0.12          ; Minimum HOT lane toll 12 cents per mile
;  MAXHOTTOLL=0.25          ; Maximum HOT lane toll 25 cents per mile
;  LW.HOTTOLL = MINHOTTOLL+(MAXHOTTOLL-MINHOTTOLL)/(1+EXP(6-9*LW.VCVAL))    ;LOGIT EQN APPLIED
;ELSE
;    LW.HOTTOLL=0
;ENDIF

;KDK replace LI.TIME with T0 for toll choice
;Define EACH LINKCLASS TC and COST Functions
; Link Class 1 - Non Regular Toll (it may be a HOT link)
 FUNCTION TC[1]   = T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT)
 FUNCTION COST[1] = T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT)+LI.DISTANCE*(LW.HOTTOLL)*60*{CTOLL}

;Link Class 2 - Regular Tollplaza Link (Never HOT link)
 ;FUNCTION   TC[2]=MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) + {CTOLL}*LI.CARTOLL*60        ; congested time for toll links
 FUNCTION   TC[2]=T0; MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) ; don't include toll in toll choice time; congested time for toll links
;Ommit service time from toll choice: 
 FUNCTION COST[2]=MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) + {CTOLL}*LI.CARTOLL*60        ; congested time for toll links

; Link Class 3 - Regular Toll Accln Link (Never HOT link)
 FUNCTION   TC[3]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) ;Omit accel from toll choice: + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links
 FUNCTION COST[3]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links

; Link Class 4 - Regular Toll Decln Link (Never HOT link)
 FUNCTION   TC[4]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) ;Omit deccel from toll choice: + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 FUNCTION COST[4]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 
; Link Class 5 - Transit Optional Link 
 FUNCTION   TC[5]=T0                                                            ;congested time transit-only optional links
 FUNCTION COST[5]=T0                                                            ;congested time transit-only optional links

 
if (li.cartoll>0) print list="Iter:",iteration(2.0)," TOLLFM Summary, A=",A(6.0)," B=",B(6.0)," PLAZAID=",li.TOLL(3.0)," NAME=",li.PLAZADESC(24)," MAX LNS=",li.PLZALNSMAX," GCOST=",TIME(6.2),
        printo=1


ENDPROCESS

; Converge phase is new for Cube 4.0.
PHASE=CONVERGE
  IF (ITERATION < 6) BREAK; Do not even test for Iterations 2-5
  IF (GAP[ITERATION]<GAPCUTOFF & GAP[ITERATION-1]<GAPCUTOFF & GAP[ITERATION-2]<GAPCUTOFF)
;  IF (RGAP[ITERATION]<RGAPCUTOFF & RGAP[ITERATION-1]<RGAPCUTOFF & RGAP[ITERATION-2]<RGAPCUTOFF)
     BALANCE = 1
  ENDIF

ENDPROCESS


ENDRUN


; Script for program HIGHWAY in file "C:\NERPM43\APPLICATIONS\HTHWY00D.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=HIGHWAY PRNFILE="{SCENARIO_DIR}\output\HTHWY00D.PRN" MSG='Night Period Hwy Assignment'
FILEI NETI = "{SCENARIO_DIR}\output\UNLOADED.NET"
FILEI MATI[2] = "C:\NERPM43\Base2005\INT2010\Output\HWYTTBP_NT_A10.MAT"
FILEI MATI[1] = "C:\NERPM43\Base2005\INT2010\Output\HWYTTAB_NT_A10.MAT"
DISTRIBUTEINTRASTEP PROCESSID='NERPM4Dist', PROCESSLIST=1-%NUMBER_OF_PROCESSORS%,MinGroupSize=20,SavePrn=F
;DistributeINTRASTEP ProcessID='NERPM4Dist', ProcessList=1-4

FILEI LOOKUPI[2] = "{CATALOG_DIR}\parameters\HOT_TOLL.dbf"
FILEI LOOKUPI[1] = "{CATALOG_DIR}\parameters\TCHOICE_NT.dbf"

FILEI TURNPENI = "{SCENARIO_DIR}\input\tcards_{Year}{alt}.pen"
FILEO TURNVOLO[1] = "{SCENARIO_DIR}\output\TURNS_NT.BIN"
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\NTPeriod_TollReport.PRN"
FILEO NETO = "{SCENARIO_DIR}\output\FINAL_ASGN_NT.NET"

PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} RAAD=0.00000 AAD=0.000000 RMSE=0.000000 GAP=0.00025; RELATIVEGAP=0.001
;PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS={iter} GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;
;PAR ZONEMSG=100 COMBINE=EQUI ENHANCE=2 MAXITERS=7 GAP=0.0005 RAAD=0.00000 AAD=0.000000 RMSE=0.000000 ;

;TURNS N=1-999999
TURNS N=39782,40555,40265,40258,40241,40568

;Per-KDK
LOOKUP LOOKUPI=1,
       NAME=KON,
       LOOKUP[1]=REC, RESULT=CT,
       LOOKUP[2]=REC, RESULT=CC,
       LOOKUP[3]=REC, RESULT=TFK,
       FAIL[1]=0,FAIL[2]=0,FAIL[3]=0

LOOKUP LOOKUPI=2,
       NAME=HOTTOLL,
       LOOKUP[1]=HOT, RESULT=NT_TOLL_MI,
       FAIL[1]=0,FAIL[2]=0,FAIL[3]=0

; look up deceleration rate based on approach speed
LOOKUP,
 INTERPOLATE=Y, LIST=Y, NAME=DECEL,
        LOOKUP[1]=1,RESULT=2,
R = '30 4',
    '70 6.2'

PROCESS PHASE=LINKREAD

;Basics...
  lw.distance=li.distance
  DISTANCE=LW.DISTANCE
  T0=li.TIME
  LW.FFTIME=LI.TIME                                         ; USE FOR PRELOAD PURPOSES (FFTIME)
  C=LI.CAPACITY*LI.NUM_LANES*LI.UROADFACTOR/LI.CONFACNTP
;Save Night Period Total capacity
  CAPACITY_NTP=C

;Per-KDK
; HOT TOLL RATE/mile from lookup table
HOT_TOLL_PMILE = HOTTOLL(1,LI.HOT)
IF(LI.HOT>=1)
  LW.HOTTOLL = DISTANCE*HOT_TOLL_PMILE
ELSE
    LW.HOTTOLL=0
ENDIF
LW.MYTOLL=LW.HOTTOLL+LI.CARTOLL
LW.MYTOLL2=0.5*LW.MYTOLL

;Set EXCLUDE VOLUME GROUP for PATHLOAD...
  IF (li.FACILITY_TYPE=89 & LI.HOT=0) ADDTOGROUP=1               ;HOV 2 & 3+ Facilities (FT=89 All Day) => Exclude DA and Truck Volume Groups  
  IF (li.FACILITY_TYPE=82 & LI.HOT=0) ADDTOGROUP=3               ;HOV 3+ Facilities => Exclude HOV2 Volume Groups
;Note Dummy HOT ramps are coded as HOT=-1 and their facility_type changed to 69 (transit only)
;  IF (li.HOT=2) ADDTOGROUP=4                                     ;Dummy Entrance and Exit from HOT facility

  IF (li.EECODE>0) ADDTOGROUP=2                                  ;EE PROHIBITED LINKS =>Exclude External Volume Groups
;  IF (LI.{PATHGROUP}) ADDTOGROUP=7 ; DEFINE A SUBSET FOR PATHFILE

  IF (li.HOT>=1) ADDTOGROUP=8                                     ;HOT Lane Facility
  IF (li.FACILITY_TYPE=49,59,69) ADDTOGROUP=9                    ;TRANSIT ONLY FACILITIES =>Exclude all Highway Volume Groups

;Per-KDK
   IF (LI.HOT>=1 | li.FACILITY_TYPE=91-99) ADDTOGROUP=5       ;Any kind of toll road -- KDK
   IF (li.FACILITY_TYPE=91-99) ADDTOGROUP=6                   ;Non-HOT toll road -- KDK

; classify links based on presence/absence of tolls
      LINKCLASS=1                                        ;no toll
      if (li.cartoll>0)           
       LINKCLASS=2                                       ;with toll

       T0=({CTOLL}*LI.CARTOLL)*60 + LI.SVCMINUTES + LI.SVCSECONDS/60

       if (iteration=0)
        LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFACNTP/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
        LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)                ; Plaza lane service time in minutes per vehicle
        LW.SERVR=(1/LW.SERVT)*60                                 ; Plaza lane service rate in vehicle per hour
        PRINT LIST='ARRIVR= ',LW.ARRIVR
        PRINT LIST='SERVT= ',LW.SERVT
        PRINT LIST='SERVR= ',LW.SERVR
        if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR         ; prevent infinite or negative queue
       endif

      endif

      if (li.TOLL_ACC>0)
       LINKCLASS=3                                               ; Toll Plaza Acceleration link
       T0= T0 + (LI.SPEED/2.5)/60
      endif

      if (li.TOLL_DEC>0)
       LINKCLASS=4                                               ; Toll Plaza Deceleration link
       T0 = T0 + (LI.SPEED/DECEL(1,LI.SPEED))/60
      endif

     IF (li.FACILITY_TYPE=49,59,69) LINKCLASS=5                   ;Transit non-Highway optional links


ENDPROCESS

PROCESS PHASE=ILOOP

  MW[2]=MI.2.NT_HBW_DA             ;Table 2 
  MW[3]=MI.2.NT_HBW_SR2            ;Table 3 
  MW[4]=MI.2.NT_HBW_SR3P           ;Table 4 
  MW[5]=MI.2.NT_HBO_DA             ;Table 5 
  MW[6]=MI.2.NT_HBO_SR2            ;Table 6 
  MW[7]=MI.2.NT_HBO_SR3P           ;Table 7 
  MW[8]=MI.2.NT_NHB_DA             ;Table 8 
  MW[9]=MI.2.NT_NHB_SR2            ;Table 9 
  MW[10]=MI.2.NT_NHB_SR3P          ;Table 10 

;                                           MW>VOL
  MW[1]=MI.1.NT_TRK_IEII             ;Table 1 >7
  MW[11]=MI.1.NT_TRK_EE              ;Table 11 >8
  MW[12]=MI.1.NT_DA_EE               ;Table 12 >9
  MW[13]=MI.1.NT_SR2_EE              ;Table 13 >10
  MW[14]=MI.1.NT_SR3_EE              ;Table 14 >11
  MW[15]=MI.1.NT_PortTrk             ;Table 15 >12

;=====================
;Per-KDK
;Skim Time and Cost, assuming auto operating costs is the same for toll and free links
; Get straight time skim for free paths (toll links excluded)
; Get straight time skim for free paths (toll links excluded)
PATHLOAD PATH=TIME PENI=1, EXCLUDEGROUP=5,9,MW[21]=PATHTRACE(TIME),NOACCESS=999
; Get time and cost skims for DA, which may include tolls
PATHLOAD PATH=TIME PENI=1, EXCLUDEGROUP=9,  MW[22]=PATHTRACE(TIME),NOACCESS=999,MW[23]=PATHTRACE(LW.MYTOLL),NOACCESS=999,
; Get time and cost skims for SR3+, which may include non-HOT tolls (HOT is free)
                                      MW[27]=PATHTRACE(LI.CARTOLL),NOACCESS=999,
; Set flag for use of HOT lanes
                                      MW[99]=PATHTRACE(LI.HOT),NOACCESS=0
; Get time and cost skims for SR2, which may include tolls
  MW[24]=MW[22]                  ;time- non-free
  MW[25]=0.5*MW[23]              ;mytoll=hottoll+cartoll
; Get time skims for SR3+
  MW[26]=MW[22]                  ;time- non-free 
; Get cost skims for SR3+, which may include non-HOT tolls
  MW[27]=0.3125*MW[27] ; assume 3.2 occ
;
; CHOICE MODEL
;kdk-S65:  c_o=CNTY(1,i);get county number
;  combinations by o & d
   loop p=1,3
   jloop
     if((MW[23]<=0) && (MW[21]<999)) ; if there is no toll skim, all must be free
       SfreeDA  = 1.0  
       SfreeSR2 = 1.0  
       SfreeSR3 = 1.0
     elseif(MW[21]>=999) ; if there is no free skim, all must be placed in the "toll" table
       SfreeDA  = 0.0  
       SfreeSR2 = 0.0  
       SfreeSR3 = 0.0
     else  
;kdk-S65:      c_d=CNTY(1,j)
       ;get coefficients
;xx       dexi = 3*(c_o-1)+p
;kdk-S65:       dexj = 3*(c_d-1)+p
;xx       cti =KON(1,dexi); time coef for i
;xx       cci =KON(2,dexi); cost coef for i
;xx       tfki=KON(3,dexi); toll free constant for i
;kdk-S65:       ctj =KON(1,dexj); time coef for j
;kdk-S65:       ccj =KON(2,dexj); cost coef for j
;kdk-S65:       tfkj=KON(3,dexj); toll free constant for j

       ctp =KON(1,p); time coef for purpose p
       ccp =KON(2,p); cost coef for purpose p
       tfkp=KON(3,p); toll free constant for purpose p

;xx
;xx
;xx       if(dexi=dexj) ; both ends in the same county
;xx          ct=cti
;xx          cc=cci
;xx         tfk=tfki
;xx       else          ; average 2 counties because true Home zone in O-D format is unknown
;xx          ct =0.5*(cti+ctj)
;xx          cc =0.5*(cci+ccj)
;xx          tfk=0.5*(tfki+tfkj)
;xx       endif
;xx
;xx
; SET HOT LANES USE BIAS - 
       if(mw[99]>0) 
          hbias=KON(3,5); HOT bias stored in 5th record
       else
          hbias=0.0
       endif
; OVERRIDE EVERYTHING FOR TEST OF USING CONSTANTS FROM THE *DESTINATION* ZONE ****************
;     rationale - most origins are the non-home end in the PM peak
;kdk-S65:          ct=ctj
;kdk-S65:          cc=ccj
;kdk-S65:         tfk=tfkj + hbias
          ct=ctp
          cc=ccp
          tfk=tfkp + hbias
; ***************************************************************************************
       UfreeDA = ct*MW[21] + tfk
       UfreeSR2= UfreeDA;     ct*MW[21] + tfk
       UfreeSR3= UfreeDA;     ct*MW[21] + tfk
       UtollDA = ct*MW[22] + cc*MW[23]
       UtollSR2= ct*MW[24] + cc*MW[25]
       UtollSR3= ct*MW[26] + cc*MW[27]

       SfreeDA = 1.0/(1.0+exp(UtollDA-UfreeDA)); binary logit form
       ;StollDA = 1.0 - SfreeDA
       SfreeSR2= 1.0/(1.0+exp(UtollSR2-UfreeSR2))
       ;StollSR2= 1.0 - SfreeSR2
       SfreeSR3= 1.0/(1.0+exp(UtollSR3-UfreeSR3))
       ;StollSR3= 1.0 - SfreeSR3
; for test ****************************************************************************
;       if(mw[99]>0) 
;            SfreeDA =0
;            SfreeSR2=0
;            SfreeSR3=0
;       endif
; for test ****************************************************************************
     endif 
 
       dex = 3*(p-1)+2
       k3=3*(p-1)+31
       k4=k3+10; 2*(p-1)+41
       mw[k3] = mw[dex]*SfreeDA  ; free DA
       mw[k4] = mw[dex] - mw[k3] ; toll DA

       dex2 = dex+1; 3*(p-1)+3
       k5=k3+1;      3*(p-1)+32
       k6=k5+10;     2*(p-1)+42
       mw[k5] = mw[dex2]*SfreeSR2 ; free SR2
       mw[k6] = mw[dex2] - mw[k5] ; toll SR2

       dex3 = dex+2; 3*(p-1)+3
       k7=k5+1;      3*(p-1)+33
       k8=k7+10;     2*(p-1)+42
       mw[k7] = mw[dex3]*SfreeSR3 ; free SR3+
       mw[k8] = mw[dex3] - mw[k7] ; toll SR3+

       if(MW[23]<> 0);tabluate free trips when there is a choice - some toll on the path
          kf3=k3+70
          mw[kf3]=mw[k3]; choice free DA

          kf5=kf3+1
          mw[kf5]=mw[k5]; choice free SR2

          kf7=kf5+1
          mw[kf7]=mw[k7]; choice free SR3+
       endif

;EETRIPS Block- Using HBO shares for EE trips...
       if(p=2) ; use HBO shares
          mw[51]=mw[12]*SfreeDA  ; EE DA free
          mw[52]=mw[12]-mw[51]   ; EE DA toll

          mw[53]=mw[13]*SfreeSR2  ; EE SR2 free
          mw[54]=mw[13]-mw[53]   ; EE SR2 toll

          mw[55]=mw[14]*SfreeSR3  ; EE SR3 free
          mw[56]=mw[14]-mw[55]   ; EE SR3 toll
       endif
;EETRIPS Block

   endjloop
   endloop
 
   MW[61] = mw[31] +mw[34] + mw[37] ;drive alone free
   MW[62] = mw[32] +mw[35] + mw[38] ;SR2 free
   MW[63] = mw[33] +mw[36] + mw[39] ;SR3+free
   MW[64] = mw[41] +mw[44] + mw[47] ;drive alone toll
   MW[65] = mw[42] +mw[45] + mw[48] ;SR2 toll
   MW[66] = mw[43] +mw[46] + mw[49] ;SR3+toll
 
;kdk-S65: MW[01] = MW[01]/[PCE-TRK]        ;truck vehicles

;=====================
;SKS- The Select Link Volume sets exceed the maximimum limitation of 20. So assignment with select link was turned off here...
;Per CV documentation, Volume set index range is 1-20; there may be up to 20 volume sets in a single application of Highway. 

 ;FREE LINKS - toll links probibited
  PATHLOAD PATH=TIME, VOL[1]=MW[61], PENI=1, EXCLUDEGROUP=1,5,9  ;Without HOV (DA-Free)
  PATHLOAD PATH=TIME, VOL[2]=MW[62], PENI=1, EXCLUDEGROUP=3,5,9  ;With HOV2 (SR2-Free)
 ;ALL links -toll allowed
  PATHLOAD PATH=TIME, VOL[3]=MW[64], PENI=1, EXCLUDEGROUP=1,9    ;Without HOV (DA-Toll)
  PATHLOAD PATH=TIME, VOL[4]=MW[65], PENI=1, EXCLUDEGROUP=3,9    ;With HOV2  (SR2-Toll)
 ;SR3+ free
  PATHLOAD PATH=TIME, VOL[5]=MW[63], PENI=1, EXCLUDEGROUP=6,9    ;With HOV3+ (SR3-Free)
 ;SR3+ toll
  PATHLOAD PATH=TIME, VOL[6]=MW[66], PENI=1, EXCLUDEGROUP=9      ;With HOV3+ (SR3-Toll)

 ;Trucks
  PATHLOAD PATH=COST, PENI=1, VOL[7]=MW[1],   EXCLUDEGROUP=1,3,8,9    ;IE&II- TRK(7<1) - Not on HOV/HOT  
  PATHLOAD PATH=COST, PENI=1, VOL[12]=MW[15], EXCLUDEGROUP=1,2,3,8,9  ;JaxportTrk(12<15) -Not on HOV/HOT

 ;EE Trips
  if(i>{ZONESI})
   PATHLOAD PATH=COST, PENI=1, VOL[8]=MW[11],EXCLUDEGROUP=1,2,3,8,9, excludej=1-{ZONESI} ;EE- TRK(8<11)-Not on HOV/HOT
   PATHLOAD PATH=TIME, PENI=1, VOL[9]=MW[51],  EXCLUDEGROUP=1,2,5,9, excludej=1-{ZONESI} ;EE-DA-Free(9<51)
   PATHLOAD PATH=TIME, PENI=1, VOL[13]=MW[52], EXCLUDEGROUP=1,2,9,   excludej=1-{ZONESI} ;EE-DA-Toll(13<52)
   PATHLOAD PATH=TIME, PENI=1, VOL[10]=MW[53], EXCLUDEGROUP=2,3,5,9, excludej=1-{ZONESI} ;EE-SR2-Free(10<53)
   PATHLOAD PATH=TIME, PENI=1, VOL[14]=MW[54], EXCLUDEGROUP=2,3,9,   excludej=1-{ZONESI} ;EE-SR2-Toll(14<54)
   PATHLOAD PATH=TIME, PENI=1, VOL[11]=MW[55], EXCLUDEGROUP=2,6,9,   excludej=1-{ZONESI} ;EE-SR3-Free(11<55)
   PATHLOAD PATH=TIME, PENI=1, VOL[15]=MW[56], EXCLUDEGROUP=2,9,     excludej=1-{ZONESI} ;EE-SR3-Free(11<56)
  endif

ENDPROCESS


PROCESS PHASE=ADJUST
;Define volume to be used for V/C calculation
FUNCTION   V=VOL[1]+VOL[2]+VOL[3]+VOL[4]+VOL[5]+VOL[6]+VOL[7]+VOL[8]+VOL[9]+VOL[10]+VOL[11]+VOL[12]+VOL[13]+VOL[14]+VOL[15]

if (time>0) LW.CGSTSPEED=(LW.DISTANCE/TIME)*60

if (li.cartoll>0)
 LW.ARRIVR=(V/LI.UROADFACTOR)*LI.CONFACNTP/LI.PLZALNSMAX  ; hourly volume per toll lane ie. arrival rate in vehicles per hour
 LW.SERVT=LI.SVCMINUTES+(LI.SVCSECONDS/60)                ; Plaza lane service time in minutes per vehicle
 LW.SERVR=(1/LW.SERVT)*60                                 ; Plaza lane service rate in vehicle per hour
 if (LW.ARRIVR>=LW.SERVR) LW.ARRIVR=0.99*LW.SERVR         ; prevent infinite or negative queue
PRINT LIST='ARRIVR= ',LW.ARRIVR
PRINT LIST='SERVT= ',LW.SERVT
PRINT LIST='SERVR= ',LW.SERVR
PRINT LIST='TOLLTIME= ',TIME
endif
if (lw.servr-lw.arrivr=0.0) lw.servr=lw.servr+0.01

;Update Time and Cost for PATHLOAD
;---TIME is TIME plus regular toll time and toll equivalent time
;---COST is Time plus HOT toll time equivalent
;Capture HOT toll time equivalent

; Dynamic HOTTOLL removed - now a fixed rate per mile in linkread
;IF(LI.HOT=1)
;  LW.VCVAL=V/C ; V/C CALCULATION
;  MINHOTTOLL=0.12          ; Minimum HOT lane toll 12 cents per mile
;  MAXHOTTOLL=0.25          ; Maximum HOT lane toll 25 cents per mile
;  LW.HOTTOLL = MINHOTTOLL+(MAXHOTTOLL-MINHOTTOLL)/(1+EXP(6-9*LW.VCVAL))    ;LOGIT EQN APPLIED
;ELSE
;    LW.HOTTOLL=0
;ENDIF

;KDK replace LI.TIME with T0 for toll choice
;Define EACH LINKCLASS TC and COST Functions
; Link Class 1 - Non Regular Toll (it may be a HOT link)
 FUNCTION TC[1]   = T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT)
 FUNCTION COST[1] = T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT)+LI.DISTANCE*(LW.HOTTOLL)*60*{CTOLL}

;Link Class 2 - Regular Tollplaza Link (Never HOT link)
 ;FUNCTION   TC[2]=MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) + {CTOLL}*LI.CARTOLL*60        ; congested time for toll links
 FUNCTION   TC[2]=T0; MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) ; don't include toll in toll choice time; congested time for toll links
;Ommit service time from toll choice: 
 FUNCTION COST[2]=MIN(5,(1/(2.0*(LW.SERVR-LW.ARRIVR)))*60) + {CTOLL}*LI.CARTOLL*60        ; congested time for toll links

; Link Class 3 - Regular Toll Accln Link (Never HOT link)
 FUNCTION   TC[3]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) ;Omit accel from toll choice: + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links
 FUNCTION COST[3]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) + (LW.CGSTSPEED/2.5)/60; congested time toll acceleration links

; Link Class 4 - Regular Toll Decln Link (Never HOT link)
 FUNCTION   TC[4]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) ;Omit deccel from toll choice: + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 FUNCTION COST[4]=T0*(1+LI.BPRCOEFFICIENT*(MIN(V/C,{VCMAX}))^LI.BPREXPONENT) + (LW.CGSTSPEED/DECEL(1,LW.CGSTSPEED))/60; congested time toll deceleration links
 
; Link Class 5 - Transit Optional Link 
 FUNCTION   TC[5]=T0                                                            ;congested time transit-only optional links
 FUNCTION COST[5]=T0                                                            ;congested time transit-only optional links

 
if (li.cartoll>0) print list="Iter:",iteration(2.0)," TOLLFM Summary, A=",A(6.0)," B=",B(6.0)," PLAZAID=",li.TOLL(3.0)," NAME=",li.PLAZADESC(24)," MAX LNS=",li.PLZALNSMAX," GCOST=",TIME(6.2),
        printo=1


ENDPROCESS

; Converge phase is new for Cube 4.0.
PHASE=CONVERGE
  IF (ITERATION < 6) BREAK; Do not even test for Iterations 2-5
  IF (GAP[ITERATION]<GAPCUTOFF & GAP[ITERATION-1]<GAPCUTOFF & GAP[ITERATION-2]<GAPCUTOFF)
;  IF (RGAP[ITERATION]<RGAPCUTOFF & RGAP[ITERATION-1]<RGAPCUTOFF & RGAP[ITERATION-2]<RGAPCUTOFF)
     BALANCE = 1
  ENDIF

ENDPROCESS


ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\HTNET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\HTNET00A.PRN" MSG='AM Period - Rename Loaded Netw Attributes & Minor Calc'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\FINAL_ASGN_AM.NET"
FILEO NETO = "{SCENARIO_DIR}\output\LOADED_AM_Period.NET",
 EXCLUDE=TIME_1 VC_1, CSPD_1 VDT_1 VHT_1,
          V_1 V1_1 V2_1 V3_1 V4_1 V5_1 V6_1 V7_1 V8_1 V9_1 V10_1 V11_1 V12_1 V13_1 V14_1 V15_1,
          VT_1 V1T_1 V2T_1 V3T_1 V4T_1 V5T_1 V6T_1 V7T_1 V8T_1 V9T_1 V10T_1 V11T_1 V12T_1 V13T_1 V14T_1 V15T_1
         
AM_VL_TOT_{YEAR}{ALT}=V_1                   ;Total

AM_VL_DA_{YEAR}{ALT}=V1_1+V3_1+V9_1+V13_1   ;DA-Free&Toll-II&IE+EE 
AM_F_DA_{YEAR}{ALT}=V1_1                    ;DA-II&IE-Free
AM_T_DA_{YEAR}{ALT}=V3_1                    ;DA-II&IE-Toll
AM_F_EDA_{YEAR}{ALT}=V9_1                   ;DA-EE-Free
AM_T_EDA_{YEAR}{ALT}=V13_1                  ;DA-EE-Toll

AM_VL_SR2_{YEAR}{ALT}=V2_1+V4_1+V10_1+V14_1 ;SR2-Free&Toll-II&IE+EE 
AM_F_SR2_{YEAR}{ALT}=V2_1                   ;SR2-II&IE-Free
AM_T_SR2_{YEAR}{ALT}=V4_1                   ;SR2-II&IE-Toll
AM_F_ESR2_{YEAR}{ALT}=V10_1                 ;SR2-EE-Free
AM_T_ESR2_{YEAR}{ALT}=V14_1                 ;SR2-EE-Toll

AM_VL_SR3_{YEAR}{ALT}=V5_1+V6_1+V11_1+V15_1 ;SR3-Free&Toll-II&IE+EE 
AM_F_SR3_{YEAR}{ALT}=V5_1                   ;SR3-II&IE-Free
AM_T_SR3_{YEAR}{ALT}=V6_1                   ;SR3-II&IE-Toll
AM_F_ESR3_{YEAR}{ALT}=V11_1                 ;SR3-EE-Free
AM_T_ESR3_{YEAR}{ALT}=V15_1                 ;SR3-EE-Toll

AM_VL_Trk_{YEAR}{ALT}=V7_1+V8_1+V12_1       ;Truck-II&IE+EE+Port
AM_VL_PrtTk_{YEAR}{ALT}=V12_1               ;Port-Truck

AM_VL_EXT_{YEAR}{ALT}=V8_1+V9_1+V10_1+V11_1+V13_1+V14_1+V15_1 ;EXT-TRK + EE-Free&Toll(DA+SR2+SR3) -Note:Does not include ext-ext of Port Truck

AM_CGSPEED_{YEAR}{ALT}=CSPD_1
AM_VMT_{YEAR}{ALT}=VDT_1
AM_VHT_{YEAR}{ALT}=VHT_1

;sks -8/22/08 - Remove computation errors for ZERO congested speed and Flag the link.
if (AM_CGSPEED_{YEAR}{ALT}>0)
   AM_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/AM_CGSPEED_{YEAR}{ALT}
 else 
   AM_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/(AM_CGSPEED_{YEAR}{ALT}+0.01)
   AM_FlgCGSPDZero=1
endif

;sks -8/22/08 - For link with year 2005 traffic counts.
;if ('{Year}'='05')
;   if (Li.1.Count>0)
;      VOLCNTRTO= V_1/LI.1.COUNT
;     else
;      VOLCNTRTO=0.0
;   endif 
;endif


if (LI.1.CAPACITY>0 & LI.1.NUM_LANES>0)
  AM_VCcapRTO_{YEAR}{ALT}=(V_1*LI.1.CONFACAMP)/(LI.1.CAPACITY*LI.1.NUM_LANES)
 else
  AM_VCcapRTO_{YEAR}{ALT}=9999.0
endif



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\HTNET00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\HTNET00B.PRN" MSG='Mid_Day Period - Rename Loaded Netw Attributes & Minor Calc'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\FINAL_ASGN_MD.NET"
FILEO NETO = "{SCENARIO_DIR}\output\LOADED_MD_Period.NET",
 EXCLUDE=TIME_1 VC_1, CSPD_1 VDT_1 VHT_1,
          V_1 V1_1 V2_1 V3_1 V4_1 V5_1 V6_1 V7_1 V8_1 V9_1 V10_1 V11_1 V12_1 V13_1 V14_1 V15_1,
          VT_1 V1T_1 V2T_1 V3T_1 V4T_1 V5T_1 V6T_1 V7T_1 V8T_1 V9T_1 V10T_1 V11T_1 V12T_1 V13T_1 V14T_1 V15T_1
         
MD_VL_TOT_{YEAR}{ALT}=V_1                   ;Total

MD_VL_DA_{YEAR}{ALT}=V1_1+V3_1+V9_1+V13_1   ;DA-Free&Toll-II&IE+EE 
MD_F_DA_{YEAR}{ALT}=V1_1                    ;DA-II&IE-Free
MD_T_DA_{YEAR}{ALT}=V3_1                    ;DA-II&IE-Toll
MD_F_EDA_{YEAR}{ALT}=V9_1                   ;DA-EE-Free
MD_T_EDA_{YEAR}{ALT}=V13_1                  ;DA-EE-Toll

MD_VL_SR2_{YEAR}{ALT}=V2_1+V4_1+V10_1+V14_1 ;SR2-Free&Toll-II&IE+EE 
MD_F_SR2_{YEAR}{ALT}=V2_1                   ;SR2-II&IE-Free
MD_T_SR2_{YEAR}{ALT}=V4_1                   ;SR2-II&IE-Toll
MD_F_ESR2_{YEAR}{ALT}=V10_1                 ;SR2-EE-Free
MD_T_ESR2_{YEAR}{ALT}=V14_1                 ;SR2-EE-Toll

MD_VL_SR3_{YEAR}{ALT}=V5_1+V6_1+V11_1+V15_1 ;SR3-Free&Toll-II&IE+EE 
MD_F_SR3_{YEAR}{ALT}=V5_1                   ;SR3-II&IE-Free
MD_T_SR3_{YEAR}{ALT}=V6_1                   ;SR3-II&IE-Toll
MD_F_ESR3_{YEAR}{ALT}=V11_1                 ;SR3-EE-Free
MD_T_ESR3_{YEAR}{ALT}=V15_1                 ;SR3-EE-Toll

MD_VL_Trk_{YEAR}{ALT}=V7_1+V8_1+V12_1       ;Truck-II&IE+EE+Port
MD_VL_PrtTk_{YEAR}{ALT}=V12_1               ;Port-Truck

MD_VL_EXT_{YEAR}{ALT}=V8_1+V9_1+V10_1+V11_1+V13_1+V14_1+V15_1 ;EXT-TRK + EE-Free&Toll(DA+SR2+SR3) -Note:Does not include ext-ext of Port Truck

MD_CGSPEED_{YEAR}{ALT}=CSPD_1
MD_VMT_{YEAR}{ALT}=VDT_1
MD_VHT_{YEAR}{ALT}=VHT_1

;sks -8/22/08 - Remove computation errors for ZERO congested speed and Flag the link.
if (MD_CGSPEED_{YEAR}{ALT}>0)
   MD_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/MD_CGSPEED_{YEAR}{ALT}
 else 
   MD_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/(MD_CGSPEED_{YEAR}{ALT}+0.01)
   MD_FlgCGSPDZero=1
endif

;sks -8/22/08 - For link with year 2005 traffic counts.
;if ('{Year}'='05')
;   if (Li.1.Count>0)
;      VOLCNTRTO= V_1/LI.1.COUNT
;     else
;      VOLCNTRTO=0.0
;   endif 
;endif


if (LI.1.CAPACITY>0 & LI.1.NUM_LANES>0)
  MD_VCcapRTO_{YEAR}{ALT}=(V_1*LI.1.CONFACMDP)/(LI.1.CAPACITY*LI.1.NUM_LANES)
 else
  MD_VCcapRTO_{YEAR}{ALT}=9999.0
endif



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\HTNET00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\HTNET00C.PRN" MSG='PM Period - Rename Loaded Netw Attributes & Minor Calc'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\FINAL_ASGN_PM.NET"
FILEO NETO = "{SCENARIO_DIR}\output\LOADED_PM_Period.NET",
 EXCLUDE=TIME_1 VC_1, CSPD_1 VDT_1 VHT_1,
          V_1 V1_1 V2_1 V3_1 V4_1 V5_1 V6_1 V7_1 V8_1 V9_1 V10_1 V11_1 V12_1 V13_1 V14_1 V15_1,
          VT_1 V1T_1 V2T_1 V3T_1 V4T_1 V5T_1 V6T_1 V7T_1 V8T_1 V9T_1 V10T_1 V11T_1 V12T_1 V13T_1 V14T_1 V15T_1
         
PM_VL_TOT_{YEAR}{ALT}=V_1                   ;Total

PM_VL_DA_{YEAR}{ALT}=V1_1+V3_1+V9_1+V13_1   ;DA-Free&Toll-II&IE+EE 
PM_F_DA_{YEAR}{ALT}=V1_1                    ;DA-II&IE-Free
PM_T_DA_{YEAR}{ALT}=V3_1                    ;DA-II&IE-Toll
PM_F_EDA_{YEAR}{ALT}=V9_1                   ;DA-EE-Free
PM_T_EDA_{YEAR}{ALT}=V13_1                  ;DA-EE-Toll

PM_VL_SR2_{YEAR}{ALT}=V2_1+V4_1+V10_1+V14_1 ;SR2-Free&Toll-II&IE+EE 
PM_F_SR2_{YEAR}{ALT}=V2_1                   ;SR2-II&IE-Free
PM_T_SR2_{YEAR}{ALT}=V4_1                   ;SR2-II&IE-Toll
PM_F_ESR2_{YEAR}{ALT}=V10_1                 ;SR2-EE-Free
PM_T_ESR2_{YEAR}{ALT}=V14_1                 ;SR2-EE-Toll

PM_VL_SR3_{YEAR}{ALT}=V5_1+V6_1+V11_1+V15_1 ;SR3-Free&Toll-II&IE+EE 
PM_F_SR3_{YEAR}{ALT}=V5_1                   ;SR3-II&IE-Free
PM_T_SR3_{YEAR}{ALT}=V6_1                   ;SR3-II&IE-Toll
PM_F_ESR3_{YEAR}{ALT}=V11_1                 ;SR3-EE-Free
PM_T_ESR3_{YEAR}{ALT}=V15_1                 ;SR3-EE-Toll

PM_VL_Trk_{YEAR}{ALT}=V7_1+V8_1+V12_1       ;Truck-II&IE+EE+Port
PM_VL_PrtTk_{YEAR}{ALT}=V12_1               ;Port-Truck

PM_VL_EXT_{YEAR}{ALT}=V8_1+V9_1+V10_1+V11_1+V13_1+V14_1+V15_1 ;EXT-TRK + EE-Free&Toll(DA+SR2+SR3) -Note:Does not include ext-ext of Port Truck

PM_CGSPEED_{YEAR}{ALT}=CSPD_1
PM_VMT_{YEAR}{ALT}=VDT_1
PM_VHT_{YEAR}{ALT}=VHT_1

;sks -8/22/08 - Remove computation errors for ZERO congested speed and Flag the link.
if (PM_CGSPEED_{YEAR}{ALT}>0)
   PM_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/PM_CGSPEED_{YEAR}{ALT}
 else 
   PM_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/(PM_CGSPEED_{YEAR}{ALT}+0.01)
   PM_FlgCGSPDZero=1
endif

;sks -8/22/08 - For link with year 2005 traffic counts.
;if ('{Year}'='05')
;   if (Li.1.Count>0)
;      VOLCNTRTO= V_1/LI.1.COUNT
;     else
;      VOLCNTRTO=0.0
;   endif 
;endif


if (LI.1.CAPACITY>0 & LI.1.NUM_LANES>0)
  PM_VCcapRTO_{YEAR}{ALT}=(V_1*LI.1.CONFACPMP)/(LI.1.CAPACITY*LI.1.NUM_LANES)
 else
  PM_VCcapRTO_{YEAR}{ALT}=9999.0
endif



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\HTNET00D.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\HTNET00D.PRN" MSG='Night Period - Rename Loaded Netw Attributes & Minor Calc'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\FINAL_ASGN_NT.NET"
FILEO NETO = "{SCENARIO_DIR}\output\LOADED_NT_Period.NET",
 EXCLUDE=TIME_1 VC_1, CSPD_1 VDT_1 VHT_1,
          V_1 V1_1 V2_1 V3_1 V4_1 V5_1 V6_1 V7_1 V8_1 V9_1 V10_1 V11_1 V12_1 V13_1 V14_1 V15_1,
          VT_1 V1T_1 V2T_1 V3T_1 V4T_1 V5T_1 V6T_1 V7T_1 V8T_1 V9T_1 V10T_1 V11T_1 V12T_1 V13T_1 V14T_1 V15T_1
         
NT_VL_TOT_{YEAR}{ALT}=V_1                   ;Total

NT_VL_DA_{YEAR}{ALT}=V1_1+V3_1+V9_1+V13_1   ;DA-Free&Toll-II&IE+EE 
NT_F_DA_{YEAR}{ALT}=V1_1                    ;DA-II&IE-Free
NT_T_DA_{YEAR}{ALT}=V3_1                    ;DA-II&IE-Toll
NT_F_EDA_{YEAR}{ALT}=V9_1                   ;DA-EE-Free
NT_T_EDA_{YEAR}{ALT}=V13_1                  ;DA-EE-Toll

NT_VL_SR2_{YEAR}{ALT}=V2_1+V4_1+V10_1+V14_1 ;SR2-Free&Toll-II&IE+EE 
NT_F_SR2_{YEAR}{ALT}=V2_1                   ;SR2-II&IE-Free
NT_T_SR2_{YEAR}{ALT}=V4_1                   ;SR2-II&IE-Toll
NT_F_ESR2_{YEAR}{ALT}=V10_1                 ;SR2-EE-Free
NT_T_ESR2_{YEAR}{ALT}=V14_1                 ;SR2-EE-Toll

NT_VL_SR3_{YEAR}{ALT}=V5_1+V6_1+V11_1+V15_1 ;SR3-Free&Toll-II&IE+EE 
NT_F_SR3_{YEAR}{ALT}=V5_1                   ;SR3-II&IE-Free
NT_T_SR3_{YEAR}{ALT}=V6_1                   ;SR3-II&IE-Toll
NT_F_ESR3_{YEAR}{ALT}=V11_1                 ;SR3-EE-Free
NT_T_ESR3_{YEAR}{ALT}=V15_1                 ;SR3-EE-Toll

NT_VL_Trk_{YEAR}{ALT}=V7_1+V8_1+V12_1       ;Truck-II&IE+EE+Port
NT_VL_PrtTk_{YEAR}{ALT}=V12_1               ;Port-Truck

NT_VL_EXT_{YEAR}{ALT}=V8_1+V9_1+V10_1+V11_1+V13_1+V14_1+V15_1 ;EXT-TRK + EE-Free&Toll(DA+SR2+SR3) -Note:Does not include ext-ext of Port Truck

NT_CGSPEED_{YEAR}{ALT}=CSPD_1
NT_VMT_{YEAR}{ALT}=VDT_1
NT_VHT_{YEAR}{ALT}=VHT_1

;sks -8/22/08 - Remove computation errors for ZERO congested speed and Flag the link.
if (NT_CGSPEED_{YEAR}{ALT}>0)
   NT_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/NT_CGSPEED_{YEAR}{ALT}
 else 
   NT_CGTIME_{YEAR}{ALT}=60*(DISTANCEFT/5280)/(NT_CGSPEED_{YEAR}{ALT}+0.01)
   NT_FlgCGSPDZero=1
endif

;sks -8/22/08 - For link with year 2005 traffic counts.
;if ('{Year}'='05')
;   if (Li.1.Count>0)
;      VOLCNTRTO= V_1/LI.1.COUNT
;     else
;      VOLCNTRTO=0.0
;   endif 
;endif


if (LI.1.CAPACITY>0 & LI.1.NUM_LANES>0)
  NT_VCcapRTO_{YEAR}{ALT}=(V_1*LI.1.CONFACNTP)/(LI.1.CAPACITY*LI.1.NUM_LANES)
 else
  NT_VCcapRTO_{YEAR}{ALT}=9999.0
endif



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\HTNET00E.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="C:\NERPM43\APPLICATIONS\HTNET00E.PRN"
FILEO NETO = "{SCENARIO_DIR}\output\LOADED_CombinedPeriods.NET"
FILEI LINKI[4] = "{SCENARIO_DIR}\output\LOADED_NT_Period.NET"
FILEI LINKI[3] = "{SCENARIO_DIR}\output\LOADED_PM_Period.NET"
FILEI LINKI[2] = "{SCENARIO_DIR}\output\LOADED_MD_Period.NET"
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_AM_Period.NET"

PROCESS  PHASE=INPUT
;Use this phase to modify data as it is read, such as recoding node numbers.


ENDPROCESS


PROCESS  PHASE=NODEMERGE  
; Use this phase to make computations and selections of any data on the NODEI files.


ENDPROCESS


PROCESS  PHASE=LINKMERGE  
; Use this phase to make computations and selections of any data on the LINKI files.


;Directional Attributes:
AL_VL_TOT_{YEAR}{ALT}  =LI.1.AM_VL_TOT_{YEAR}{ALT}  +LI.2.MD_VL_TOT_{YEAR}{ALT}  +LI.3.PM_VL_TOT_{YEAR}{ALT}  +LI.4.NT_VL_TOT_{YEAR}{ALT}

AL_VL_DA_{YEAR}{ALT}   =LI.1.AM_VL_DA_{YEAR}{ALT}   +LI.2.MD_VL_DA_{YEAR}{ALT}   +LI.3.PM_VL_DA_{YEAR}{ALT}   +LI.4.NT_VL_DA_{YEAR}{ALT}
AL_F_DA_{YEAR}{ALT}  =LI.1.AM_F_DA_{YEAR}{ALT}  +LI.2.MD_F_DA_{YEAR}{ALT}  +LI.3.PM_F_DA_{YEAR}{ALT}  +LI.4.NT_F_DA_{YEAR}{ALT}
AL_T_DA_{YEAR}{ALT}  =LI.1.AM_T_DA_{YEAR}{ALT}  +LI.2.MD_T_DA_{YEAR}{ALT}  +LI.3.PM_T_DA_{YEAR}{ALT}  +LI.4.NT_T_DA_{YEAR}{ALT}
AL_F_EDA_{YEAR}{ALT}  =LI.1.AM_F_EDA_{YEAR}{ALT}  +LI.2.MD_F_EDA_{YEAR}{ALT}  +LI.3.PM_F_EDA_{YEAR}{ALT}  +LI.4.NT_F_EDA_{YEAR}{ALT}
AL_T_EDA_{YEAR}{ALT}  =LI.1.AM_T_EDA_{YEAR}{ALT}  +LI.2.MD_T_EDA_{YEAR}{ALT}  +LI.3.PM_T_EDA_{YEAR}{ALT}  +LI.4.NT_T_EDA_{YEAR}{ALT}


AL_VL_SR2_{YEAR}{ALT}  =LI.1.AM_VL_SR2_{YEAR}{ALT}  +LI.2.MD_VL_SR2_{YEAR}{ALT}  +LI.3.PM_VL_SR2_{YEAR}{ALT}  +LI.4.NT_VL_SR2_{YEAR}{ALT}
AL_F_SR2_{YEAR}{ALT} =LI.1.AM_F_SR2_{YEAR}{ALT} +LI.2.MD_F_SR2_{YEAR}{ALT} +LI.3.PM_F_SR2_{YEAR}{ALT} +LI.4.NT_F_SR2_{YEAR}{ALT}
AL_T_SR2_{YEAR}{ALT} =LI.1.AM_T_SR2_{YEAR}{ALT} +LI.2.MD_T_SR2_{YEAR}{ALT} +LI.3.PM_T_SR2_{YEAR}{ALT} +LI.4.NT_T_SR2_{YEAR}{ALT}
AL_F_ESR2_{YEAR}{ALT}  =LI.1.AM_F_ESR2_{YEAR}{ALT}  +LI.2.MD_F_ESR2_{YEAR}{ALT}  +LI.3.PM_F_ESR2_{YEAR}{ALT}  +LI.4.NT_F_ESR2_{YEAR}{ALT}
AL_T_ESR2_{YEAR}{ALT}  =LI.1.AM_T_ESR2_{YEAR}{ALT}  +LI.2.MD_T_ESR2_{YEAR}{ALT}  +LI.3.PM_T_ESR2_{YEAR}{ALT}  +LI.4.NT_T_ESR2_{YEAR}{ALT}

AL_VL_SR3_{YEAR}{ALT}  =LI.1.AM_VL_SR3_{YEAR}{ALT}  +LI.2.MD_VL_SR3_{YEAR}{ALT}  +LI.3.PM_VL_SR3_{YEAR}{ALT}  +LI.4.NT_VL_SR3_{YEAR}{ALT}
AL_F_SR3_{YEAR}{ALT} =LI.1.AM_F_SR3_{YEAR}{ALT} +LI.2.MD_F_SR3_{YEAR}{ALT} +LI.3.PM_F_SR3_{YEAR}{ALT} +LI.4.NT_F_SR3_{YEAR}{ALT}
AL_T_SR3_{YEAR}{ALT} =LI.1.AM_T_SR3_{YEAR}{ALT} +LI.2.MD_T_SR3_{YEAR}{ALT} +LI.3.PM_T_SR3_{YEAR}{ALT} +LI.4.NT_T_SR3_{YEAR}{ALT}
AL_F_ESR3_{YEAR}{ALT}  =LI.1.AM_F_ESR3_{YEAR}{ALT}  +LI.2.MD_F_ESR3_{YEAR}{ALT}  +LI.3.PM_F_ESR3_{YEAR}{ALT}  +LI.4.NT_F_ESR3_{YEAR}{ALT}
AL_T_ESR3_{YEAR}{ALT}  =LI.1.AM_T_ESR3_{YEAR}{ALT}  +LI.2.MD_T_ESR3_{YEAR}{ALT}  +LI.3.PM_T_ESR3_{YEAR}{ALT}  +LI.4.NT_T_ESR3_{YEAR}{ALT}

AL_VL_Trk_{YEAR}{ALT}  =LI.1.AM_VL_Trk_{YEAR}{ALT}  +LI.2.MD_VL_Trk_{YEAR}{ALT}  +LI.3.PM_VL_Trk_{YEAR}{ALT}  +LI.4.NT_VL_Trk_{YEAR}{ALT}
AL_VL_PrtTk_{YEAR}{ALT}=LI.1.AM_VL_PrtTk_{YEAR}{ALT}+LI.2.MD_VL_PrtTk_{YEAR}{ALT}+LI.3.PM_VL_PrtTk_{YEAR}{ALT}+LI.4.NT_VL_PrtTk_{YEAR}{ALT}

AL_VL_EXT_{YEAR}{ALT}  =LI.1.AM_VL_EXT_{YEAR}{ALT}  +LI.2.MD_VL_EXT_{YEAR}{ALT}  +LI.3.PM_VL_EXT_{YEAR}{ALT}  +LI.4.NT_VL_EXT_{YEAR}{ALT}

AL_VMT_{YEAR}{ALT}   =LI.1.AM_VMT_{YEAR}{ALT}   +LI.2.MD_VMT_{YEAR}{ALT}   +LI.3.PM_VMT_{YEAR}{ALT}   +LI.4.NT_VMT_{YEAR}{ALT}
AL_VHT_{YEAR}{ALT}   =LI.1.AM_VHT_{YEAR}{ALT}   +LI.2.MD_VHT_{YEAR}{ALT}   +LI.3.PM_VHT_{YEAR}{ALT}   +LI.4.NT_VHT_{YEAR}{ALT}

;Calulate All day Congested time and Speed based on summation of period VMT & VHT (SKS-10/12/2006):

if (AL_VMT_{YEAR}{ALT}>0)
  AL_CGTIME_{YEAR}{ALT}=60*(AL_VHT_{YEAR}{ALT}*LI.1.DISTANCEFT/5280)/AL_VMT_{YEAR}{ALT}           ;in minutes
 else
 
;   _FracAMVMT=LI.1.AM_VMT_{YEAR}{ALT}/AL_VMT_{YEAR}{ALT}
;   _FracMDVMT=LI.2.MD_VMT_{YEAR}{ALT}/AL_VMT_{YEAR}{ALT}
;   _FracPMVMT=LI.3.PM_VMT_{YEAR}{ALT}/AL_VMT_{YEAR}{ALT}
;   _FracNTVMT=LI.4.NT_VMT_{YEAR}{ALT}/AL_VMT_{YEAR}{ALT}
;  AL_CGTIME_{YEAR}{ALT}=((LI.1.AM_CGTIME_{YEAR}{ALT}*_FracAMVMT) + (LI.2.MD_CGTIME_{YEAR}{ALT}*_FracMDVMT)+
;                         (LI.3.PM_CGTIME_{YEAR}{ALT}*_FracPMVMT) + (LI.4.NT_CGTIME_{YEAR}{ALT}*_FracNTVMT))
  AL_CGTIME_{YEAR}{ALT}=((LI.1.AM_CGTIME_{YEAR}{ALT}*0.17) + (LI.2.MD_CGTIME_{YEAR}{ALT}*0.31)+
                         (LI.3.PM_CGTIME_{YEAR}{ALT}*0.25) + (LI.4.NT_CGTIME_{YEAR}{ALT}*0.27))+0.0001


endif

AL_CGSPEED_{YEAR}{ALT}=((LI.1.DISTANCEFT/5280)/AL_CGTIME_{YEAR}{ALT})*60


;sks -8/22/08 - For link with year 2005 traffic counts.
if ('{Year}'='05')
   if (Li.1.Count>0)
      AL_VOLCNTRTO= AL_VL_TOT_{YEAR}{ALT}/LI.1.COUNT
     else
      AL_VOLCNTRTO=0.0
   endif 
endif

;An Estimated All Day Volume/Capacity Ratio...
if (LI.1.CAPACITY>0 & LI.1.NUM_LANES>0)
  AL_VCcapRTO_{YEAR}{ALT}=(AL_VL_TOT_{YEAR}{ALT}*LI.1.CONFAC)/(LI.1.CAPACITY*LI.1.NUM_LANES)  ;(An Esimated) Directional Volume/Capacity Ratio
                                                                                              ;CONFAC represnts 24-Hour Condition
 else
  AL_VCcapRTO_{YEAR}{ALT}=9999.0
endif


ENDPROCESS


PROCESS  PHASE=SUMMARY   
; Use this phase for combining and reporting of working variables.


ENDPROCESS

ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

endif           ;Time of Day (4 periods) Highway Model
; End of PILOT Script

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


if({AllDay_HwyMdl}=1)   ;All Day (24-Hour) Highway Model

; End of PILOT Script

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\ANNET00E.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\OUTPUT\ANNET00B.PRN" MSG='Remove Transit -Only links from loaded network hor Highway Evaluation'
FILEI LINKI[1] = "{SCENARIO_DIR}\Output\LOADED_24H.NET"
FILEO NETO = "{SCENARIO_DIR}\output\LOADED_HEVAL.NET"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

 
;Delete transit-Only non-highway links from loaded network
  IF(LI.1.Facility_Type=49,59,69) DELETE 

    

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY


ENDPHASE



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\applications\ANNET00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal.PRN" MSG='Prepare for HEVAL for All Area'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PROFILE_NERPM4.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\LinksCnt0.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-24H.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-24 Hour (All Counties) RMSE and Other Volume/Count Evaluation Summary ==================================='



;if(LI.1.COUNTY<>6) delete       ;comment out for county specific evaluation & set county no (1=Nassau, 2=Duval,3=St Johns,
                                 ;                                                            4=Clay, 5=Baker, 6=Putnam)
;if(LI.1.FACILITY_TYPE=70-79,97-98) delete       ;comment out for RMSE without ramps                                                            4=Clay, 5=Baker, 6=Putnam)

;Delete dummy zone facility types (#29) since it will distort heval and/or crosstab stat with a speed of 1 MPH;
;NOTE: Without this, the "analysis" mode HEVAL output will be skewed, since it did not recognize the filtered facility
;      type of 29.
;Note: only valid 29 is mayport bridge link (64273-64589 of DISTANCEFT=2010)
  IF(LI.1.Facility_Type=29) DELETE 


; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AD_CGTIME_{Year}{alt}

   TOTAL_VOL=LI.1.AD_VL_TOT_{Year}{alt}

   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=AADT10
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = count ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


;----Write Profile for HEVAL-NERPM50-All Counties data
;GTITLE=' - ALL SIX COUNTIES'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\PROFILE_NERPM4.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\LinksCnt0.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO SKPN4
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:SKPN4

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-24H-NERPM4.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-24H-NERPM4.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINETOD-24H-NERPM4.out
*if exist HRLDXY.ASC copy /a HRLDXY.ASC {SCENARIO_DIR}\output\HRLDXYTOD-24H-NERPM4.ASC
*if exist HRLDXY2.ASC copy /a HRLDXY2.ASC {SCENARIO_DIR}\output\HRLDXY2TOD-24H-NERPM4.ASC

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-24H-NERPM4.out" "{SCENARIO_DIR}\output\HEVAL-24H.PRN" '
ENDRUN

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\rmse-24H-NERPM4.out" "{SCENARIO_DIR}\output\RMSEDBF-24H.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\A1NET00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal_Cnty1.PRN" MSG='Prepare for HEVAL for Nassau County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty1.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\LinksCnt_Cnty1.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-24H_Cnty1.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-24 Hour (Nassau County) RMSE and Other Volume/Count Evaluation Summary =================================='


  if(LI.1.COUNTY<>1) delete
  IF(LI.1.Facility_Type=29) DELETE 



; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AD_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AD_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


;GTITLE=' - Nassau County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Nassau',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Nassau',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty1.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\LinksCnt_Cnty1.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO SKPN41
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:SKPN41

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-24H-N4-Nassau.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-24H-N4-Nassau.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-24H-N4-Nassau.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-24H-N4-Nassau.out" "{SCENARIO_DIR}\output\HEVAL-24H-Nassau.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\A2NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal_Cnty2.PRN" MSG='Prepare for HEVAL for Duval County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty2.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\LinksCnt_Cnty2.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-24H_Cnty2.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-24 Hour (Duval County) RMSE and Other Volume/Count Evaluation Summary ==================================='


  if(LI.1.COUNTY<>2) delete
  IF(LI.1.Facility_Type=29) DELETE 



; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AD_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AD_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;GTITLE=' - Duval County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Duval',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Duval',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty2.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\LinksCnt_Cnty2.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO SKPN42
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:SKPN42

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-24H-N4-Duval.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-24H-N4-Duval.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-24H-N4-Duval.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-24H-N4-Duval.out" "{SCENARIO_DIR}\output\HEVAL-24H-Duval.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\A3NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal_Cnty3.PRN" MSG='Prepare for HEVAL for St. Johns County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty3.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\LinksCnt_Cnty3.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-24H_Cnty3.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-24 Hour (St. Johns County) RMSE and Other Volume/Count Evaluation Summary ==============================='

  if(LI.1.COUNTY<>3) delete
  IF(LI.1.Facility_Type=29) DELETE 



; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AD_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AD_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


;GTITLE=' - StJohns County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-StJohns',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-StJohns',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty3.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\LinksCnt_Cnty3.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO SKPN43
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:SKPN43

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-24H-N4-StJohns.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-24H-N4-StJohns.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-24H-N4-StJohns.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-24H-N4-StJohns.out" "{SCENARIO_DIR}\output\HEVAL-24H-StJohns.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\A4NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal_Cnty4.PRN" MSG='Prepare for HEVAL for Clay County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty4.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\LinksCnt_Cnty4.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-24H_Cnty4.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-24 Hour (Clay County) RMSE and Other Volume/Count Evaluation Summary ===================================='

  if(LI.1.COUNTY<>4) delete
  IF(LI.1.Facility_Type=29) DELETE 



; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AD_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AD_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;GTITLE=' - Clay County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Clay',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Clay',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty4.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\LinksCnt_Cnty4.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO SKPN44
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:SKPN44

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-24H-N4-Clay.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-24H-N4-Clay.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-24H-N4-Clay.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-24H-N4-Clay.out" "{SCENARIO_DIR}\output\HEVAL-24H-Clay.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\A5NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal_Cnty5.PRN" MSG='Prepare for HEVAL for Baker County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty5.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\LinksCnt_Cnty5.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-24H_Cnty5.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-24 Hour (Baker County) RMSE and Other Volume/Count Evaluation Summary ==================================='

  if(LI.1.COUNTY<>5) delete       
  IF(LI.1.Facility_Type=29) DELETE 

; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AD_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AD_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;GTITLE=' - Baker County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Baker',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Baker',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty5.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\LinksCnt_Cnty5.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO SKPN45
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:SKPN45

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-24H-N4-Baker.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-24H-N4-Baker.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-24H-N4-Baker.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-24H-N4-Baker.out" "{SCENARIO_DIR}\output\HEVAL-24H-Baker.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\A6NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal_Cnty6.PRN" MSG='Prepare for HEVAL for Putnam County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty6.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\LinksCnt_Cnty6.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-24H_Cnty6.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-24 Hour (Putnam County) RMSE and Other Volume/Count Evaluation Summary =================================='

  if(LI.1.COUNTY<>6) delete  
  IF(LI.1.Facility_Type=29) DELETE 

; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AD_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AD_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


;GTITLE=' - Putnam County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Putnam',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Putnam',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\PROFILE_NERPM4_Cnty6.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\LinksCnt_Cnty6.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO SKPN46
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:SKPN46

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-24H-N4-Putnam.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-24H-N4-Putnam.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-24H-N4-Putnam.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-24H-N4-Putnam.out" "{SCENARIO_DIR}\output\HEVAL-24H-Putnam.PRN" '
ENDRUN

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

endif           ;All Day (24-Hour) Highway Model
; End of PILOT Script

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.


if({TOD_HwyMdl}=1)   ;Time of Day (4 periods) Highway Model
; End of PILOT Script

; Script for program NETWORK in file "C:\NERPM43\applications\TNNET00F.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\OUTPUT\ANNET00B.PRN" MSG='Remove Transit -Only links from loaded network hor Highway Evaluation'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_CombinedPeriods.NET"
FILEO NETO = "{SCENARIO_DIR}\output\CombLD_HEVAL.NET"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

 
;Delete transit-Only non-highway links from loaded network
  IF(LI.1.Facility_Type=49,59,69) DELETE 

    

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY


ENDPHASE



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\applications\TNNET00E.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal.PRN" MSG='Prepare for HEVAL for All Area'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLD_HEVAL.NET"
FILEO LINKO = "{SCENARIO_DIR}\output\TLinksCnt0.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY

FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-AL.PRN"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TPROFILE_NERPM4.TXT"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE


_ReportTitle= ' NERPM50-TOD (All Period-All Counties) RMSE and Other Volume/Count Evaluation Summary ============================'

;if(LI.1.COUNTY<>6) delete       ;comment out for county specific evaluation & set county no (1=Nassau, 2=Duval,3=St Johns,
                                 ;                                                            4=Clay, 5=Baker, 6=Putnam)
;if(LI.1.FACILITY_TYPE=70-79,97-98) delete       ;comment out for RMSE without ramps                                                            4=Clay, 5=Baker, 6=Putnam)

;Delete dummy zone facility types (#29) since it will distort heval and/or crosstab stat with a speed of 1 MPH;
;NOTE: Without this, the "analysis" mode HEVAL output will be skewed, since it did not recognize the filtered facility
;      type of 29.
;Note: only valid 29 is mayport bridge link (64273-64589 of DISTANCEFT=2010)
  IF(LI.1.Facility_Type=29) DELETE 


; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AL_CGTIME_{Year}{alt}

  TOTAL_VOL=LI.1.AL_VL_TOT_{Year}{alt}

   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;----Write Profile for HEVAL-NERPM50-All Counties data
;GTITLE=' - ALL SIX COUNTIES'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif


ENDPHASE




ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TPROFILE_NERPM4.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TLinksCnt0.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO TSKPN4
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:TSKPN4

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-AL-NERPM4.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-TOD-AL-NERPM4.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINETOD-TOD-AL-NERPM4.out
*if exist HRLDXY.ASC copy /a HRLDXY.ASC {SCENARIO_DIR}\output\HRLDXYTOD-TOD-AL-NERPM4.ASC
*if exist HRLDXY2.ASC copy /a HRLDXY2.ASC {SCENARIO_DIR}\output\HRLDXY2TOD-TOD-AL-NERPM4.ASC

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF
; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-AL-NERPM4.out" "{SCENARIO_DIR}\output\HEVAL-TOD-AL.PRN" '
ENDRUN

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\rmse-TOD-AL-NERPM4.out" "{SCENARIO_DIR}\output\RMSEDBF-TOD-AL.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\applications\T1NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-AL_Cnty1.PRN" MSG='Prepare for HEVAL for Nassau County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLD_HEVAL.NET"
FILEO LINKO = "{SCENARIO_DIR}\output\TLinksCnt_Cnty1.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY

FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-AL_Cnty1.PRN"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty1.TXT"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-TOD (All Period-Nassau County) RMSE and Other Volume/Count Evaluation Summary ==========================='

  if(LI.1.COUNTY<>1) delete
  IF(LI.1.Facility_Type=29) DELETE 

; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AL_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AL_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;GTITLE=' - Nassau County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Nassau',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Nassau',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE





ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty1.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TLinksCnt_Cnty1.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO TSKPN41
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:TSKPN41

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-AL-N4-Nassau.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-TOD-AL-N4-Nassau.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-AL-N4-Nassau.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF
; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-AL-N4-Nassau.out" "{SCENARIO_DIR}\output\HEVAL-TOD-AL-Nassau.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\applications\T2NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-AL_Cnty2.PRN" MSG='Prepare for HEVAL for Duval County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLD_HEVAL.NET"
FILEO LINKO = "{SCENARIO_DIR}\output\TLinksCnt_Cnty2.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY

FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-AL_Cnty2.PRN"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty2.TXT"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-TOD (All Period-Duval County) RMSE and Other Volume/Count Evaluation Summary ============================'

  if(LI.1.COUNTY<>2) delete
  IF(LI.1.Facility_Type=29) DELETE 

; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AL_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AL_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


;GTITLE=' - Duval County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Duval',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Duval',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE




ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty2.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TLinksCnt_Cnty2.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO TSKPN42
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:TSKPN42

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-AL-N4-Duval.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-TOD-AL-N4-Duval.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-AL-N4-Duval.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-AL-N4-Duval.out" "{SCENARIO_DIR}\output\HEVAL-TOD-AL-Duval.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\applications\T3NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-AL_Cnty3.PRN" MSG='Prepare for HEVAL for St. Johns County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLD_HEVAL.NET"
FILEO LINKO = "{SCENARIO_DIR}\output\TLinksCnt_Cnty3.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY

FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-AL-_Cnty3.PRN"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty3.TXT"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-TOD (All Period-St. Johns County) RMSE and Other Volume/Count Evaluation Summary ========================'

  if(LI.1.COUNTY<>3) delete
  IF(LI.1.Facility_Type=29) DELETE 

; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AL_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AL_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;GTITLE=' - StJohns County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-StJohns',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-StJohns',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE




ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty3.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TLinksCnt_Cnty3.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO TSKPN43
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:TSKPN43

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-AL-N4-StJohns.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-TOD-AL-N4-StJohns.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-AL-N4-StJohns.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF
; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-AL-N4-StJohns.out" "{SCENARIO_DIR}\output\HEVAL-TOD-AL-StJohns.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\applications\T4NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-AL_Cnty4.PRN" MSG='Prepare for HEVAL for Clay County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLD_HEVAL.NET"
FILEO LINKO = "{SCENARIO_DIR}\output\TLinksCnt_Cnty4.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY

FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-AL_Cnty4.PRN"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty4.TXT"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-TOD (All Period-Clay County) RMSE and Other Volume/Count Evaluation Summary ============================='

  if(LI.1.COUNTY<>4) delete       
  IF(LI.1.Facility_Type=29) DELETE 

; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AL_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AL_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


;GTITLE=' - Clay County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Clay',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Clay',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE


ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty4.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TLinksCnt_Cnty4.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO TSKPN44
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:TSKPN44

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-AL-N4-Clay.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-TOD-AL-N4-Clay.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-AL-N4-Clay.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF
; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-AL-N4-Clay.out" "{SCENARIO_DIR}\output\HEVAL-TOD-AL-Clay.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\applications\T5NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-AL_Cnty5.PRN" MSG='Prepare for HEVAL for Baker County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLD_HEVAL.NET"
FILEO LINKO = "{SCENARIO_DIR}\output\TLinksCnt_Cnty5.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY

FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-AL_Cnty5.PRN"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty5.TXT"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-TOD (All Period-Baker County) RMSE and Other Volume/Count Evaluation Summary ============================'

  if(LI.1.COUNTY<>5) delete       
  IF(LI.1.Facility_Type=29) DELETE 

; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AL_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AL_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


;GTITLE=' - Baker County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Baker',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Baker',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty5.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TLinksCnt_Cnty5.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO TSKPN45
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:TSKPN45

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-AL-N4-Baker.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-TOD-AL-N4-Baker.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-AL-N4-Baker.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-AL-N4-Baker.out" "{SCENARIO_DIR}\output\HEVAL-TOD-AL-Baker.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\applications\T6NET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-AL_Cnty6.PRN" MSG='Prepare for HEVAL for Putnam County'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLD_HEVAL.NET"
FILEO LINKO = "{SCENARIO_DIR}\output\TLinksCnt_Cnty6.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY

FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-AL_Cnty6.PRN"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty6.TXT"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

_ReportTitle= ' NERPM50-TOD (All Period-Putnam County) RMSE and Other Volume/Count Evaluation Summary ==========================='

  if(LI.1.COUNTY<>6) delete  
  IF(LI.1.Facility_Type=29) DELETE 

; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AL_CGTIME_{Year}{alt}
   TOTAL_VOL=LI.1.AL_VL_TOT_{Year}{alt}
   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFAC
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************
if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
   count=COUNT
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Loop to write out the Percent Root Mean Square Error

LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 

  if (_iter=1) print list=_ReportTitle,"\n","\n",

      ' A. RMSE and Volume/Count By Volume Group  ***********************************************************************',
      printo=1  
  
_RptTitle2= ' Vol Grp     Count Range     Model RMSE(%)  Allow RMSE Range     Volume        Count    Volume/Count  No of Links'
_RptTitle2a=' -------    --------------   -------------  ----------------  ----------    ----------  ------------  -----------'

  if (_iter=1) print list=_RptTitle2,"\n",_RptTitle2a," ", printo=1

  if (_cnt[_iter]>0) print,        
 list="    ",_iter(2.0c),"    ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

ENDLOOP

_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

list="   ALL ","   ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),"   ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(11.3),"%",
 "       ", _limit,"%",
 "      ",_vols[_iter](11.0c),
 "   ",_cns[_iter](11.0c),
 "     ",(_vols[_iter]/_cns[_iter])(5.2c),
 "          ",_cnt[_iter](5.0C), PRINTO=1

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT2 

_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  B. VOLUME AND COUNT SUMMARY BY 2-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3= '        FT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3,"\n",_RptTitle3a," ", printo=1

  if ((_cntbyft[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

 if ((_cntbyft[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyft[_iter](11.0c),
     "    ",_cntbyft[_iter](11.0c),
     "       ",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
     "          ",_lnkbyft[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT2
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  C. VOLUME AND COUNT SUMMARY BY 2-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4= '        AT2 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4a='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4,"\n",_RptTitle4a," ", printo=1

  if ((_cntbyat[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

 if ((_cntbyat[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyat[_iter](11.0c),
     "    ",_cntbyat[_iter](11.0c),
     "       ",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
     "          ",_lnkbyat[_iter](5.0c), PRINTO=1;

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for Vol/Cnt by FT1 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  D. VOLUME AND COUNT SUMMARY BY 1-DIGIT FACILITY TYPE ************************", PRINTO=1

_RptTitle3x= '        FT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle3xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle3x,"\n",_RptTitle3xa," ", printo=1

  if ((_cntbyftg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

 if ((_cntbyftg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyftg[_iter](11.0c),
     "    ",_cntbyftg[_iter](11.0c),
     "       ",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
     "          ",_lnkbyftg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ Summary for for Vol/Cnt by AT1
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  E. VOLUME AND COUNT SUMMARY BY 1-DIGIT AREA TYPE ****************************", PRINTO=1

_RptTitle4x= '        AT1 Grp           Volume         Count     Volume/Count    No of Links'
_RptTitle4xa='        -------        -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle4x,"\n",_RptTitle4xa," ", printo=1

  if ((_cntbyatg[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

 if ((_cntbyatg[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyatg[_iter](11.0c),
     "    ",_cntbyatg[_iter](11.0c),
     "       ",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
     "          ",_lnkbyatg[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  F. VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION *************************", PRINTO=1

_RptTitle5= '  Lanes/Direction        Volume         Count     Volume/Count    No of Links'
_RptTitle5a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle5,"\n",_RptTitle5a," ", printo=1

  if ((_cntbyLNS[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

 if ((_cntbyLNS[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyLNS[_iter](11.0c),
     "    ",_cntbyLNS[_iter](11.0c),
     "       ",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
     "          ",_lnkbyLNS[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  G. VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE ************************", PRINTO=1

_RptTitle6= '  Screen/Cut-Line        Volume         Count     Volume/Count    No of Links'
_RptTitle6a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle6,"\n",_RptTitle6a," ", printo=1

  if ((_cntbySL[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

 if ((_cntbySL[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbySL[_iter](11.0c),
     "    ",_cntbySL[_iter](11.0c),
     "       ",(_volbySL[_iter]/_cntbySL[_iter])(5.2c),
     "          ",_lnkbySL[_iter](5.0c), PRINTO=1

ENDLOOP

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++ one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n  H. VOLUME AND COUNT SUMMARY BY COUNTY **************************************", PRINTO=1

_RptTitle7= '      County             Volume         Count     Volume/Count    No of Links'
_RptTitle7a='  ---------------     -----------    -----------  ------------    -----------'

  if (_iter=1) print list=_RptTitle7,"\n",_RptTitle7a," ", printo=1

  if ((_cntbyCNTY[_iter]>0)&(_iter<100)) print,
    list="         ",_iter(3.0c),
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

 if ((_cntbyCNTY[100]>0)&(_iter=100)) print,
    list="         ", "ALL",
     "          ",_volbyCNTY[_iter](11.0c),
     "    ",_cntbyCNTY[_iter](11.0c),
     "       ",(_volbyCNTY[_iter]/_cntbyCNTY[_iter])(5.2c),
     "          ",_lnkbyCNTY[_iter](5.0c), PRINTO=1

ENDLOOP
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

;GTITLE=' - Putnam County'

if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Putnam',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif

if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'{ANALYSIS}',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}-Putnam',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nNO",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nNO",
           PRINTO=2
endif


ENDPHASE




ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TPROFILE_NERPM4_Cnty6.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TLinksCnt_Cnty6.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL/RMSE Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG
if ('{ANALYSIS}'='YES') GOTO TSKPN46
*{CATALOG_DIR}\User.prg\rmsedbf.exe >{SCENARIO_DIR}\output\rmsedbf.LOG
:TSKPN46

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-AL-N4-Putnam.out
*if exist RMSE.OUT copy /a rmse.out {SCENARIO_DIR}\output\rmse-TOD-AL-N4-Putnam.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-AL-N4-Putnam.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF
; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-AL-N4-Putnam.out" "{SCENARIO_DIR}\output\HEVAL-TOD-AL-Putnam.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\applications\PHNET00B.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\OUTPUT\PHNET00B.PRN" MSG='Remove Transit -Only links from loaded network hor Highway Evaluation'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\LOADED_CombinedPeriods.NET"
FILEO NETO = "{SCENARIO_DIR}\output\CombLDXX_HEVAL.NET"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

 
;Delete transit-Only non-highway links from loaded network
  IF(LI.1.Facility_Type=49,59,69) DELETE 

    

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY


ENDPHASE



ENDRUN


; Script for program NETWORK in file "C:\NERPM43\applications\PHNET00A.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-AM.PRN" MSG='Prepare for HEVAL for All Area'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLDXX_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TAMPROFILE_NERPM4.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\TAMLinksCnt0.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-AM.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

;if(LI.1.COUNTY<>6) delete       ;comment out for county specific evaluation & set county no (1=Nassau, 2=Duval,3=St Johns,
                                 ;                                                            4=Clay, 5=Baker, 6=Putnam)
;if(LI.1.FACILITY_TYPE=70-79,97-98) delete       ;comment out for RMSE without ramps                                                            4=Clay, 5=Baker, 6=Putnam)

;Delete dummy zone facility types (#29) since it will distort heval and/or crosstab stat with a speed of 1 MPH;
;NOTE: Without this, the "analysis" mode HEVAL output will be skewed, since it did not recognize the filtered facility
;      type of 29.
;Note: only valid 29 is mayport bridge link (64273-64589 of DISTANCEFT=2010)
  IF(LI.1.Facility_Type=29) DELETE 


; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.AM_CGTIME_{Year}{alt}

   TOTAL_VOL=LI.1.AM_VL_TOT_{Year}{alt}

   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES     ;Hourly
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFACAMP              ;DAILYCAP in fact the AM period capacity
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************

;Since No Period Count Coded onto Network Set the "Count" as ZERO

if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
;   count=COUNT
    count=0 
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY
; a little loop to write out the Percent Root Mean Square Error
LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 
  if (_iter=1) print list="*********************************** ROOT MEAN SQUARE ERROR SUMMARY BY VOLUME GROUP ***********************************", printo=1
  if (_cnt[_iter]>0) print,        
 list="%RMSE Vol Grp ",_iter(2.0c)," ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),": ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(7.3),"%",
 " Allow_RMSE = ", _limit,"%",
 " VOL=",_vols[_iter](11.0c),
 " CNT=",_cns[_iter](11.0c),
 " VOL/CNT=",(_vols[_iter]/_cns[_iter])(5.2c),
 " N=",_cnt[_iter](5.0CL), PRINTO=1
ENDLOOP
_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

 list="%RMSE Vol Grp ",_iter(2.0c)," ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),": ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(7.3),"%",
 " Allow_RMSE = ", _limit,"%",
 " VOL=",_vols[_iter](11.0c),
 " CNT=",_cns[_iter](11.0c),
 " VOL/CNT=",(_vols[_iter]/_cns[_iter])(5.2c),
 " N=",_cnt[_iter](5.0CL), PRINTO=1

; one for Vol/Cnt by FT 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY FACILITY TYPE **********************", PRINTO=1
if (_cntbyft[_iter]>0) print,
 list="Facility Type Summary for FT=",_iter(3.0c),
 " VOL=",_volbyft[_iter](11.0c),
 " CNT=",_cntbyft[_iter](11.0c),
 " VOL/CNT=",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
 "   N=",_lnkbyft[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by AT
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY AREA TYPE ************************", PRINTO=1
if (_cntbyat[_iter]>0) print,
 list="    Area Type Summary for AT=",_iter(3.0c),
 " VOL=",_volbyat[_iter](11.0c),

 " CNT=",_cntbyat[_iter](11.0c),
 " VOL/CNT=",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
 "   N=",_lnkbyat[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by FTG 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY FACILITY TYPE GROUP*****************", PRINTO=1
if (_cntbyftg[_iter]>0) print,
 list="Facility Type Summary for FTG=",_iter(3.0c),
 " VOL=",_volbyftg[_iter](11.0c),
 " CNT=",_cntbyftg[_iter](11.0c),
 " VOL/CNT=",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
 "   N=",_lnkbyftg[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by ATG
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY AREA TYPE GROUP*******************", PRINTO=1
if (_cntbyatg[_iter]>0) print,
 list="    Area Type Summary for ATG=",_iter(3.0c),
 " VOL=",_volbyatg[_iter](11.0c),

 " CNT=",_cntbyatg[_iter](11.0c),
 " VOL/CNT=",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
 "   N=",_lnkbyatg[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION*****************", PRINTO=1
if (_cntbyLNS[_iter]>0) print,
 list="Facility Type Summary for LNS=",_iter(3.0c),
 " VOL=",_volbyLNS[_iter](11.0c),
 " CNT=",_cntbyLNS[_iter](11.0c),
 " VOL/CNT=",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
 "   N=",_lnkbyLNS[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ******************** VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE *******************", PRINTO=1
if (_cntbysl[_iter]>0) print,
 list="    ScrCut Line Summary for SL=",_iter(3.0c),
 " VOL=",_volbysl[_iter](11.0c),
 " CNT=",_cntbysl[_iter](11.0c),
 " VOL/CNT=",(_volbysl[_iter]/_cntbysl[_iter])(5.2c),
 "   N=",_lnkbysl[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY COUNTY *****************************", PRINTO=1
if (_cntbycnty[_iter]>0) print,
 list="    County-wide Smry for Cnty = ",_iter(3.0c),
 " VOL=",_volbycnty[_iter](11.0c),
 " CNT=",_cntbycnty[_iter](11.0c),
 " VOL/CNT=",(_volbycnty[_iter]/_cntbycnty[_iter])(5.2c),
 "   N=",_lnkbycnty[_iter](5.0c), PRINTO=1
ENDLOOP

;----SKS (7/28/2008)---Write Profile for HEVAL-NERPM3-All Counties data
;GTITLE=' - ALL SIX COUNTIES'


;Turn -off validate mode since no period count on networl
/*
if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif
*/

;TODSpecificHEVAL Always in Analysis Mode

;if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'YES',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
;endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TAMPROFILE_NERPM4.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TAMLinksCnt0.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL-Analysis Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-AM-NERPM4.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-AM-NERPM4.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-AM-NERPM4.out" "{SCENARIO_DIR}\output\HEVAL-TOD-AM.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\PHNET00C.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-MD.PRN" MSG='Prepare for HEVAL for All Area'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLDXX_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TMDPROFILE_NERPM4.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\TMDLinksCnt0.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-MD.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

;if(LI.1.COUNTY<>6) delete       ;comment out for county specific evaluation & set county no (1=Nassau, 2=Duval,3=St Johns,
                                 ;                                                            4=Clay, 5=Baker, 6=Putnam)
;if(LI.1.FACILITY_TYPE=70-79,97-98) delete       ;comment out for RMSE without ramps                                                            4=Clay, 5=Baker, 6=Putnam)

;Delete dummy zone facility types (#29) since it will distort heval and/or crosstab stat with a speed of 1 MPH;
;NOTE: Without this, the "analysis" mode HEVAL output will be skewed, since it did not recognize the filtered facility
;      type of 29.
;Note: only valid 29 is mayport bridge link (64273-64589 of DISTANCEFT=2010)
  IF(LI.1.Facility_Type=29) DELETE 


; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.MD_CGTIME_{Year}{alt}

   TOTAL_VOL=LI.1.MD_VL_TOT_{Year}{alt}

   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES     ;Hourly
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFACMDP              ;DAILYCAP in fact the MD period capacity
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************

;Since No Period Count Coded onto Network Set the "Count" as ZERO

if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
;   count=COUNT
    count=0 
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY
; a little loop to write out the Percent Root Mean Square Error
LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 
  if (_iter=1) print list="*********************************** ROOT MEAN SQUARE ERROR SUMMARY BY VOLUME GROUP ***********************************", printo=1
  if (_cnt[_iter]>0) print,        
 list="%RMSE Vol Grp ",_iter(2.0c)," ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),": ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(7.3),"%",
 " Allow_RMSE = ", _limit,"%",
 " VOL=",_vols[_iter](11.0c),
 " CNT=",_cns[_iter](11.0c),
 " VOL/CNT=",(_vols[_iter]/_cns[_iter])(5.2c),
 " N=",_cnt[_iter](5.0CL), PRINTO=1
ENDLOOP
_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

 list="%RMSE Vol Grp ",_iter(2.0c)," ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),": ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(7.3),"%",
 " Allow_RMSE = ", _limit,"%",
 " VOL=",_vols[_iter](11.0c),
 " CNT=",_cns[_iter](11.0c),
 " VOL/CNT=",(_vols[_iter]/_cns[_iter])(5.2c),
 " N=",_cnt[_iter](5.0CL), PRINTO=1

; one for Vol/Cnt by FT 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY FACILITY TYPE **********************", PRINTO=1
if (_cntbyft[_iter]>0) print,
 list="Facility Type Summary for FT=",_iter(3.0c),
 " VOL=",_volbyft[_iter](11.0c),
 " CNT=",_cntbyft[_iter](11.0c),
 " VOL/CNT=",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
 "   N=",_lnkbyft[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by AT
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY AREA TYPE ************************", PRINTO=1
if (_cntbyat[_iter]>0) print,
 list="    Area Type Summary for AT=",_iter(3.0c),
 " VOL=",_volbyat[_iter](11.0c),

 " CNT=",_cntbyat[_iter](11.0c),
 " VOL/CNT=",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
 "   N=",_lnkbyat[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by FTG 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY FACILITY TYPE GROUP*****************", PRINTO=1
if (_cntbyftg[_iter]>0) print,
 list="Facility Type Summary for FTG=",_iter(3.0c),
 " VOL=",_volbyftg[_iter](11.0c),
 " CNT=",_cntbyftg[_iter](11.0c),
 " VOL/CNT=",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
 "   N=",_lnkbyftg[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by ATG
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY AREA TYPE GROUP*******************", PRINTO=1
if (_cntbyatg[_iter]>0) print,
 list="    Area Type Summary for ATG=",_iter(3.0c),
 " VOL=",_volbyatg[_iter](11.0c),

 " CNT=",_cntbyatg[_iter](11.0c),
 " VOL/CNT=",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
 "   N=",_lnkbyatg[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION*****************", PRINTO=1
if (_cntbyLNS[_iter]>0) print,
 list="Facility Type Summary for LNS=",_iter(3.0c),
 " VOL=",_volbyLNS[_iter](11.0c),
 " CNT=",_cntbyLNS[_iter](11.0c),
 " VOL/CNT=",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
 "   N=",_lnkbyLNS[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ******************** VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE *******************", PRINTO=1
if (_cntbysl[_iter]>0) print,
 list="    ScrCut Line Summary for SL=",_iter(3.0c),
 " VOL=",_volbysl[_iter](11.0c),
 " CNT=",_cntbysl[_iter](11.0c),
 " VOL/CNT=",(_volbysl[_iter]/_cntbysl[_iter])(5.2c),
 "   N=",_lnkbysl[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY COUNTY *****************************", PRINTO=1
if (_cntbycnty[_iter]>0) print,
 list="    County-wide Smry for Cnty = ",_iter(3.0c),
 " VOL=",_volbycnty[_iter](11.0c),
 " CNT=",_cntbycnty[_iter](11.0c),
 " VOL/CNT=",(_volbycnty[_iter]/_cntbycnty[_iter])(5.2c),
 "   N=",_lnkbycnty[_iter](5.0c), PRINTO=1
ENDLOOP

;----SKS (7/28/2008)---Write Profile for HEVAL-NERPM3-All Counties data
;GTITLE=' - ALL SIX COUNTIES'


;Turn -off validate mode since no period count on networl
/*
if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif
*/

;TODSpecificHEVAL Always in Analysis Mode

;if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'YES',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
;endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TMDPROFILE_NERPM4.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TMDLinksCnt0.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL-Analysis Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-MD-NERPM4.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-MD-NERPM4.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-MD-NERPM4.out" "{SCENARIO_DIR}\output\HEVAL-TOD-MD.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\PHNET00D.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-PM.PRN" MSG='Prepare for HEVAL for All Area'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLDXX_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TPMPROFILE_NERPM4.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\TPMLinksCnt0.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-PM.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

;if(LI.1.COUNTY<>6) delete       ;comment out for county specific evaluation & set county no (1=Nassau, 2=Duval,3=St Johns,
                                 ;                                                            4=Clay, 5=Baker, 6=Putnam)
;if(LI.1.FACILITY_TYPE=70-79,97-98) delete       ;comment out for RMSE without ramps                                                            4=Clay, 5=Baker, 6=Putnam)

;Delete dummy zone facility types (#29) since it will distort heval and/or crosstab stat with a speed of 1 MPH;
;NOTE: Without this, the "analysis" mode HEVAL output will be skewed, since it did not recognize the filtered facility
;      type of 29.
;Note: only valid 29 is mayport bridge link (64273-64589 of DISTANCEFT=2010)
  IF(LI.1.Facility_Type=29) DELETE 


; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.PM_CGTIME_{Year}{alt}

   TOTAL_VOL=LI.1.PM_VL_TOT_{Year}{alt}

   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES     ;Hourly
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFACPMP              ;DAILYCAP in fact the PM period capacity
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************

;Since No Period Count Coded onto Network Set the "Count" as ZERO

if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
;   count=COUNT
    count=0 
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY
; a little loop to write out the Percent Root Mean Square Error
LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 
  if (_iter=1) print list="*********************************** ROOT MEAN SQUARE ERROR SUMMARY BY VOLUME GROUP ***********************************", printo=1
  if (_cnt[_iter]>0) print,        
 list="%RMSE Vol Grp ",_iter(2.0c)," ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),": ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(7.3),"%",
 " Allow_RMSE = ", _limit,"%",
 " VOL=",_vols[_iter](11.0c),
 " CNT=",_cns[_iter](11.0c),
 " VOL/CNT=",(_vols[_iter]/_cns[_iter])(5.2c),
 " N=",_cnt[_iter](5.0CL), PRINTO=1
ENDLOOP
_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

 list="%RMSE Vol Grp ",_iter(2.0c)," ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),": ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(7.3),"%",
 " Allow_RMSE = ", _limit,"%",
 " VOL=",_vols[_iter](11.0c),
 " CNT=",_cns[_iter](11.0c),
 " VOL/CNT=",(_vols[_iter]/_cns[_iter])(5.2c),
 " N=",_cnt[_iter](5.0CL), PRINTO=1

; one for Vol/Cnt by FT 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY FACILITY TYPE **********************", PRINTO=1
if (_cntbyft[_iter]>0) print,
 list="Facility Type Summary for FT=",_iter(3.0c),
 " VOL=",_volbyft[_iter](11.0c),
 " CNT=",_cntbyft[_iter](11.0c),
 " VOL/CNT=",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
 "   N=",_lnkbyft[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by AT
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY AREA TYPE ************************", PRINTO=1
if (_cntbyat[_iter]>0) print,
 list="    Area Type Summary for AT=",_iter(3.0c),
 " VOL=",_volbyat[_iter](11.0c),

 " CNT=",_cntbyat[_iter](11.0c),
 " VOL/CNT=",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
 "   N=",_lnkbyat[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by FTG 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY FACILITY TYPE GROUP*****************", PRINTO=1
if (_cntbyftg[_iter]>0) print,
 list="Facility Type Summary for FTG=",_iter(3.0c),
 " VOL=",_volbyftg[_iter](11.0c),
 " CNT=",_cntbyftg[_iter](11.0c),
 " VOL/CNT=",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
 "   N=",_lnkbyftg[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by ATG
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY AREA TYPE GROUP*******************", PRINTO=1
if (_cntbyatg[_iter]>0) print,
 list="    Area Type Summary for ATG=",_iter(3.0c),
 " VOL=",_volbyatg[_iter](11.0c),

 " CNT=",_cntbyatg[_iter](11.0c),
 " VOL/CNT=",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
 "   N=",_lnkbyatg[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION*****************", PRINTO=1
if (_cntbyLNS[_iter]>0) print,
 list="Facility Type Summary for LNS=",_iter(3.0c),
 " VOL=",_volbyLNS[_iter](11.0c),
 " CNT=",_cntbyLNS[_iter](11.0c),
 " VOL/CNT=",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
 "   N=",_lnkbyLNS[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ******************** VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE *******************", PRINTO=1
if (_cntbysl[_iter]>0) print,
 list="    ScrCut Line Summary for SL=",_iter(3.0c),
 " VOL=",_volbysl[_iter](11.0c),
 " CNT=",_cntbysl[_iter](11.0c),
 " VOL/CNT=",(_volbysl[_iter]/_cntbysl[_iter])(5.2c),
 "   N=",_lnkbysl[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY COUNTY *****************************", PRINTO=1
if (_cntbycnty[_iter]>0) print,
 list="    County-wide Smry for Cnty = ",_iter(3.0c),
 " VOL=",_volbycnty[_iter](11.0c),
 " CNT=",_cntbycnty[_iter](11.0c),
 " VOL/CNT=",(_volbycnty[_iter]/_cntbycnty[_iter])(5.2c),
 "   N=",_lnkbycnty[_iter](5.0c), PRINTO=1
ENDLOOP

;----SKS (7/28/2008)---Write Profile for HEVAL-NERPM3-All Counties data
;GTITLE=' - ALL SIX COUNTIES'


;Turn -off validate mode since no period count on networl
/*
if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif
*/

;TODSpecificHEVAL Always in Analysis Mode

;if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'YES',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
;endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TPMPROFILE_NERPM4.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TPMLinksCnt0.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL-Analysis Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-PM-NERPM4.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-PM-NERPM4.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-PM-NERPM4.out" "{SCENARIO_DIR}\output\HEVAL-TOD-PM.PRN" '
ENDRUN

; Script for program NETWORK in file "C:\NERPM43\APPLICATIONS\PHNET00E.S"
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=NETWORK PRNFILE="{SCENARIO_DIR}\output\XTABSmryFinal-TOD-NT.PRN" MSG='Prepare for HEVAL for All Area'
FILEI LINKI[1] = "{SCENARIO_DIR}\output\CombLDXX_HEVAL.NET"
FILEO PRINTO[2] = "{SCENARIO_DIR}\output\TNTPROFILE_NERPM4.TXT"
FILEO LINKO = "{SCENARIO_DIR}\output\TNTLinksCnt0.DBF",
   FORMAT=DBF,include=A,B,DISTANCE,ONE,ATYPE2,FTYPE2,
      LANES,TIME,DAILYCAP,COUNT,SCRN,ZONE,USECODE,LOCATION,
      LANDUSE,CCODE,CGTIME,TOTAL_VOL,TOLL,TWOWAY
FILEO PRINTO[1] = "{SCENARIO_DIR}\output\RMSE-TOD-NT.PRN"

; =========================================================
; LINKMERGE PHASE
; =========================================================
PHASE=LINKMERGE

;if(LI.1.COUNTY<>6) delete       ;comment out for county specific evaluation & set county no (1=Nassau, 2=Duval,3=St Johns,
                                 ;                                                            4=Clay, 5=Baker, 6=Putnam)
;if(LI.1.FACILITY_TYPE=70-79,97-98) delete       ;comment out for RMSE without ramps                                                            4=Clay, 5=Baker, 6=Putnam)

;Delete dummy zone facility types (#29) since it will distort heval and/or crosstab stat with a speed of 1 MPH;
;NOTE: Without this, the "analysis" mode HEVAL output will be skewed, since it did not recognize the filtered facility
;      type of 29.
;Note: only valid 29 is mayport bridge link (64273-64589 of DISTANCEFT=2010)
  IF(LI.1.Facility_Type=29) DELETE 


; DUMMY VARIABLES FOR HEVALDBF
ZONE        =1
USECODE     =1
LANDUSE     =1
CCODE       =1
DIRCODE     =1
;
   LOCATION=LI.1.COUNTY
   CGTIME=LI.1.NT_CGTIME_{Year}{alt}

   TOTAL_VOL=LI.1.NT_VL_TOT_{Year}{alt}

   ft=LI.1.FACILITY_TYPE
   FACILITY=LI.1.FACILITY_TYPE
   at=LI.1.AREA_TYPE
   LNS=LI.1.NUM_LANES
   ftg=INT(LI.1.FACILITY_TYPE/10)
   atg=INT(LI.1.AREA_TYPE/10)
   sl=LI.1.SCREENLINE


;sks-Fill crosstab variables
   if (!(ft=50-59))
     _caplnmiles=li.1.CAPACITY*li.1.DISTANCE*LI.1.NUM_LANES     ;Hourly
     _orgtimehr=li.1.time/60
     _cgtimehr=cgtime/60
     _distmile=li.1.distance
     _lanemiles=lns*distance
     _orgspd=_distmile/_orgtimehr
     _links=1

    else
     _caplnmiles=0.0
     _orgtimehr=0.0
     _cgtimehr=0.0
     _distmile=0.0
     _lanemiles=0.0
     _orgspd=0.0
     _links=1
   endif 



;
;   ANODE=li.1.A
;   BNODE=li.1.B
   ONE=DIRCODE
   ATYPE2=at
   FTYPE2=ft
   LANES=LNS
;   USE=USECODE
;   CONSTRUCT=CCODE
;   CONG_TIME=CGTIME
;   MODELVOL=TOTAL_VOL
;   COST=li.1.TOLL
   TWOWAY=li.1.TWOWAY_{Year}{alt}
   DAILYCAP=li.1.CAPACITY*LNS/CONFACNTP              ;DAILYCAP in fact the Night period capacity
   SCRN=sl
   cnty=LI.1.COUNTY

; *SKS-6/28/2008****************************

;Since No Period Count Coded onto Network Set the "Count" as ZERO

if ('{ANALYSIS}' = 'YES')
   count=0            ;Important: this will turn-off RMSE, VOL/CONT by FT and AT
                      ;           for "analysis"="YES" mode 
  else
;   count=COUNT
    count=0 
endif

;   count   = COUNT    ;selected real counts, not repeated
/*
  if (DIR==1 & FTYPE1<>1); Both sides of freeways get the entire volume in the database
     PSAWDT00=AADT002W/MOCF
  else
     PSAWDT00= 0.5 * AADT002W/MOCF
  endif
*/
   _aK     = COUNT ;All COUNTS
;
; *****************************
;
; initialize arrays and variables
   ARRAY _err=13, _cns=13, _cnt=13, _RGP=13, _vols=13, _volbyft=100, _cntbyft=100
   ARRAY _volbyat=100, _cntbyat=100, _lnkbyft=100, _lnkbyat=100
   ARRAY _volbyftg=100, _volbyatg=100, _cntbyftg=100, _cntbyatg=100
   ARRAY _lnkbyftg=100, _lnkbyatg=100
   ARRAY _volbyLNS=100, _cntbyLNS=100, _lnkbyLNS=100
   ARRAY _volbysl=100, _cntbysl=100, _lnkbysl=100
   ARRAY _volbycnty=100, _cntbycnty=100, _lnkbycnty=100

   _group=(0.0*FACILITY_TYPE)
   _RGP[1]=1, _RGP[2]=5000, _RGP[3]=10000, _RGP[4]=20000, _RGP[5]=30000, _RGP[6]=40000, _RGP[7]=50000,
   _RGP[8]=60000, _RGP[9]=70000, _RGP[10]=80000, _RGP[11]=90000, _RGP[12]=100000, _RGP[13]=500000
   IF (A=1)
     LOOP _iter=1,13
           _err[_iter]=0,_cnt[_iter]=0,_cns[_iter]=0,_vols[_iter]=0
     ENDLOOP
     LOOP _iter=1,99
           _volbyft[_iter]=0, _cntbyft[_iter]=0, _lnkbyft[_iter]=0
           _volbyat[_iter]=0, _cntbyat[_iter]=0, _lnkbyat[_iter]=0
           _volbyftg[_iter]=0, _cntbyftg[_iter]=0, _lnkbyftg[_iter]=0
           _volbyatg[_iter]=0, _cntbyatg[_iter]=0, _lnkbyatg[_iter]=0
           _volbyLNS[_iter]=0, _cntbyLNS[_iter]=0, _lnkbyLNS[_iter]=0
           _volbysl[_iter]=0, _cntbysl[_iter]=0, _lnkbysl[_iter]=0
           _volbycnty[_iter]=0, _cntbycnty[_iter]=0, _lnkbycnty[_iter]=0
     ENDLOOP
   ENDIF
;   FNAME='ROADNAME'
; establish some English sounding variables for the output network
 ;  links=1
 ;  lanemiles=lns*distance
; calculate and compartmentalize
   IF (_aK>0) VOLCNT=TOTAL_VOL/_aK, _TVOL=TOTAL_VOL, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1
 
;   IF(_aK>0) VOLCNT=TOTAL_VOL/_aK, NETDIFF=TOTAL_VOL-_aK, ABSDIFF=ABS(NETDIFF), ERRORSQ=NETDIFF^2, PCTDIFF=100*NETDIFF/_aK _group=1, _TVOL=TOTAL_VOL
   IF (_aK>5000) _group=2
   IF (_aK>10000) _group=3
   IF (_aK>20000) _group=4
   IF (_aK>30000) _group=5
   IF (_aK>40000) _group=6
   IF (_aK>50000) _group=7
   IF (_aK>60000) _group=8
   IF (_aK>70000) _group=9
   IF (_aK>80000) _group=10
   IF (_aK>90000) _group=11
   IF (_aK>100000) _group=12
   IF (_aK>0) 
   _ERR[_group]=ERRORSQ+_ERR[_group], _CNS[_group]=_aK+_CNS[_group], _CNT[_group]=_CNT[_group]+1, _VOLS[_group]=_TVOL+_VOLS[_group]
   _ERR[13]=ERRORSQ+_ERR[13], _CNS[13]=_aK+_CNS[13], _CNT[13]=_CNT[13]+1, _VOLS[13]=_TVOL+_VOLS[13]
   ENDIF

IF (_aK>0)  
   _volbyft[ft]=_volbyft[ft]+TOTAL_VOL
   _cntbyft[ft]=_cntbyft[ft]+_aK
   _lnkbyft[ft]=_lnkbyft[ft]+1
   _volbyat[at]=_volbyat[at]+TOTAL_VOL
   _cntbyat[at]=_cntbyat[at]+_aK
   _lnkbyat[at]=_lnkbyat[at]+1
   _volbyft[100]=_volbyft[100]+TOTAL_VOL
   _cntbyft[100]=_cntbyft[100]+_aK
   _lnkbyft[100]=_lnkbyft[100]+1
   _volbyat[100]=_volbyat[100]+TOTAL_VOL
   _cntbyat[100]=_cntbyat[100]+_aK

   _lnkbyat[100]=_lnkbyat[100]+1
   _volbyftg[ftg]=_volbyftg[ftg]+TOTAL_VOL
   _cntbyftg[ftg]=_cntbyftg[ftg]+_aK
   _lnkbyftg[ftg]=_lnkbyftg[ftg]+1
   _volbyatg[atg]=_volbyatg[atg]+TOTAL_VOL
   _cntbyatg[atg]=_cntbyatg[atg]+_aK
   _lnkbyatg[atg]=_lnkbyatg[atg]+1
   _volbyftg[100]=_volbyftg[100]+TOTAL_VOL
   _cntbyftg[100]=_cntbyftg[100]+_aK
   _lnkbyftg[100]=_lnkbyftg[100]+1
   _volbyatg[100]=_volbyatg[100]+TOTAL_VOL
   _cntbyatg[100]=_cntbyatg[100]+_aK
   _lnkbyatg[100]=_lnkbyatg[100]+1
   _volbyLNS[LNS]=_volbyLNS[LNS]+TOTAL_VOL
   _cntbyLNS[LNS]=_cntbyLNS[LNS]+_aK
   _lnkbyLNS[LNS]=_lnkbyLNS[LNS]+1
   _volbysl[sl]=_volbysl[sl]+TOTAL_VOL
   _cntbysl[sl]=_cntbysl[sl]+_aK
   _lnkbysl[sl]=_lnkbysl[sl]+1
   _volbyLNS[100]=_volbyLNS[100]+TOTAL_VOL
   _cntbyLNS[100]=_cntbyLNS[100]+_aK
   _lnkbyLNS[100]=_lnkbyLNS[100]+1
   _volbysl[100]=_volbysl[100]+TOTAL_VOL
   _cntbysl[100]=_cntbysl[100]+_aK
   _lnkbysl[100]=_lnkbysl[100]+1
   _volbycnty[cnty]=_volbycnty[cnty]+TOTAL_VOL
   _cntbycnty[cnty]=_cntbycnty[cnty]+_aK
   _lnkbycnty[cnty]=_lnkbycnty[cnty]+1
   _volbycnty[100]=_volbycnty[100]+TOTAL_VOL
   _cntbycnty[100]=_cntbycnty[100]+_aK
   _lnkbycnty[100]=_lnkbycnty[100]+1

endif
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FT, range=10-99-10,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FT, range=10-99-10,
    col=AT, range=10-59-10
ENDIF
CROSSTAB  VAR= _LINKS _LANEMILES, form=12.0c,
    row=FTG, range=1-9-1,
    col=LNS, range=1-5-1,6-9
IF (_aK>0)
CROSSTAB  VAR= TOTAL_VOL,_aK, form=12.0c,
    row=FTG, range=1-9-1,
    col=ATG, range=1-5-1
ENDIF

;sks - for computing capacity of the network by FTG and ATG
CROSSTAB  VAR= _LANEMILES, form=14.2c, VAR= _CAPLNMILES, form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_CAPLNMILES/_LANEMILES, form=14.2


;CROSSTAB  VAR= _CAPLNMILES, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing original Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_orgtimehr form=14.2c, VAR=_orgspd form=14.2c,VAR=_links form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_orgtimehr, form=14.2,
    comp=_orgspd/_links, form=14.2

;CROSSTAB  VAR= orgtimehr, form=14.2c,
;    row=FTG, range=1-9-1,1-9,
;    col=ATG, range=1-5-1,1-5


;sks - for computing Congested Speed the network by FTG and ATG
CROSSTAB  VAR=_distmile form=14.2c, VAR=_cgtimehr form=14.2c,
    row=FTG, range=1-9-1,1-9,
    col=ATG, range=1-5-1,1-5,
    comp=_distmile/_cgtimehr, form=14.2
    

;if (count=0) delete

ENDPHASE

; =========================================================
; SUMMARY REPORTING
; =========================================================
PHASE=SUMMARY
; a little loop to write out the Percent Root Mean Square Error
LOOP _iter=1,12 

;  set allowable limit ranges
   if (_iter=1) _limit='45 - 55'
   if (_iter=2) _limit='35 - 45'
   if (_iter=3) _limit='27 - 35'
   if (_iter=4) _limit='24 - 27'
   if (_iter=5) _limit='22 - 24'
   if (_iter=6) _limit='20 - 22'
   if (_iter=7) _limit='18 - 20'
   if (_iter=8) _limit='17 - 18'
   if (_iter=9) _limit='16 - 17'
   if (_iter=10) _limit='15 - 16'
   if (_iter=11) _limit='14 - 15'
   if (_iter=12) _limit='LT 14  '
 
  if (_iter=1) print list="*********************************** ROOT MEAN SQUARE ERROR SUMMARY BY VOLUME GROUP ***********************************", printo=1
  if (_cnt[_iter]>0) print,        
 list="%RMSE Vol Grp ",_iter(2.0c)," ",_RGP[_iter](7.0c),"-",_RGP[_iter+1](7.0c),": ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(7.3),"%",
 " Allow_RMSE = ", _limit,"%",
 " VOL=",_vols[_iter](11.0c),
 " CNT=",_cns[_iter](11.0c),
 " VOL/CNT=",(_vols[_iter]/_cns[_iter])(5.2c),
 " N=",_cnt[_iter](5.0CL), PRINTO=1
ENDLOOP
_iter=13

;  set allowable limit ranges
 if (_iter=13) _limit='32 - 39'

 list="%RMSE Vol Grp ",_iter(2.0c)," ",_RGP[1](7.0c),"-",_RGP[_iter](7.0c),": ",sqrt(_err[_iter]/(_cnt[_iter]-1))/(_cns[_iter]/_cnt[_iter])*100(7.3),"%",
 " Allow_RMSE = ", _limit,"%",
 " VOL=",_vols[_iter](11.0c),
 " CNT=",_cns[_iter](11.0c),
 " VOL/CNT=",(_vols[_iter]/_cns[_iter])(5.2c),
 " N=",_cnt[_iter](5.0CL), PRINTO=1

; one for Vol/Cnt by FT 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY FACILITY TYPE **********************", PRINTO=1
if (_cntbyft[_iter]>0) print,
 list="Facility Type Summary for FT=",_iter(3.0c),
 " VOL=",_volbyft[_iter](11.0c),
 " CNT=",_cntbyft[_iter](11.0c),
 " VOL/CNT=",(_volbyft[_iter]/_cntbyft[_iter])(5.2c),
 "   N=",_lnkbyft[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by AT
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY AREA TYPE ************************", PRINTO=1
if (_cntbyat[_iter]>0) print,
 list="    Area Type Summary for AT=",_iter(3.0c),
 " VOL=",_volbyat[_iter](11.0c),

 " CNT=",_cntbyat[_iter](11.0c),
 " VOL/CNT=",(_volbyat[_iter]/_cntbyat[_iter])(5.2c),
 "   N=",_lnkbyat[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by FTG 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY FACILITY TYPE GROUP*****************", PRINTO=1
if (_cntbyftg[_iter]>0) print,
 list="Facility Type Summary for FTG=",_iter(3.0c),
 " VOL=",_volbyftg[_iter](11.0c),
 " CNT=",_cntbyftg[_iter](11.0c),
 " VOL/CNT=",(_volbyftg[_iter]/_cntbyftg[_iter])(5.2c),
 "   N=",_lnkbyftg[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by ATG
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY AREA TYPE GROUP*******************", PRINTO=1
if (_cntbyatg[_iter]>0) print,
 list="    Area Type Summary for ATG=",_iter(3.0c),
 " VOL=",_volbyatg[_iter](11.0c),

 " CNT=",_cntbyatg[_iter](11.0c),
 " VOL/CNT=",(_volbyatg[_iter]/_cntbyatg[_iter])(5.2c),
 "   N=",_lnkbyatg[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by LNS 
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ********************** VOLUME AND COUNT SUMMARY BY LANES PER DIRECTION*****************", PRINTO=1
if (_cntbyLNS[_iter]>0) print,
 list="Facility Type Summary for LNS=",_iter(3.0c),
 " VOL=",_volbyLNS[_iter](11.0c),
 " CNT=",_cntbyLNS[_iter](11.0c),
 " VOL/CNT=",(_volbyLNS[_iter]/_cntbyLNS[_iter])(5.2c),
 "   N=",_lnkbyLNS[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by SL
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ******************** VOLUME AND COUNT SUMMARY BY SCREENLINE & CUTLINE *******************", PRINTO=1
if (_cntbysl[_iter]>0) print,
 list="    ScrCut Line Summary for SL=",_iter(3.0c),
 " VOL=",_volbysl[_iter](11.0c),
 " CNT=",_cntbysl[_iter](11.0c),
 " VOL/CNT=",(_volbysl[_iter]/_cntbysl[_iter])(5.2c),
 "   N=",_lnkbysl[_iter](5.0c), PRINTO=1
ENDLOOP

; one for Vol/Cnt by County
_iter=0
LOOP _iter=1,100
  if (_iter=1) print list="\n","\n ************************* VOLUME AND COUNT SUMMARY BY COUNTY *****************************", PRINTO=1
if (_cntbycnty[_iter]>0) print,
 list="    County-wide Smry for Cnty = ",_iter(3.0c),
 " VOL=",_volbycnty[_iter](11.0c),
 " CNT=",_cntbycnty[_iter](11.0c),
 " VOL/CNT=",(_volbycnty[_iter]/_cntbycnty[_iter])(5.2c),
 "   N=",_lnkbycnty[_iter](5.0c), PRINTO=1
ENDLOOP

;----SKS (7/28/2008)---Write Profile for HEVAL-NERPM3-All Counties data
;GTITLE=' - ALL SIX COUNTIES'


;Turn -off validate mode since no period count on networl
/*
if ('{VALIDATE}' = 'YES')           ;Validate Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\nNO",
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\n",'{VALIDATE}',
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                      ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
endif
*/

;TODSpecificHEVAL Always in Analysis Mode

;if ('{ANALYSIS}' = 'YES')           ;Analysis Mode
    PRINT LIST="&HEVALDBF      HEVAL Input DBF File",
           "\nLNKSCNT.DBF",
           "\n&ANALYSIS      Sets HEVAL to run in analysis mode if (YES)",
           "\n",'YES',
           "\n&VALIDATE      Sets HEVAL to run in validate mode if (YES)",
           "\nNO",
           "\n&GLTITLE       Specifies title for HEVAL runs using geographic location",
           "\n",'{HEVAL_TITLE}',                                                                       ;GTITLE,
           "\n&ASCII         Generates ASCII file (HRLDXY.ASC) with 1-way vol and cap",
           "\nYES",
           "\n&TWOWAY        Generates second ASCII file (HRLDXY2.ASC) with 2-way vol and cap", 
           "\nYES",
           PRINTO=2
;endif


ENDPHASE



ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

*REM -- Copy required Input files of HEVAL/RMSE routines to Cube Folder...
*copy /a {SCENARIO_DIR}\output\TNTPROFILE_NERPM4.TXT PROFILE.MAS
*copy /a {CATALOG_DIR}\parameters\HESCREEN.SYN HESCREEN.SYN
*copy /a {CATALOG_DIR}\parameters\HELABELS.SYN HELABELS.SYN
*copy /a {CATALOG_DIR}\parameters\HERATES.SYN HERATES.SYN
*copy /a {CATALOG_DIR}\parameters\DATABASE.CTL DATABASE.CTL
*copy /b "{SCENARIO_DIR}\output\TNTLinksCnt0.DBF" LnksCnt.DBF

*REM -- Clean the Cube Folder of HEVAL/RMSE outputs from any previous run (if any)...
*if exist HEVAL.OUT del HEVAL.OUT
*if exist RMSE.OUT del RMSE.OUT
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC.ASC del HRLDXY2.ASC

*REM -- Run HEVAL-Analysis Routines...
*{CATALOG_DIR}\User.prg\hevaldbf.exe >{SCENARIO_DIR}\output\hevaldbf.LOG

*REM -- Save HEVAL/RMSE outputs from Cube folder to user's output folder...
*if exist HEVAL.OUT copy /a heval.out {SCENARIO_DIR}\output\heval-TOD-NT-NERPM4.out
*if exist SCRNLINE.ASC copy /a SCRNLINE.ASC {SCENARIO_DIR}\output\SCRNLINE-TOD-NT-NERPM4.out

*REM -- Delete HEVAL/RMSE outputs from Cube folder...
*if exist HEVAL.OUT del heval.out
*if exist RMSE.OUT del rmse.out
*if exist SCRNLINE.ASC del SCRNLINE.ASC
*if exist HRLDXY.ASC del HRLDXY.ASC
*if exist HRLDXY2.ASC del HRLDXY2.ASC

*REM -- Clean Cube folder of HEVAL/RMSE routines' Inputs...
*if exist PROFILE.MAS del PROFILE.MAS
*if exist HESCREEN.SYN del HESCREEN.SYN
*if exist HELABELS.SYN del HELABELS.SYN
*if exist HERATES.SYN del HERATES.SYN
*if exist DATABASE.CTL del DATABASE.CTL
*if exist LnksCnt.DBF del LnksCnt.DBF

; End of PILOT Script

RUN PGM="C:\Program Files (x86)\Citilabs\Cube\TRCOPY.bat" PARAMETERS='"{SCENARIO_DIR}\output\heval-TOD-NT-NERPM4.out" "{SCENARIO_DIR}\output\HEVAL-TOD-NT.PRN" '
ENDRUN

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

endif           ;Time of Day (4 periods) Highway Model
; End of PILOT Script

LOOP per = 1, 2, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

    IF (PER == 1)
        Period='PK'
        HWYNET = 'PRELOAD_PT'
        perNum = 1
    ELSEIF (PER == 2)
        Period='OP'
        HWYNET = 'UNLOADED_PT'
        perNum = 2
    ENDIF

; End of PILOT Script

  LOOP Access = 1, 3, 1

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

        IF (ACCESS == 1)
            ACCESS_Name='Walk'
        ELSEIF (ACCESS == 2)
            ACCESS_NAME='PNR'
        ELSEIF (ACCESS == 3)
            ACCESS_NAME='KNR'
        ENDIF
; End of PILOT Script

; Script for program PUBLIC TRANSPORT in file "C:\NERPM43\APPLICATIONS\TAPTR00A.S"
;;<<Default Template>><<PUBLIC TRANSPORT>><<Default>>;;
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.
RUN PGM=PUBLIC TRANSPORT
FILEO STOP2STOPO[1] = "{SCENARIO_DIR}\output\STATION@PERIOD@_@ACCESS_NAME@.DBF",
 ACCUMULATE=FIRSTLAST, NODES=1-99999
FILEO REPORTO = "{SCENARIO_DIR}\output\TLOAD@PERIOD@_@ACCESS_NAME@.RPT"
FILEO LINKO[1] = "{SCENARIO_DIR}\output\TLINK@PERIOD@_@ACCESS_NAME@.DBF",
NTLEGS=T, ONOFFS=T
FILEO NETO = "{SCENARIO_DIR}\output\TLOAD@PERIOD@_@ACCESS_NAME@.NET"
FILEI NETI = "{SCENARIO_DIR}\output\Transit@PERIOD@_@Access_Name@.NET"
FILEI MATI[1] = "{SCENARIO_DIR}\output\tload_@period@_@ACCESS_Name@.mat"
FILEI ROUTEI[5] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_COMRAIL_@ACCESS_Name@_{Alt}{year}.RTE"
FILEI ROUTEI[4] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_BRTLRT_@ACCESS_Name@_{Alt}{year}.RTE"
FILEI ROUTEI[3] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_EXPRESS_@ACCESS_Name@_{Alt}{year}.RTE"
FILEI ROUTEI[2] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_LOCAL_@ACCESS_Name@_{Alt}{year}.RTE"
FILEI ROUTEI[1] = "{SCENARIO_DIR}\output\TPATH_@PERIOD@_SKYWAY_@ACCESS_Name@_{Alt}{year}.RTE"

            
            ; OVERALL PARAMETERS OF RUN
            PARAMETERS NOROUTEMSGS=0, NOROUTEERRS=9999999, USERCLASSES=1-5,HDWAYPERIOD=1, ;@PERNUM@,
                TRIPSIJ[1]=MI.1.1,
                TRIPSIJ[2]=MI.1.2,
                TRIPSIJ[3]=MI.1.3,
                TRIPSIJ[4]=MI.1.4,
                TRIPSIJ[5]=MI.1.5
            REPORT LINES=T, LINEVOLS=T

ENDRUN


; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

; End of PILOT Script

  ENDLOOP

; PILOT Script
; Do not change filenames or add or remove FILEI/FILEO statements using an editor. Use Cube/Application Manager.

; End of PILOT Script

ENDLOOP

